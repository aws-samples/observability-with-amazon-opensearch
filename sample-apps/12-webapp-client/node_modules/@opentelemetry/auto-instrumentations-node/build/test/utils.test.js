"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@opentelemetry/api");
const assert = require("assert");
const sinon = require("sinon");
const src_1 = require("../src");
describe('utils', () => {
    describe('getNodeAutoInstrumentations', () => {
        it('should load default instrumentations', () => {
            const instrumentations = src_1.getNodeAutoInstrumentations();
            const expectedInstrumentations = [
                '@opentelemetry/instrumentation-amqplib',
                '@opentelemetry/instrumentation-aws-lambda',
                '@opentelemetry/instrumentation-aws-sdk',
                '@opentelemetry/instrumentation-bunyan',
                '@opentelemetry/instrumentation-cassandra-driver',
                '@opentelemetry/instrumentation-connect',
                '@opentelemetry/instrumentation-dns',
                '@opentelemetry/instrumentation-express',
                '@opentelemetry/instrumentation-fastify',
                '@opentelemetry/instrumentation-generic-pool',
                '@opentelemetry/instrumentation-graphql',
                '@opentelemetry/instrumentation-grpc',
                '@opentelemetry/instrumentation-hapi',
                '@opentelemetry/instrumentation-http',
                '@opentelemetry/instrumentation-ioredis',
                '@opentelemetry/instrumentation-knex',
                '@opentelemetry/instrumentation-koa',
                '@opentelemetry/instrumentation-memcached',
                '@opentelemetry/instrumentation-mongodb',
                '@opentelemetry/instrumentation-mysql2',
                '@opentelemetry/instrumentation-mysql',
                '@opentelemetry/instrumentation-nestjs-core',
                '@opentelemetry/instrumentation-net',
                '@opentelemetry/instrumentation-pg',
                '@opentelemetry/instrumentation-pino',
                '@opentelemetry/instrumentation-redis',
                '@opentelemetry/instrumentation-redis-4',
                '@opentelemetry/instrumentation-restify',
                '@opentelemetry/instrumentation-winston',
            ];
            assert.strictEqual(instrumentations.length, 29);
            for (let i = 0, j = instrumentations.length; i < j; i++) {
                assert.strictEqual(instrumentations[i].instrumentationName, expectedInstrumentations[i], `Instrumentation ${expectedInstrumentations[i]}, not loaded`);
            }
        });
        it('should use user config', () => {
            function applyCustomAttributesOnSpan() { }
            const instrumentations = src_1.getNodeAutoInstrumentations({
                '@opentelemetry/instrumentation-http': {
                    applyCustomAttributesOnSpan,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName === '@opentelemetry/instrumentation-http');
            const configHttp = instrumentation._config;
            assert.strictEqual(configHttp.applyCustomAttributesOnSpan, applyCustomAttributesOnSpan);
        });
        it('should not return disabled instrumentation', () => {
            const instrumentations = src_1.getNodeAutoInstrumentations({
                '@opentelemetry/instrumentation-grpc': {
                    enabled: false,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName === '@opentelemetry/instrumentation-grpc');
            assert.strictEqual(instrumentation, undefined);
        });
        it('should show error for none existing instrumentation', () => {
            const spy = sinon.stub(api_1.diag, 'error');
            const name = '@opentelemetry/instrumentation-http2';
            const instrumentations = src_1.getNodeAutoInstrumentations({
                // @ts-expect-error verify that wrong name works
                [name]: {
                    enabled: false,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName === name);
            assert.strictEqual(instrumentation, undefined);
            assert.strictEqual(spy.args[0][0], `Provided instrumentation name "${name}" not found`);
        });
    });
});
//# sourceMappingURL=utils.test.js.map