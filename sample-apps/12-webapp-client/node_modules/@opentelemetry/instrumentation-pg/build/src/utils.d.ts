import { Span, Tracer } from '@opentelemetry/api';
import { PgClientExtended, NormalizedQueryConfig, PostgresCallback, PgClientConnectionParams, PgPoolCallback, PgInstrumentationConfig } from './types';
import * as pgTypes from 'pg';
export declare function getJDBCString(params: PgClientConnectionParams): string;
export declare function handleConfigQuery(this: PgClientExtended, tracer: Tracer, instrumentationConfig: PgInstrumentationConfig, queryConfig: NormalizedQueryConfig): Span;
export declare function handleParameterizedQuery(this: PgClientExtended, tracer: Tracer, instrumentationConfig: PgInstrumentationConfig, query: string, values: unknown[]): Span;
export declare function handleTextQuery(this: PgClientExtended, tracer: Tracer, query: string): Span;
/**
 * Invalid query handler. We should never enter this function unless invalid args were passed to the driver.
 * Create and immediately end a new span
 */
export declare function handleInvalidQuery(this: PgClientExtended, tracer: Tracer, originalQuery: typeof pgTypes.Client.prototype.query, ...args: unknown[]): void;
export declare function handleExecutionResult(config: PgInstrumentationConfig, span: Span, pgResult: pgTypes.QueryResult | pgTypes.QueryArrayResult | unknown): void;
export declare function patchCallback(instrumentationConfig: PgInstrumentationConfig, span: Span, cb: PostgresCallback): PostgresCallback;
export declare function patchCallbackPGPool(span: Span, cb: PgPoolCallback): PgPoolCallback;
//# sourceMappingURL=utils.d.ts.map