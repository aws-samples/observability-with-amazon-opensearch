{"version":3,"file":"OTLPMetricExporter.js","sourceRoot":"","sources":["../../src/OTLPMetricExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0EAG2C;AAE3C,mCAAoE;AACpE,iEAA8D;AAC9D,8CAA2D;AAC3D,iCAAiD;AACjD,2CAAyC;AAEzC,MAAM,qBAAqB,GAAG,gBAAgB,CAAC;AAE/C;;GAEG;AACH,MAAa,kBACX,SAAQ,2CAGP;IAKD,YAAY,SAAiC,EAAE;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;QAJhB,+BAA+B;QACZ,eAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC;QAI7D,MAAM,OAAO,GAAG,mBAAY,CAAC,uBAAuB,CAAC,aAAM,EAAE,CAAC,kCAAkC,CAAC,CAAC;QAClG,IAAI,CAAC,QAAQ,KAAb,IAAI,CAAC,QAAQ,GAAK,IAAI,kBAAQ,EAAE,EAAC;QACjC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxB;IACH,CAAC;IAED,OAAO,CACL,OAAuB;QAEvB,OAAO,qDAAgC,CACrC,OAAO,EACP,IAAI,CAAC,UAAU,EACf,IAAI,CACL,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,MAA8B;QAC1C,OAAO,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;YACnC,CAAC,CAAC,8BAAuB,CAAC,MAAM,CAAC,GAAG,CAAC;YACrC,CAAC,CAAC,aAAM,EAAE,CAAC,mCAAmC,CAAC,MAAM,GAAG,CAAC;gBACzD,CAAC,CAAC,8BAAuB,CAAC,aAAM,EAAE,CAAC,mCAAmC,CAAC;gBACvE,CAAC,CAAC,aAAM,EAAE,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC;oBACjD,CAAC,CAAC,8BAAuB,CAAC,aAAM,EAAE,CAAC,2BAA2B,CAAC;oBAC/D,CAAC,CAAC,qBAAqB,CAAC;IAC5B,CAAC;IAED,oBAAoB;QAClB,OAAO,yBAAiB,CAAC,OAAO,CAAC;IACnC,CAAC;IAED,mBAAmB;QACjB,OAAO,gEAAgE,CAAC;IAC1E,CAAC;CACF;AA7CD,gDA6CC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  otlpTypes,\n  toOTLPExportMetricServiceRequest,\n} from '@opentelemetry/exporter-otlp-http';\nimport { MetricRecord, MetricExporter } from '@opentelemetry/sdk-metrics-base';\nimport { OTLPExporterConfigNode, ServiceClientType } from './types';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport { validateAndNormalizeUrl } from './util';\nimport { Metadata } from '@grpc/grpc-js';\n\nconst DEFAULT_COLLECTOR_URL = 'localhost:4317';\n\n/**\n * OTLP Metric Exporter for Node\n */\nexport class OTLPMetricExporter\n  extends OTLPExporterNodeBase<\n    MetricRecord,\n    otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest\n  >\n  implements MetricExporter {\n  // Converts time to nanoseconds\n  protected readonly _startTime = new Date().getTime() * 1000000;\n\n  constructor(config: OTLPExporterConfigNode = {}) {\n    super(config);\n    const headers = baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS);\n    this.metadata ||= new Metadata();\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v)\n    }\n  }\n\n  convert(\n    metrics: MetricRecord[]\n  ): otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest {\n    return toOTLPExportMetricServiceRequest(\n      metrics,\n      this._startTime,\n      this\n    );\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigNode) {\n    return typeof config.url === 'string'\n      ? validateAndNormalizeUrl(config.url)\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? validateAndNormalizeUrl(getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT)\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? validateAndNormalizeUrl(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT)\n      : DEFAULT_COLLECTOR_URL;\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.METRICS;\n  }\n\n  getServiceProtoPath(): string {\n    return 'opentelemetry/proto/collector/metrics/v1/metrics_service.proto';\n  }\n}\n"]}