{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAAgE;AAKhE,mCAAmC;AAC5B,MAAM,SAAS,GAAsD,CAC1E,IAAI,EACJ,EAAY,EACZ,EAAE;IACF,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IACf,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE;YACX,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC;AAZW,QAAA,SAAS,aAYpB;AAEF;;;GAGG;AACI,MAAM,wCAAwC,GAAG,CACtD,MAA8C,EAC9B,EAAE;IAClB,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,CAAC,EAAE;QACxC,OAAO,oBAAc,CAAC,KAAK,CAAC;KAC7B;IACD,OAAO,oBAAc,CAAC,KAAK,CAAC;AAC9B,CAAC,CAAC;AAPW,QAAA,wCAAwC,4CAOnD;AAEK,MAAM,2BAA2B,GAAG,CAAC,MAAc,EAAc,EAAE;IACxE,OAAO,EAAE,IAAI,EAAE,IAAA,gDAAwC,EAAC,MAAM,CAAC,EAAE,CAAC;AACpE,CAAC,CAAC;AAFW,QAAA,2BAA2B,+BAEtC;AAEF;;;;GAIG;AACH,MAAM,iBAAiB,GAAG,CACxB,UAAkB,EAClB,OAAsB,EACb,EAAE;IACX,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,OAAO,CAAC,WAAW,EAAE,KAAK,UAAU,CAAC,WAAW,EAAE,CAAC;KAC3D;SAAM,IAAI,OAAO,YAAY,MAAM,EAAE;QACpC,OAAO,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACjC;SAAM,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;QACxC,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC;KAC5B;SAAM;QACL,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC;AAEF;;;;;;GAMG;AACI,MAAM,gBAAgB,GAAG,CAC9B,UAAkB,EAClB,cAAgC,EACvB,EAAE;IACX,IAAI,CAAC,cAAc,EAAE;QACnB,0BAA0B;QAC1B,OAAO,KAAK,CAAC;KACd;IAED,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;QACpC,IAAI,iBAAiB,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAhBW,QAAA,gBAAgB,oBAgB3B","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanStatusCode, SpanStatus } from '@opentelemetry/api';\nimport type * as grpcTypes from 'grpc';\nimport type * as grpcJsTypes from '@grpc/grpc-js';\nimport { IgnoreMatcher } from './types';\n\n// Equivalent to lodash _.findIndex\nexport const findIndex: <T>(args: T[], fn: (arg: T) => boolean) => number = (\n  args,\n  fn: Function\n) => {\n  let index = -1;\n  for (const arg of args) {\n    index++;\n    if (fn(arg)) {\n      return index;\n    }\n  }\n  return -1;\n};\n\n/**\n * Convert a grpc status code to an opentelemetry SpanStatus code.\n * @param status\n */\nexport const _grpcStatusCodeToOpenTelemetryStatusCode = (\n  status?: grpcTypes.status | grpcJsTypes.status\n): SpanStatusCode => {\n  if (status !== undefined && status === 0) {\n    return SpanStatusCode.UNSET;\n  }\n  return SpanStatusCode.ERROR;\n};\n\nexport const _grpcStatusCodeToSpanStatus = (status: number): SpanStatus => {\n  return { code: _grpcStatusCodeToOpenTelemetryStatusCode(status) };\n};\n\n/**\n * Returns true if methodName matches pattern\n * @param methodName the name of the method\n * @param pattern Match pattern\n */\nconst _satisfiesPattern = (\n  methodName: string,\n  pattern: IgnoreMatcher\n): boolean => {\n  if (typeof pattern === 'string') {\n    return pattern.toLowerCase() === methodName.toLowerCase();\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(methodName);\n  } else if (typeof pattern === 'function') {\n    return pattern(methodName);\n  } else {\n    return false;\n  }\n};\n\n/**\n * Returns true if the current plugin configuration\n * ignores the given method.\n * @param methodName the name of the method\n * @param ignoredMethods a list of matching patterns\n * @param onException an error handler for matching exceptions\n */\nexport const _methodIsIgnored = (\n  methodName: string,\n  ignoredMethods?: IgnoreMatcher[]\n): boolean => {\n  if (!ignoredMethods) {\n    // No ignored gRPC methods\n    return false;\n  }\n\n  for (const pattern of ignoredMethods) {\n    if (_satisfiesPattern(methodName, pattern)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n"]}