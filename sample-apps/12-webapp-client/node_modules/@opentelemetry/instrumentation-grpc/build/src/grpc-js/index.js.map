{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/grpc-js/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as grpcJs from '@grpc/grpc-js';\nimport {\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport { GrpcInstrumentationConfig } from '../types';\nimport {\n  ServerCallWithMeta,\n  SendUnaryDataCallback,\n  ServerRegisterFunction,\n  HandleCall,\n  MakeClientConstructorFunction,\n  PackageDefinition,\n  GrpcClientFunc,\n} from './types';\nimport {\n  context,\n  propagation,\n  ROOT_CONTEXT,\n  SpanOptions,\n  SpanKind,\n  trace,\n} from '@opentelemetry/api';\nimport {\n  shouldNotTraceServerCall,\n  handleServerFunction,\n  handleUntracedServerFunction,\n} from './serverUtils';\nimport {\n  getMethodsToWrap,\n  makeGrpcClientRemoteCall,\n  getMetadata,\n} from './clientUtils';\nimport { EventEmitter } from 'events';\nimport { AttributeNames } from '../enums/AttributeNames';\n\nexport class GrpcJsInstrumentation extends InstrumentationBase {\n  constructor(\n    name: string,\n    version: string,\n    config?: GrpcInstrumentationConfig,\n  ) {\n    super(name, version, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition<typeof grpcJs>(\n        '@grpc/grpc-js',\n        ['1.*'],\n        (moduleExports, version) => {\n          this._diag.debug(`Applying patch for @grpc/grpc-js@${version}`);\n          if (isWrapped(moduleExports.Server.prototype.register)) {\n            this._unwrap(moduleExports.Server.prototype, 'register');\n          }\n          // Patch Server methods\n          this._wrap(\n            moduleExports.Server.prototype,\n            'register',\n            this._patchServer() as any\n          );\n          // Patch Client methods\n          if (isWrapped(moduleExports.makeGenericClientConstructor)) {\n            this._unwrap(moduleExports, 'makeGenericClientConstructor');\n          }\n          this._wrap(\n            moduleExports,\n            'makeGenericClientConstructor',\n            this._patchClient(moduleExports)\n          );\n          if (isWrapped(moduleExports.makeClientConstructor)) {\n            this._unwrap(moduleExports, 'makeClientConstructor');\n          }\n          this._wrap(\n            moduleExports,\n            'makeClientConstructor',\n            this._patchClient(moduleExports)\n          );\n          if (isWrapped(moduleExports.loadPackageDefinition)) {\n            this._unwrap(moduleExports, 'loadPackageDefinition');\n          }\n          this._wrap(\n            moduleExports,\n            'loadPackageDefinition',\n            this._patchLoadPackageDefinition(moduleExports)\n          );\n          return moduleExports;\n        },\n        (moduleExports, version) => {\n          if (moduleExports === undefined) return;\n          this._diag.debug(`Removing patch for @grpc/grpc-js@${version}`);\n\n          this._unwrap(moduleExports.Server.prototype, 'register');\n          this._unwrap(moduleExports, 'makeClientConstructor');\n          this._unwrap(moduleExports, 'makeGenericClientConstructor');\n          this._unwrap(moduleExports, 'loadPackageDefinition');\n        }\n      ),\n    ];\n  }\n\n  override getConfig(): GrpcInstrumentationConfig {\n    return super.getConfig();\n  }\n\n  /**\n   * Patch for grpc.Server.prototype.register(...) function. Provides auto-instrumentation for\n   * client_stream, server_stream, bidi, unary server handler calls.\n   */\n  private _patchServer(): (\n    originalRegister: ServerRegisterFunction\n  ) => ServerRegisterFunction {\n    const instrumentation = this;\n    return (originalRegister: ServerRegisterFunction) => {\n      const config = this.getConfig();\n      instrumentation._diag.debug('patched gRPC server');\n      return function register<RequestType, ResponseType>(\n        this: grpcJs.Server,\n        name: string,\n        handler: HandleCall<unknown, unknown>,\n        serialize: grpcJs.serialize<unknown>,\n        deserialize: grpcJs.deserialize<unknown>,\n        type: string\n      ): boolean {\n        const originalRegisterResult = originalRegister.call(\n          this,\n          name,\n          handler,\n          serialize,\n          deserialize,\n          type\n        );\n        const handlerSet = this['handlers'].get(name);\n\n        instrumentation._wrap(\n          handlerSet,\n          'func',\n          (originalFunc: HandleCall<unknown, unknown>) => {\n            return function func(\n              this: typeof handlerSet,\n              call: ServerCallWithMeta<RequestType, ResponseType>,\n              callback: SendUnaryDataCallback<unknown>\n            ) {\n              const self = this;\n\n              if (\n                shouldNotTraceServerCall(\n                  call.metadata,\n                  name,\n                  config.ignoreGrpcMethods\n                )\n              ) {\n                return handleUntracedServerFunction(\n                  type,\n                  originalFunc,\n                  call,\n                  callback\n                );\n              }\n\n              const spanName = `grpc.${name.replace('/', '')}`;\n              const spanOptions: SpanOptions = {\n                kind: SpanKind.SERVER,\n              };\n\n              instrumentation._diag.debug(`patch func: ${JSON.stringify(spanOptions)}`);\n\n              context.with(\n                propagation.extract(ROOT_CONTEXT, call.metadata, {\n                  get: (carrier, key) => carrier.get(key).map(String),\n                  keys: carrier => Object.keys(carrier.getMap()),\n                }),\n                () => {\n                  const span = instrumentation.tracer\n                    .startSpan(spanName, spanOptions)\n                    .setAttributes({\n                      [AttributeNames.GRPC_KIND]: spanOptions.kind,\n                    });\n\n                  context.with(trace.setSpan(context.active(), span), () => {\n                    handleServerFunction.call(\n                      self,\n                      span,\n                      type,\n                      originalFunc,\n                      call,\n                      callback\n                    );\n                  });\n                }\n              );\n            };\n          }\n        );\n        return originalRegisterResult;\n      } as typeof grpcJs.Server.prototype.register;\n    };\n  }\n\n  /**\n   * Entry point for applying client patches to `grpc.makeClientConstructor(...)` equivalents\n   * @param this GrpcJsPlugin\n   */\n  private _patchClient(\n    grpcClient: typeof grpcJs\n  ): (\n    original: MakeClientConstructorFunction\n  ) => MakeClientConstructorFunction {\n    const instrumentation = this;\n    return (original: MakeClientConstructorFunction) => {\n      instrumentation._diag.debug('patching client');\n      return function makeClientConstructor(\n        this: typeof grpcJs.Client,\n        methods: grpcJs.ServiceDefinition,\n        serviceName: string,\n        options?: object\n      ) {\n        const client = original.call(this, methods, serviceName, options);\n        instrumentation._massWrap<typeof client.prototype, string>(\n          client.prototype,\n          getMethodsToWrap.call(instrumentation, client, methods),\n          instrumentation._getPatchedClientMethods(grpcClient)\n        );\n        return client;\n      };\n    };\n  }\n\n  /**\n   * Entry point for client patching for grpc.loadPackageDefinition(...)\n   * @param this - GrpcJsPlugin\n   */\n  private _patchLoadPackageDefinition(grpcClient: typeof grpcJs) {\n    const instrumentation = this;\n    instrumentation._diag.debug('patching loadPackageDefinition');\n    return (original: typeof grpcJs.loadPackageDefinition) => {\n      return function patchedLoadPackageDefinition(\n        this: null,\n        packageDef: PackageDefinition\n      ) {\n        const result: grpcJs.GrpcObject = original.call(\n          this,\n          packageDef\n        ) as grpcJs.GrpcObject;\n        instrumentation._patchLoadedPackage(grpcClient, result);\n        return result;\n      } as typeof grpcJs.loadPackageDefinition;\n    };\n  }\n\n  /**\n   * Parse initial client call properties and start a span to trace its execution\n   */\n  private _getPatchedClientMethods(\n    grpcClient: typeof grpcJs\n  ): (original: GrpcClientFunc) => () => EventEmitter {\n    const instrumentation = this;\n    return (original: GrpcClientFunc) => {\n      instrumentation._diag.debug('patch all client methods');\n      function clientMethodTrace(this: grpcJs.Client) {\n        const name = `grpc.${original.path.replace('/', '')}`;\n        const args = [...arguments];\n        const metadata = getMetadata.call(\n          instrumentation,\n          grpcClient,\n          original,\n          args\n        );\n        const span = instrumentation.tracer.startSpan(name, {\n          kind: SpanKind.CLIENT,\n        });\n        return context.with(trace.setSpan(context.active(), span), () =>\n          makeGrpcClientRemoteCall(original, args, metadata, this)(span)\n        );\n      }\n      Object.assign(clientMethodTrace, original);\n      return clientMethodTrace;\n    };\n  }\n\n  /**\n   * Utility function to patch *all* functions loaded through a proto file.\n   * Recursively searches for Client classes and patches all methods, reversing the\n   * parsing done by grpc.loadPackageDefinition\n   * https://github.com/grpc/grpc-node/blob/1d14203c382509c3f36132bd0244c99792cb6601/packages/grpc-js/src/make-client.ts#L200-L217\n   */\n  private _patchLoadedPackage(\n    grpcClient: typeof grpcJs,\n    result: grpcJs.GrpcObject\n  ): void {\n    Object.values(result).forEach(service => {\n      if (typeof service === 'function') {\n        this._massWrap<typeof service.prototype, string>(\n          service.prototype,\n          getMethodsToWrap.call(this, service, service.service),\n          this._getPatchedClientMethods.call(this, grpcClient)\n        );\n      } else if (typeof service.format !== 'string') {\n        // GrpcObject\n        this._patchLoadedPackage.call(\n          this,\n          grpcClient,\n          service as grpcJs.GrpcObject\n        );\n      }\n    });\n  }\n}\n"]}