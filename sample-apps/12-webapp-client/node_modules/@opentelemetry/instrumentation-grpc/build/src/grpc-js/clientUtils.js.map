{"version":3,"file":"clientUtils.js","sourceRoot":"","sources":["../../../src/grpc-js/clientUtils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,4CAO4B;AAE5B,oCAIkB;AAClB,+CAAgD;AAEhD,4DAAyD;AACzD,8EAAyE;AAEzE;;;GAGG;AACH,SAAgB,gBAAgB,CAE9B,MAA4B,EAC5B,OAAqD;IAErD,MAAM,UAAU,GAAa,EAAE,CAAC;IAEhC,kDAAkD;IAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE;QAC3D,IAAI,CAAC,IAAA,wBAAgB,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,EAAE;YAC/D,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,6CAA6C;YACpE,IACE,YAAY;gBACZ,iDAAiD;gBACjD,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC;gBAC7C,IAAI,KAAK,YAAY,CAAC,wBAAwB;cAC9C;gBACA,4CAA4C;gBAC5C,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAC/B;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC;AAxBD,4CAwBC;AAED;;;GAGG;AACH,SAAgB,wBAAwB,CACtC,QAAwB,EACxB,IAAe,EACf,QAAyB,EACzB,IAAmB;IAEnB;;;OAGG;IACH,SAAS,eAAe,CACtB,IAAU,EACV,QAA6C;QAE7C,MAAM,SAAS,GAAwC,CACrD,GAA+B,EAC/B,GAAQ,EACR,EAAE;YACF,IAAI,GAAG,EAAE;gBACP,IAAI,GAAG,CAAC,IAAI,EAAE;oBACZ,IAAI,CAAC,SAAS,CAAC,IAAA,mCAA2B,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,YAAY,CACf,yCAAkB,CAAC,oBAAoB,EACvC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CACpB,CAAC;iBACH;gBACD,IAAI,CAAC,aAAa,CAAC;oBACjB,CAAC,+BAAc,CAAC,eAAe,CAAC,EAAE,GAAG,CAAC,IAAI;oBAC1C,CAAC,+BAAc,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,OAAO;iBACjD,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,oBAAc,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC/C,IAAI,CAAC,YAAY,CACf,yCAAkB,CAAC,oBAAoB,EACvC,oBAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAChC,CAAC;aACH;YAED,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC;QACF,OAAO,aAAO,CAAC,IAAI,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,SAAS,CAAC,CAAC;IACnD,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,EAAE;QACpB,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YAC5B,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC7C,OAAO,OAAO,GAAG,KAAK,UAAU,CAAC;YACnC,CAAC,CAAC,CAAC;YACH,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;gBAC5B,IAAI,CAAC,iBAAiB,CAAC,GAAG,eAAe,CACvC,IAAI,EACJ,IAAI,CAAC,iBAAiB,CAAwC,CAC/D,CAAC;aACH;SACF;QAED,IAAI,CAAC,aAAa,CAAC;YACjB,CAAC,+BAAc,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,IAAI;YAC3C,CAAC,+BAAc,CAAC,SAAS,CAAC,EAAE,cAAQ,CAAC,MAAM;SAC5C,CAAC,CAAC;QAEH,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzB,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAExC,2BAA2B;QAC3B,IAAI,QAAQ,CAAC,cAAc,EAAE;YAC3B,8CAA8C;YAC9C,8CAA8C;YAC9C,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,MAAM,OAAO,GAAG,GAAG,EAAE;gBACnB,IAAI,CAAC,SAAS,EAAE;oBACd,IAAI,CAAC,GAAG,EAAE,CAAC;oBACX,SAAS,GAAG,IAAI,CAAC;iBAClB;YACH,CAAC,CAAC;YACF,aAAO,CAAC,IAAI,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAwB,EAAE,EAAE;gBAC5C,IAAI,IAAI,CAAC,6BAAe,CAAC,EAAE;oBACzB,OAAO;iBACR;gBACD,IAAI,CAAC,6BAAe,CAAC,GAAG,IAAI,CAAC;gBAE7B,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,IAAA,gDAAwC,EAAC,GAAG,CAAC,IAAI,CAAC;oBACxD,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC;gBACH,IAAI,CAAC,aAAa,CAAC;oBACjB,CAAC,+BAAc,CAAC,eAAe,CAAC,EAAE,GAAG,CAAC,IAAI;oBAC1C,CAAC,+BAAc,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,OAAO;iBACjD,CAAC,CAAC;gBAEH,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAkB,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,6BAAe,CAAC,EAAE;oBACzB,OAAO;iBACR;gBACD,IAAI,CAAC,6BAAe,CAAC,GAAG,IAAI,CAAC;gBAE7B,IAAI,CAAC,SAAS,CAAC,IAAA,mCAA2B,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAEzD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AA7GD,4DA6GC;AAED;;GAEG;AACH,SAAgB,WAAW,CAEzB,UAAyB,EACzB,QAAwB,EACxB,IAAsC;IAEtC,IAAI,QAAyB,CAAC;IAE9B,0DAA0D;IAC1D,uEAAuE;IACvE,wEAAwE;IACxE,sCAAsC;IACtC,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAA8B,EAAE,EAAE;QACpE,OAAO,CACL,GAAG;YACH,OAAO,GAAG,KAAK,QAAQ;YACtB,GAAuB,CAAC,cAAc,CAAC,IAAI,6KAA6K;YACzN,OAAQ,GAAuB,CAAC,MAAM,KAAK,UAAU,CACtD,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB,QAAQ,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;YAC3B,yBAAyB;YACzB,aAAa,GAAG,CAAC,CAAC;SACnB;aAAM;YACL,wBAAwB;YACxB,aAAa,GAAG,CAAC,CAAC;SACnB;QACD,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;KACzC;SAAM;QACL,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAoB,CAAC;KACnD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAlCD,kCAkCC;AAED;;;;GAIG;AACH,SAAgB,cAAc,CAAC,QAAyB;IACtD,iBAAW,CAAC,MAAM,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE;QAC7C,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAyB,CAAC;KACpE,CAAC,CAAC;AACL,CAAC;AAJD,wCAIC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GrpcJsInstrumentation } from './';\nimport type { GrpcClientFunc, SendUnaryDataCallback } from './types';\nimport {\n  SpanKind,\n  Span,\n  SpanStatusCode,\n  SpanStatus,\n  propagation,\n  context,\n} from '@opentelemetry/api';\nimport type * as grpcJs from '@grpc/grpc-js';\nimport {\n  _grpcStatusCodeToSpanStatus,\n  _grpcStatusCodeToOpenTelemetryStatusCode,\n  _methodIsIgnored,\n} from '../utils';\nimport { CALL_SPAN_ENDED } from './serverUtils';\nimport { EventEmitter } from 'events';\nimport { AttributeNames } from '../enums/AttributeNames';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\n/**\n * Parse a package method list and return a list of methods to patch\n * with both possible casings e.g. \"TestMethod\" & \"testMethod\"\n */\nexport function getMethodsToWrap(\n  this: GrpcJsInstrumentation,\n  client: typeof grpcJs.Client,\n  methods: { [key: string]: { originalName?: string } }\n): string[] {\n  const methodList: string[] = [];\n\n  // For a method defined in .proto as \"UnaryMethod\"\n  Object.entries(methods).forEach(([name, { originalName }]) => {\n    if (!_methodIsIgnored(name, this.getConfig().ignoreGrpcMethods)) {\n      methodList.push(name); // adds camel case method name: \"unaryMethod\"\n      if (\n        originalName &&\n        // eslint-disable-next-line no-prototype-builtins\n        client.prototype.hasOwnProperty(originalName) &&\n        name !== originalName // do not add duplicates\n      ) {\n        // adds original method name: \"UnaryMethod\",\n        methodList.push(originalName);\n      }\n    }\n  });\n\n  return methodList;\n}\n\n/**\n * Execute grpc client call. Apply completitionspan properties and end the\n * span on callback or receiving an emitted event.\n */\nexport function makeGrpcClientRemoteCall(\n  original: GrpcClientFunc,\n  args: unknown[],\n  metadata: grpcJs.Metadata,\n  self: grpcJs.Client\n): (span: Span) => EventEmitter {\n  /**\n   * Patches a callback so that the current span for this trace is also ended\n   * when the callback is invoked.\n   */\n  function patchedCallback(\n    span: Span,\n    callback: SendUnaryDataCallback<ResponseType>\n  ) {\n    const wrappedFn: SendUnaryDataCallback<ResponseType> = (\n      err: grpcJs.ServiceError | null,\n      res: any\n    ) => {\n      if (err) {\n        if (err.code) {\n          span.setStatus(_grpcStatusCodeToSpanStatus(err.code));\n          span.setAttribute(\n            SemanticAttributes.RPC_GRPC_STATUS_CODE,\n            err.code.toString()\n          );\n        }\n        span.setAttributes({\n          [AttributeNames.GRPC_ERROR_NAME]: err.name,\n          [AttributeNames.GRPC_ERROR_MESSAGE]: err.message,\n        });\n      } else {\n        span.setStatus({ code: SpanStatusCode.UNSET });\n        span.setAttribute(\n          SemanticAttributes.RPC_GRPC_STATUS_CODE,\n          SpanStatusCode.UNSET.toString()\n        );\n      }\n\n      span.end();\n      callback(err, res);\n    };\n    return context.bind(context.active(), wrappedFn);\n  }\n\n  return (span: Span) => {\n    // if unary or clientStream\n    if (!original.responseStream) {\n      const callbackFuncIndex = args.findIndex(arg => {\n        return typeof arg === 'function';\n      });\n      if (callbackFuncIndex !== -1) {\n        args[callbackFuncIndex] = patchedCallback(\n          span,\n          args[callbackFuncIndex] as SendUnaryDataCallback<ResponseType>\n        );\n      }\n    }\n\n    span.setAttributes({\n      [AttributeNames.GRPC_METHOD]: original.path,\n      [AttributeNames.GRPC_KIND]: SpanKind.CLIENT,\n    });\n\n    setSpanContext(metadata);\n    const call = original.apply(self, args);\n\n    // if server stream or bidi\n    if (original.responseStream) {\n      // Both error and status events can be emitted\n      // the first one emitted set spanEnded to true\n      let spanEnded = false;\n      const endSpan = () => {\n        if (!spanEnded) {\n          span.end();\n          spanEnded = true;\n        }\n      };\n      context.bind(context.active(), call);\n      call.on('error', (err: grpcJs.ServiceError) => {\n        if (call[CALL_SPAN_ENDED]) {\n          return;\n        }\n        call[CALL_SPAN_ENDED] = true;\n\n        span.setStatus({\n          code: _grpcStatusCodeToOpenTelemetryStatusCode(err.code),\n          message: err.message,\n        });\n        span.setAttributes({\n          [AttributeNames.GRPC_ERROR_NAME]: err.name,\n          [AttributeNames.GRPC_ERROR_MESSAGE]: err.message,\n        });\n\n        endSpan();\n      });\n\n      call.on('status', (status: SpanStatus) => {\n        if (call[CALL_SPAN_ENDED]) {\n          return;\n        }\n        call[CALL_SPAN_ENDED] = true;\n\n        span.setStatus(_grpcStatusCodeToSpanStatus(status.code));\n\n        endSpan();\n      });\n    }\n    return call;\n  };\n}\n\n/**\n * Returns the metadata argument from user provided arguments (`args`)\n */\nexport function getMetadata(\n  this: GrpcJsInstrumentation,\n  grpcClient: typeof grpcJs,\n  original: GrpcClientFunc,\n  args: Array<unknown | grpcJs.Metadata>\n): grpcJs.Metadata {\n  let metadata: grpcJs.Metadata;\n\n  // This finds an instance of Metadata among the arguments.\n  // A possible issue that could occur is if the 'options' parameter from\n  // the user contains an '_internal_repr' as well as a 'getMap' function,\n  // but this is an extremely rare case.\n  let metadataIndex = args.findIndex((arg: unknown | grpcJs.Metadata) => {\n    return (\n      arg &&\n      typeof arg === 'object' &&\n      (arg as grpcJs.Metadata)['internalRepr'] && // changed from _internal_repr in grpc --> @grpc/grpc-js https://github.com/grpc/grpc-node/blob/95289edcaf36979cccf12797cc27335da8d01f03/packages/grpc-js/src/metadata.ts#L88\n      typeof (arg as grpcJs.Metadata).getMap === 'function'\n    );\n  });\n  if (metadataIndex === -1) {\n    metadata = new grpcClient.Metadata();\n    if (!original.requestStream) {\n      // unary or server stream\n      metadataIndex = 1;\n    } else {\n      // client stream or bidi\n      metadataIndex = 0;\n    }\n    args.splice(metadataIndex, 0, metadata);\n  } else {\n    metadata = args[metadataIndex] as grpcJs.Metadata;\n  }\n  return metadata;\n}\n\n/**\n * Inject opentelemetry trace context into `metadata` for use by another\n * grpc receiver\n * @param metadata\n */\nexport function setSpanContext(metadata: grpcJs.Metadata): void {\n  propagation.inject(context.active(), metadata, {\n    set: (metadata, k, v) => metadata.set(k, v as grpcJs.MetadataValue),\n  });\n}\n"]}