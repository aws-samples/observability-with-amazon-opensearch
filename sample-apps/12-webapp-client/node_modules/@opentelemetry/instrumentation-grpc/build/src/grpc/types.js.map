{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/grpc/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as grpcTypes from 'grpc';\nimport * as events from 'events';\n\nexport type SendUnaryDataCallback = (\n  error: grpcTypes.ServiceError | null,\n  value?: any,\n  trailer?: grpcTypes.Metadata,\n  flags?: grpcTypes.writeFlags\n) => void;\n\ninterface GrpcStatus {\n  code: number;\n  details: string;\n  metadata: grpcTypes.Metadata;\n}\n\nexport type ServerCall =\n  | typeof grpcTypes.ServerUnaryCall\n  | typeof grpcTypes.ServerReadableStream\n  | typeof grpcTypes.ServerWritableStream\n  | typeof grpcTypes.ServerDuplexStream;\n\nexport type ServerCallWithMeta = ServerCall & {\n  metadata: grpcTypes.Metadata;\n  status: GrpcStatus;\n  request?: unknown;\n} & events.EventEmitter;\n\nexport type GrpcClientFunc = typeof Function & {\n  path: string;\n  requestStream: boolean;\n  responseStream: boolean;\n};\n\nexport type GrpcInternalClientTypes = {\n  makeClientConstructor: typeof grpcTypes.makeGenericClientConstructor;\n};\n"]}