{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/grpc/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as grpcTypes from 'grpc';\nimport {\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  InstrumentationBase,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport {\n  GrpcInternalClientTypes,\n  ServerCallWithMeta,\n  SendUnaryDataCallback,\n  GrpcClientFunc,\n} from './types';\nimport { GrpcInstrumentationConfig } from '../types';\nimport {\n  context,\n  propagation,\n  SpanOptions,\n  SpanKind,\n  trace,\n} from '@opentelemetry/api';\nimport {\n  clientStreamAndUnaryHandler,\n  shouldNotTraceServerCall,\n  serverStreamAndBidiHandler,\n} from './serverUtils';\nimport { makeGrpcClientRemoteCall, getMetadata } from './clientUtils';\nimport { _methodIsIgnored } from '../utils';\nimport { AttributeNames } from '../enums/AttributeNames';\n\n/**\n * Holding reference to grpc module here to access constant of grpc modules\n * instead of just requiring it avoid directly depending on grpc itself.\n */\nlet grpcClient: typeof grpcTypes;\n\nexport class GrpcNativeInstrumentation extends InstrumentationBase<\n  typeof grpcTypes\n> {\n  constructor(\n    name: string,\n    version: string,\n    config?: GrpcInstrumentationConfig\n  ) {\n    super(name, version, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition<typeof grpcTypes>(\n        'grpc',\n        ['1.*'],\n        (moduleExports, version) => {\n          this._diag.debug(`Applying patch for grpc@${version}`);\n          grpcClient = moduleExports;\n\n          if (isWrapped(moduleExports.Server.prototype.register)) {\n            this._unwrap(moduleExports.Server.prototype, 'register');\n          }\n          this._wrap(\n            moduleExports.Server.prototype,\n            'register',\n            this._patchServer(moduleExports) as any\n          );\n          // Wrap the externally exported client constructor\n          if (isWrapped(moduleExports.makeGenericClientConstructor)) {\n            this._unwrap(moduleExports, 'makeGenericClientConstructor');\n          }\n          this._wrap(\n            moduleExports,\n            'makeGenericClientConstructor',\n            this._patchClient()\n          );\n          return moduleExports;\n        },\n        (moduleExports, version) => {\n          if (moduleExports === undefined) return;\n          this._diag.debug(`Removing patch for grpc@${version}`);\n\n          this._unwrap(moduleExports.Server.prototype, 'register');\n        },\n        this._getInternalPatchs()\n      ),\n    ];\n  }\n\n  override getConfig(): GrpcInstrumentationConfig {\n    return super.getConfig();\n  }\n\n  private _getInternalPatchs() {\n    const onPatch = (\n      moduleExports: GrpcInternalClientTypes,\n      version?: string\n    ) => {\n      this._diag.debug(`Applying internal patch for grpc@${version}`);\n      if (isWrapped(moduleExports.makeClientConstructor)) {\n        this._unwrap(moduleExports, 'makeClientConstructor');\n      }\n      this._wrap(moduleExports, 'makeClientConstructor', this._patchClient());\n      return moduleExports;\n    };\n    const onUnPatch = (\n      moduleExports?: GrpcInternalClientTypes,\n      version?: string\n    ) => {\n      if (moduleExports === undefined) return;\n      this._diag.debug(`Removing internal patch for grpc@${version}`);\n      this._unwrap(moduleExports, 'makeClientConstructor');\n    };\n    return [\n      new InstrumentationNodeModuleFile<GrpcInternalClientTypes>(\n        'grpc/src/node/src/client.js',\n        ['0.13 - 1.6'],\n        onPatch,\n        onUnPatch\n      ),\n      new InstrumentationNodeModuleFile<GrpcInternalClientTypes>(\n        'grpc/src/client.js',\n        ['^1.7'],\n        onPatch,\n        onUnPatch\n      ),\n    ];\n  }\n\n  private _patchServer(grpcModule: typeof grpcTypes) {\n    const instrumentation = this;\n    return (originalRegister: typeof grpcTypes.Server.prototype.register) => {\n      instrumentation._diag.debug('patched gRPC server');\n\n      return function register<RequestType, ResponseType>(\n        this: grpcTypes.Server & { handlers: any },\n        name: string,\n        handler: grpcTypes.handleCall<RequestType, ResponseType>,\n        serialize: grpcTypes.serialize<RequestType>,\n        deserialize: grpcTypes.deserialize<RequestType>,\n        type: string\n      ) {\n        const originalResult = originalRegister.apply(this, arguments as any);\n        const handlerSet = this.handlers[name];\n\n        instrumentation._wrap(\n          handlerSet,\n          'func',\n          (originalFunc: grpcTypes.handleCall<RequestType, ResponseType>) => {\n            return function func(\n              this: typeof handlerSet,\n              call: ServerCallWithMeta,\n              callback: SendUnaryDataCallback\n            ) {\n              const self = this;\n              if (shouldNotTraceServerCall.call(instrumentation, call, name)) {\n                switch (type) {\n                  case 'unary':\n                  case 'client_stream':\n                    return (originalFunc as Function).call(\n                      self,\n                      call,\n                      callback\n                    );\n                  case 'server_stream':\n                  case 'bidi':\n                    return (originalFunc as Function).call(self, call);\n                  default:\n                    return originalResult;\n                }\n              }\n              const spanName = `grpc.${name.replace('/', '')}`;\n              const spanOptions: SpanOptions = {\n                kind: SpanKind.SERVER,\n              };\n\n              instrumentation._diag.debug(`patch func: ${JSON.stringify(spanOptions)}`);\n\n              context.with(\n                propagation.extract(context.active(), call.metadata, {\n                  get: (metadata, key) => metadata.get(key).map(String),\n                  keys: metadata => Object.keys(metadata.getMap()),\n                }),\n                () => {\n                  const span = instrumentation.tracer\n                    .startSpan(spanName, spanOptions)\n                    .setAttributes({\n                      [AttributeNames.GRPC_KIND]: spanOptions.kind,\n                    });\n\n                  context.with(trace.setSpan(context.active(), span), () => {\n                    switch (type) {\n                      case 'unary':\n                      case 'client_stream':\n                        return clientStreamAndUnaryHandler(\n                          grpcModule,\n                          span,\n                          call,\n                          callback,\n                          originalFunc,\n                          self\n                        );\n                      case 'server_stream':\n                      case 'bidi':\n                        return serverStreamAndBidiHandler(\n                          span,\n                          call,\n                          originalFunc,\n                          self\n                        );\n                      default:\n                        break;\n                    }\n                  });\n                }\n              );\n            };\n          }\n        );\n\n        return originalResult;\n      };\n    };\n  }\n\n  private _patchClient() {\n    const instrumentation = this;\n    return (original: typeof grpcTypes.makeGenericClientConstructor): never => {\n      instrumentation._diag.debug('patching client');\n      return function makeClientConstructor(\n        this: typeof grpcTypes.Client,\n        methods: { [key: string]: { originalName?: string } },\n        _serviceName: string,\n        _options: grpcTypes.GenericClientOptions\n      ) {\n        const client = original.apply(this, arguments as any);\n        instrumentation._massWrap(\n          client.prototype as never,\n          instrumentation._getMethodsToWrap(client, methods) as never[],\n          instrumentation._getPatchedClientMethods() as any\n        );\n        return client;\n      } as never;\n    };\n  }\n\n  private _getMethodsToWrap(\n    client: typeof grpcTypes.Client,\n    methods: { [key: string]: { originalName?: string } }\n  ): string[] {\n    const methodList: string[] = [];\n\n    // For a method defined in .proto as \"UnaryMethod\"\n    Object.entries(methods).forEach(([name, { originalName }]) => {\n      if (!_methodIsIgnored(name, this.getConfig().ignoreGrpcMethods)) {\n        methodList.push(name); // adds camel case method name: \"unaryMethod\"\n        if (\n          originalName &&\n          // eslint-disable-next-line no-prototype-builtins\n          client.prototype.hasOwnProperty(originalName) &&\n          name !== originalName // do not add duplicates\n        ) {\n          // adds original method name: \"UnaryMethod\",\n          methodList.push(originalName);\n        }\n      }\n    });\n    return methodList;\n  }\n\n  private _getPatchedClientMethods() {\n    const instrumentation = this;\n    return (original: GrpcClientFunc) => {\n      instrumentation._diag.debug('patch all client methods');\n      function clientMethodTrace(this: grpcTypes.Client) {\n        const name = `grpc.${(original.path as string | undefined)?.replace(\n          '/',\n          ''\n        )}`;\n        const args = Array.prototype.slice.call(arguments);\n        const metadata = getMetadata(grpcClient, original, args);\n        const span = instrumentation.tracer.startSpan(name, {\n          kind: SpanKind.CLIENT,\n        });\n        return context.with(trace.setSpan(context.active(), span), () =>\n          makeGrpcClientRemoteCall(\n            grpcClient,\n            original,\n            args,\n            metadata,\n            this\n          )(span)\n        );\n      }\n      Object.assign(clientMethodTrace, original);\n      return clientMethodTrace;\n    };\n  }\n}\n"]}