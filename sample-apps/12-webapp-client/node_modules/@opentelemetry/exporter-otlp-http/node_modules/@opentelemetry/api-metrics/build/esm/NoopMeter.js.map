{"version":3,"file":"NoopMeter.js","sourceRoot":"","sources":["../../src/NoopMeter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchObserverResult } from './types/BatchObserverResult';\nimport { Meter } from './types/Meter';\nimport {\n  MetricOptions,\n  UnboundMetric,\n  Labels,\n  Counter,\n  ValueRecorder,\n  ValueObserver,\n  UpDownCounter,\n  BaseObserver,\n  UpDownSumObserver,\n} from './types/Metric';\nimport {\n  BoundValueRecorder,\n  BoundCounter,\n  BoundBaseObserver,\n} from './types/BoundInstrument';\nimport { ObserverResult } from './types/ObserverResult';\nimport { Observation } from './types/Observation';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * Returns constant noop value recorder.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createValueRecorder(_name: string, _options?: MetricOptions): ValueRecorder {\n    return NOOP_VALUE_RECORDER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns constant noop value observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  createValueObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): ValueObserver {\n    return NOOP_VALUE_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the sum observer callback\n   */\n  createSumObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): ValueObserver {\n    return NOOP_SUM_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop up down sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the up down sum observer callback\n   */\n  createUpDownSumObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): UpDownSumObserver {\n    return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop batch observer.\n   * @param name the name of the metric.\n   * @param callback the batch observer callback\n   */\n  createBatchObserver(\n    _callback: (batchObserverResult: BatchObserverResult) => void\n  ): NoopBatchObserver {\n    return NOOP_BATCH_OBSERVER;\n  }\n}\n\nexport class NoopMetric<T> implements UnboundMetric<T> {\n  private readonly _instrument: T;\n\n  constructor(instrument: T) {\n    this._instrument = instrument;\n  }\n\n  /**\n   * Returns a Bound Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Bound Instrument instead of\n   * always calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  bind(_labels: Labels): T {\n    return this._instrument;\n  }\n\n  /**\n   * Removes the Binding from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  unbind(_labels: Labels): void {\n    return;\n  }\n\n  /**\n   * Clears all timeseries from the Metric.\n   */\n  clear(): void {\n    return;\n  }\n}\n\nexport class NoopCounterMetric\n  extends NoopMetric<BoundCounter>\n  implements Counter {\n  add(value: number, labels: Labels): void {\n    this.bind(labels).add(value);\n  }\n}\n\nexport class NoopValueRecorderMetric\n  extends NoopMetric<BoundValueRecorder>\n  implements ValueRecorder {\n  record(value: number, labels: Labels): void {\n    this.bind(labels).record(value);\n  }\n}\n\nexport class NoopBaseObserverMetric\n  extends NoopMetric<BoundBaseObserver>\n  implements BaseObserver {\n  observation(): Observation {\n    return {\n      observer: this as BaseObserver,\n      value: 0,\n    };\n  }\n}\n\nexport class NoopBatchObserver {}\n\nexport class NoopBoundCounter implements BoundCounter {\n  add(_value: number): void {\n    return;\n  }\n}\n\nexport class NoopBoundValueRecorder implements BoundValueRecorder {\n  record(_value: number, _baggage?: unknown, _spanContext?: unknown): void {\n    return;\n  }\n}\n\nexport class NoopBoundBaseObserver implements BoundBaseObserver {\n  update(_value: number): void {}\n}\n\nexport const NOOP_METER = new NoopMeter();\nexport const NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\n\nexport const NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport const NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(\n  NOOP_BOUND_VALUE_RECORDER\n);\n\nexport const NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport const NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_BATCH_OBSERVER = new NoopBatchObserver();\n"]}