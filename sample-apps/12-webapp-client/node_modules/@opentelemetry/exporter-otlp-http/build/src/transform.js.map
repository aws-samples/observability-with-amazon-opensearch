{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../src/transform.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SpanAttributes,\n  Link,\n  SpanKind,\n  SpanStatus,\n  TraceState,\n} from '@opentelemetry/api';\nimport * as core from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { OTLPExporterBase } from './OTLPExporterBase';\nimport {\n  OTLP_SPAN_KIND_MAPPING,\n  opentelemetryProto,\n  OTLPExporterConfigBase,\n} from './types';\n\nconst MAX_INTEGER_VALUE = 2147483647;\nconst MIN_INTEGER_VALUE = -2147483648;\n\n/**\n * Converts attributes to KeyValue array\n * @param attributes\n */\nexport function toCollectorAttributes(\n  attributes: SpanAttributes\n): opentelemetryProto.common.v1.KeyValue[] {\n  return Object.keys(attributes).map(key => {\n    return toCollectorAttributeKeyValue(key, attributes[key]);\n  });\n}\n\n/**\n * Converts array of unknown value to ArrayValue\n * @param values\n */\nexport function toCollectorArrayValue(\n  values: unknown[]\n): opentelemetryProto.common.v1.ArrayValue {\n  return {\n    values: values.map(value => toCollectorAnyValue(value)),\n  };\n}\n\n/**\n * Converts attributes to KeyValueList\n * @param attributes\n */\nexport function toCollectorKeyValueList(\n  attributes: SpanAttributes\n): opentelemetryProto.common.v1.KeyValueList {\n  return {\n    values: toCollectorAttributes(attributes),\n  };\n}\n\n/**\n * Converts key and unknown value to KeyValue\n * @param value event value\n */\nexport function toCollectorAttributeKeyValue(\n  key: string,\n  value: unknown\n): opentelemetryProto.common.v1.KeyValue {\n  const anyValue = toCollectorAnyValue(value);\n  return {\n    key,\n    value: anyValue,\n  };\n}\n\n/**\n * Converts unknown value to AnyValue\n * @param value\n */\nexport function toCollectorAnyValue(\n  value: unknown\n): opentelemetryProto.common.v1.AnyValue {\n  const anyValue: opentelemetryProto.common.v1.AnyValue = {};\n  if (typeof value === 'string') {\n    anyValue.stringValue = value;\n  } else if (typeof value === 'boolean') {\n    anyValue.boolValue = value;\n  } else if (\n    typeof value === 'number' &&\n    value <= MAX_INTEGER_VALUE &&\n    value >= MIN_INTEGER_VALUE &&\n    Number.isInteger(value)\n  ) {\n    anyValue.intValue = value;\n  } else if (typeof value === 'number') {\n    anyValue.doubleValue = value;\n  } else if (Array.isArray(value)) {\n    anyValue.arrayValue = toCollectorArrayValue(value);\n  } else if (value) {\n    anyValue.kvlistValue = toCollectorKeyValueList(value as SpanAttributes);\n  }\n  return anyValue;\n}\n\n/**\n *\n * Converts events\n * @param events array of events\n */\nexport function toCollectorEvents(\n  timedEvents: TimedEvent[]\n): opentelemetryProto.trace.v1.Span.Event[] {\n  return timedEvents.map(timedEvent => {\n    const timeUnixNano = core.hrTimeToNanoseconds(timedEvent.time);\n    const name = timedEvent.name;\n    const attributes = toCollectorAttributes(timedEvent.attributes || {});\n    const droppedAttributesCount = 0;\n\n    const protoEvent: opentelemetryProto.trace.v1.Span.Event = {\n      timeUnixNano,\n      name,\n      attributes,\n      droppedAttributesCount,\n    };\n\n    return protoEvent;\n  });\n}\n\n/**\n * Converts links\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorLinks(\n  span: ReadableSpan,\n  useHex?: boolean\n): opentelemetryProto.trace.v1.Span.Link[] {\n  return span.links.map((link: Link) => {\n    const protoLink: opentelemetryProto.trace.v1.Span.Link = {\n      traceId: useHex\n        ? link.context.traceId\n        : core.hexToBase64(link.context.traceId),\n      spanId: useHex\n        ? link.context.spanId\n        : core.hexToBase64(link.context.spanId),\n      attributes: toCollectorAttributes(link.attributes || {}),\n      droppedAttributesCount: 0,\n    };\n    return protoLink;\n  });\n}\n\n/**\n * Converts span\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nexport function toCollectorSpan(\n  span: ReadableSpan,\n  useHex?: boolean\n): opentelemetryProto.trace.v1.Span {\n  return {\n    traceId: useHex\n      ? span.spanContext().traceId\n      : core.hexToBase64(span.spanContext().traceId),\n    spanId: useHex\n      ? span.spanContext().spanId\n      : core.hexToBase64(span.spanContext().spanId),\n    parentSpanId: span.parentSpanId\n      ? useHex\n        ? span.parentSpanId\n        : core.hexToBase64(span.parentSpanId)\n      : undefined,\n    traceState: toCollectorTraceState(span.spanContext().traceState),\n    name: span.name,\n    kind: toCollectorKind(span.kind),\n    startTimeUnixNano: core.hrTimeToNanoseconds(span.startTime),\n    endTimeUnixNano: core.hrTimeToNanoseconds(span.endTime),\n    attributes: toCollectorAttributes(span.attributes),\n    droppedAttributesCount: 0,\n    events: toCollectorEvents(span.events),\n    droppedEventsCount: 0,\n    status: toCollectorStatus(span.status),\n    links: toCollectorLinks(span, useHex),\n    droppedLinksCount: 0,\n  };\n}\n\n/**\n * Converts status\n * @param status\n */\nexport function toCollectorStatus(\n  status: SpanStatus\n): opentelemetryProto.trace.v1.SpanStatus {\n  const spanStatus: opentelemetryProto.trace.v1.SpanStatus = {\n    code: status.code,\n  };\n  if (typeof status.message !== 'undefined') {\n    spanStatus.message = status.message;\n  }\n  return spanStatus;\n}\n\n/**\n * Converts resource\n * @param resource\n * @param additionalAttributes\n */\nexport function toCollectorResource(\n  resource?: Resource,\n  additionalAttributes: { [key: string]: unknown } = {}\n): opentelemetryProto.resource.v1.Resource {\n  const attr = Object.assign(\n    {},\n    additionalAttributes,\n    resource ? resource.attributes : {}\n  );\n  const resourceProto: opentelemetryProto.resource.v1.Resource = {\n    attributes: toCollectorAttributes(attr),\n    droppedAttributesCount: 0,\n  };\n\n  return resourceProto;\n}\n\n/**\n * Converts span kind\n * @param kind\n */\nexport function toCollectorKind(\n  kind: SpanKind\n): opentelemetryProto.trace.v1.Span.SpanKind {\n  const collectorKind = OTLP_SPAN_KIND_MAPPING[kind];\n  return typeof collectorKind === 'number'\n    ? collectorKind\n    : opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_UNSPECIFIED;\n}\n\n/**\n * Converts traceState\n * @param traceState\n */\nexport function toCollectorTraceState(\n  traceState?: TraceState\n): opentelemetryProto.trace.v1.Span.TraceState | undefined {\n  if (!traceState) return undefined;\n  return traceState.serialize();\n}\n\n/**\n * Prepares trace service request to be sent to collector\n * @param spans spans\n * @param collectorExporterBase\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nexport function toOTLPExportTraceServiceRequest<\n  T extends OTLPExporterConfigBase\n>(\n  spans: ReadableSpan[],\n  collectorTraceExporterBase: OTLPExporterBase<\n    T,\n    ReadableSpan,\n    opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest\n  >,\n  useHex?: boolean\n): opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest {\n  const groupedSpans: Map<\n    Resource,\n    Map<core.InstrumentationLibrary, ReadableSpan[]>\n  > = groupSpansByResourceAndLibrary(spans);\n\n  const additionalAttributes = Object.assign(\n    {},\n    collectorTraceExporterBase.attributes\n  );\n\n  return {\n    resourceSpans: toCollectorResourceSpans(\n      groupedSpans,\n      additionalAttributes,\n      useHex\n    ),\n  };\n}\n\n/**\n * Takes an array of spans and groups them by resource and instrumentation\n * library\n * @param spans spans\n */\nexport function groupSpansByResourceAndLibrary(\n  spans: ReadableSpan[]\n): Map<Resource, Map<core.InstrumentationLibrary, ReadableSpan[]>> {\n  return spans.reduce((spanMap, span) => {\n    //group by resource\n    let resourceSpans = spanMap.get(span.resource);\n    if (!resourceSpans) {\n      resourceSpans = new Map<core.InstrumentationLibrary, ReadableSpan[]>();\n      spanMap.set(span.resource, resourceSpans);\n    }\n    //group by instrumentation library\n    let libSpans = resourceSpans.get(span.instrumentationLibrary);\n    if (!libSpans) {\n      libSpans = new Array<ReadableSpan>();\n      resourceSpans.set(span.instrumentationLibrary, libSpans);\n    }\n    libSpans.push(span);\n    return spanMap;\n  }, new Map<Resource, Map<core.InstrumentationLibrary, ReadableSpan[]>>());\n}\n\n/**\n * Convert to InstrumentationLibrarySpans\n * @param instrumentationLibrary\n * @param spans\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorInstrumentationLibrarySpans(\n  instrumentationLibrary: core.InstrumentationLibrary,\n  spans: ReadableSpan[],\n  useHex?: boolean\n): opentelemetryProto.trace.v1.InstrumentationLibrarySpans {\n  return {\n    spans: spans.map(span => toCollectorSpan(span, useHex)),\n    instrumentationLibrary,\n  };\n}\n\n/**\n * Returns a list of resource spans which will be exported to the collector\n * @param groupedSpans\n * @param baseAttributes\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorResourceSpans(\n  groupedSpans: Map<Resource, Map<core.InstrumentationLibrary, ReadableSpan[]>>,\n  baseAttributes: SpanAttributes,\n  useHex?: boolean\n): opentelemetryProto.trace.v1.ResourceSpans[] {\n  return Array.from(groupedSpans, ([resource, libSpans]) => {\n    return {\n      resource: toCollectorResource(resource, baseAttributes),\n      instrumentationLibrarySpans: Array.from(\n        libSpans,\n        ([instrumentationLibrary, spans]) =>\n          toCollectorInstrumentationLibrarySpans(\n            instrumentationLibrary,\n            spans,\n            useHex\n          )\n      ),\n    };\n  });\n}\n"]}