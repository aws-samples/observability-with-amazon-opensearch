{"version":3,"file":"OTLPMetricExporter.js","sourceRoot":"","sources":["../../../../src/platform/node/OTLPMetricExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,iEAA8D;AAC9D,6DAA0E;AAC1E,8CAA2D;AAC3D,qCAAiE;AAEjE,MAAM,+BAA+B,GAAG,aAAa,CAAC;AACtD,MAAM,qBAAqB,GAAC,yBAAyB,+BAA+B,EAAE,CAAC;AAEvF;;GAEG;AACH,MAAa,kBACX,SAAQ,2CAGP;IAKD,YAAY,SAAqC,EAAE;QACjD,KAAK,CAAC,MAAM,CAAC,CAAC;QAJhB,+BAA+B;QACZ,eAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC;QAI7D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAC1B,IAAI,CAAC,OAAO,EACZ,mBAAY,CAAC,uBAAuB,CAClC,aAAM,EAAE,CAAC,kCAAkC,CAC5C,CACF,CAAC;IACJ,CAAC;IAED,OAAO,CACL,OAAuB;QAEvB,OAAO,mDAAgC,CACrC,OAAO,EACP,IAAI,CAAC,UAAU,EACf,IAAI,CACL,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,MAAkC;QAC9C,OAAO,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;YACnC,CAAC,CAAC,MAAM,CAAC,GAAG;YACZ,CAAC,CAAC,aAAM,EAAE,CAAC,mCAAmC,CAAC,MAAM,GAAG,CAAC;gBACzD,CAAC,CAAC,aAAM,EAAE,CAAC,mCAAmC;gBAC9C,CAAC,CAAC,aAAM,EAAE,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC;oBACjD,CAAC,CAAC,0CAAmC,CAAC,aAAM,EAAE,CAAC,2BAA2B,EAAE,+BAA+B,CAAC;oBAC5G,CAAC,CAAC,qBAAqB,CAAC;IAC5B,CAAC;CACF;AAtCD,gDAsCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricRecord, MetricExporter } from '@opentelemetry/sdk-metrics-base';\nimport * as otlpTypes from '../../types';\nimport { OTLPExporterNodeConfigBase } from './types';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { toOTLPExportMetricServiceRequest } from '../../transformMetrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrlIfNotPresent } from '../../util';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/metrics';\nconst DEFAULT_COLLECTOR_URL=`http://localhost:55681${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Metric Exporter for Node\n */\nexport class OTLPMetricExporter\n  extends OTLPExporterNodeBase<\n    MetricRecord,\n    otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest\n  >\n  implements MetricExporter {\n  // Converts time to nanoseconds\n  protected readonly _startTime = new Date().getTime() * 1000000;\n\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config);\n    this.headers = Object.assign(\n      this.headers,\n      baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      )\n    );\n  }\n\n  convert(\n    metrics: MetricRecord[]\n  ): otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest {\n    return toOTLPExportMetricServiceRequest(\n      metrics,\n      this._startTime,\n      this\n    );\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrlIfNotPresent(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n"]}