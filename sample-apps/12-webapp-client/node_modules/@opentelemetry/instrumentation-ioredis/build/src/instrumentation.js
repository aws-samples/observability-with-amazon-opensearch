"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IORedisInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const instrumentation_2 = require("@opentelemetry/instrumentation");
const utils_1 = require("./utils");
const version_1 = require("./version");
const DEFAULT_CONFIG = {
    requireParentSpan: true,
};
class IORedisInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor(_config = {}) {
        super('@opentelemetry/instrumentation-ioredis', version_1.VERSION, Object.assign({}, DEFAULT_CONFIG, _config));
        this.traceSendCommand = (original, moduleVersion) => {
            const instrumentation = this;
            return function (cmd) {
                if (arguments.length < 1 || typeof cmd !== 'object') {
                    return original.apply(this, arguments);
                }
                const config = instrumentation.getConfig();
                const dbStatementSerializer = (config === null || config === void 0 ? void 0 : config.dbStatementSerializer) || utils_1.defaultDbStatementSerializer;
                const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;
                if ((config === null || config === void 0 ? void 0 : config.requireParentSpan) === true && hasNoParentSpan) {
                    return original.apply(this, arguments);
                }
                const span = instrumentation.tracer.startSpan(cmd.name, {
                    kind: api_1.SpanKind.CLIENT,
                    attributes: {
                        [semantic_conventions_1.SemanticAttributes.DB_SYSTEM]: semantic_conventions_1.DbSystemValues.REDIS,
                        [semantic_conventions_1.SemanticAttributes.DB_STATEMENT]: dbStatementSerializer(cmd.name, cmd.args),
                    },
                });
                if (config === null || config === void 0 ? void 0 : config.requestHook) {
                    instrumentation_2.safeExecuteInTheMiddle(() => config === null || config === void 0 ? void 0 : config.requestHook(span, {
                        moduleVersion,
                        cmdName: cmd.name,
                        cmdArgs: cmd.args,
                    }), e => {
                        if (e) {
                            api_1.diag.error('ioredis instrumentation: request hook failed', e);
                        }
                    }, true);
                }
                const { host, port } = this.options;
                span.setAttributes({
                    [semantic_conventions_1.SemanticAttributes.NET_PEER_NAME]: host,
                    [semantic_conventions_1.SemanticAttributes.NET_PEER_PORT]: port,
                    [semantic_conventions_1.SemanticAttributes.DB_CONNECTION_STRING]: `redis://${host}:${port}`,
                });
                try {
                    const result = original.apply(this, arguments);
                    const origResolve = cmd.resolve;
                    /* eslint-disable @typescript-eslint/no-explicit-any */
                    cmd.resolve = function (result) {
                        instrumentation_2.safeExecuteInTheMiddle(() => { var _a; return (_a = config === null || config === void 0 ? void 0 : config.responseHook) === null || _a === void 0 ? void 0 : _a.call(config, span, cmd.name, cmd.args, result); }, e => {
                            if (e) {
                                api_1.diag.error('ioredis instrumentation: response hook failed', e);
                            }
                        }, true);
                        utils_1.endSpan(span, null);
                        origResolve(result);
                    };
                    const origReject = cmd.reject;
                    cmd.reject = function (err) {
                        utils_1.endSpan(span, err);
                        origReject(err);
                    };
                    return result;
                }
                catch (error) {
                    utils_1.endSpan(span, error);
                    throw error;
                }
            };
        };
        this.traceConnection = (original) => {
            const instrumentation = this;
            return function () {
                const span = instrumentation.tracer.startSpan('connect', {
                    kind: api_1.SpanKind.CLIENT,
                    attributes: {
                        [semantic_conventions_1.SemanticAttributes.DB_SYSTEM]: semantic_conventions_1.DbSystemValues.REDIS,
                        [semantic_conventions_1.SemanticAttributes.DB_STATEMENT]: 'connect',
                    },
                });
                const { host, port } = this.options;
                span.setAttributes({
                    [semantic_conventions_1.SemanticAttributes.NET_PEER_NAME]: host,
                    [semantic_conventions_1.SemanticAttributes.NET_PEER_PORT]: port,
                    [semantic_conventions_1.SemanticAttributes.DB_CONNECTION_STRING]: `redis://${host}:${port}`,
                });
                try {
                    const client = original.apply(this, arguments);
                    utils_1.endSpan(span, null);
                    return client;
                }
                catch (error) {
                    utils_1.endSpan(span, error);
                    throw error;
                }
            };
        };
    }
    init() {
        return [
            new instrumentation_1.InstrumentationNodeModuleDefinition('ioredis', ['>1 <5'], (moduleExports, moduleVersion) => {
                api_1.diag.debug('Applying patch for ioredis');
                if (instrumentation_1.isWrapped(moduleExports.prototype.sendCommand)) {
                    this._unwrap(moduleExports.prototype, 'sendCommand');
                }
                this._wrap(moduleExports.prototype, 'sendCommand', this._patchSendCommand(moduleVersion));
                if (instrumentation_1.isWrapped(moduleExports.prototype.connect)) {
                    this._unwrap(moduleExports.prototype, 'connect');
                }
                this._wrap(moduleExports.prototype, 'connect', this._patchConnection());
                return moduleExports;
            }, moduleExports => {
                if (moduleExports === undefined)
                    return;
                api_1.diag.debug('Removing patch for ioredis');
                this._unwrap(moduleExports.prototype, 'sendCommand');
                this._unwrap(moduleExports.prototype, 'connect');
            }),
        ];
    }
    /**
     * Patch send command internal to trace requests
     */
    _patchSendCommand(moduleVersion) {
        return (original) => {
            return this.traceSendCommand(original, moduleVersion);
        };
    }
    _patchConnection() {
        return (original) => {
            return this.traceConnection(original);
        };
    }
}
exports.IORedisInstrumentation = IORedisInstrumentation;
//# sourceMappingURL=instrumentation.js.map