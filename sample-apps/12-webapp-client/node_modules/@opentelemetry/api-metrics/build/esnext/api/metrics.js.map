{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../../../src/api/metrics.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAIH,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAC3D,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,UAAU,EACV,OAAO,GACR,MAAM,gBAAgB,CAAC;AAExB;;GAEG;AACH,MAAM,OAAO,UAAU;IAGrB,+FAA+F;IAC/F,gBAAuB,CAAC;IAExB,oDAAoD;IAC7C,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACnC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,sBAAsB,CAAC,QAAuB;QACnD,IAAI,OAAO,CAAC,sBAAsB,CAAC,EAAE;YACnC,6CAA6C;YAC7C,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAChC;QAED,OAAO,CAAC,sBAAsB,CAAC,GAAG,UAAU,CAC1C,mCAAmC,EACnC,QAAQ,EACR,mBAAmB,CACpB,CAAC;QAEF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,gBAAgB;;QACrB,OAAO,CACL,MAAA,MAAA,OAAO,CAAC,sBAAsB,CAAC,+CAA/B,OAAO,EAA2B,mCAAmC,CAAC,mCACtE,mBAAmB,CACpB,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,IAAY,EAAE,OAAgB,EAAE,OAAsB;QACpE,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,uCAAuC;IAChC,OAAO;QACZ,OAAO,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACzC,CAAC;CACF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../types/Meter';\nimport { MeterProvider } from '../types/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_METRICS_API_KEY,\n  makeGetter,\n  _global,\n} from './global-utils';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): MeterProvider {\n    if (_global[GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n\n    _global[GLOBAL_METRICS_API_KEY] = makeGetter(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_METER_PROVIDER\n    );\n\n    return provider;\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return (\n      _global[GLOBAL_METRICS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      NOOP_METER_PROVIDER\n    );\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(name: string, version?: string, options?: MeterOptions): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    delete _global[GLOBAL_METRICS_API_KEY];\n  }\n}\n"]}