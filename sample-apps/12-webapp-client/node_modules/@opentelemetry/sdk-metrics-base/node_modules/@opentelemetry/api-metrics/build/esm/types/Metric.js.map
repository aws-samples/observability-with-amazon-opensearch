{"version":3,"file":"Metric.js","sourceRoot":"","sources":["../../../src/types/Metric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AA4DH,gEAAgE;AAChE,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,uCAAG,CAAA;IACH,6CAAM,CAAA;AACR,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAED,8BAA8B;AAC9B,MAAM,CAAN,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,iIAAmC,CAAA;IACnC,qHAA6B,CAAA;IAC7B,+HAAkC,CAAA;AACpC,CAAC,EAJW,sBAAsB,KAAtB,sBAAsB,QAIjC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BoundBaseObserver,\n  BoundCounter,\n  BoundValueRecorder,\n} from './BoundInstrument';\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /** The name of the component that reports the Metric. */\n  component?: string;\n\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default '1'\n   */\n  unit?: string;\n\n  /** The map of constant labels for the Metric. */\n  constantLabels?: Map<string, string>;\n\n  /**\n   * Indicates the metric is a verbose metric that is disabled by default\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n\n  /**\n   * Boundaries optional for histogram\n   */\n  boundaries?: number[];\n\n  /**\n   * Aggregation Temporality of metric\n   */\n  aggregationTemporality?: AggregationTemporality;\n}\n\nexport interface BatchObserverOptions {\n  /**\n   * Indicates how long the batch metric should wait to update before cancel\n   */\n  maxTimeoutUpdateMS?: number;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/** The kind of aggregator. */\nexport enum AggregationTemporality {\n  AGGREGATION_TEMPORALITY_UNSPECIFIED,\n  AGGREGATION_TEMPORALITY_DELTA,\n  AGGREGATION_TEMPORALITY_CUMULATIVE,\n}\n\n/**\n * Metric represents a base class for different types of metric\n * pre aggregations.\n */\nexport interface Metric {\n  /**\n   * Clears all bound instruments from the Metric.\n   */\n  clear(): void;\n}\n\n/**\n * UnboundMetric represents a base class for different types of metric\n * pre aggregations without label value bound yet.\n */\nexport interface UnboundMetric<T> extends Metric {\n  /**\n   * Returns a Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Instrument instead of always\n   * calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  bind(labels: Labels): T;\n\n  /**\n   * Removes the Instrument from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  unbind(labels: Labels): void;\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter extends UnboundMetric<BoundCounter> {\n  /**\n   * Adds the given value to the current value. Values cannot be negative.\n   */\n  add(value: number, labels?: Labels): void;\n}\n\nexport interface UpDownCounter extends UnboundMetric<BoundCounter> {\n  /**\n   * Adds the given value to the current value. Values can be negative.\n   */\n  add(value: number, labels?: Labels): void;\n}\n\nexport interface ValueRecorder extends UnboundMetric<BoundValueRecorder> {\n  /**\n   * Records the given value to this value recorder.\n   */\n  record(value: number, labels?: Labels): void;\n}\n\n/** Base interface for the Observer metrics. */\nexport interface BaseObserver extends UnboundMetric<BoundBaseObserver> {\n  observation: (\n    value: number\n  ) => {\n    value: number;\n    observer: BaseObserver;\n  };\n}\n\n/** Base interface for the ValueObserver metrics. */\nexport type ValueObserver = BaseObserver;\n\n/** Base interface for the UpDownSumObserver metrics. */\nexport type UpDownSumObserver = BaseObserver;\n\n/** Base interface for the SumObserver metrics. */\nexport type SumObserver = BaseObserver;\n\n/**\n * key-value pairs passed by the user.\n */\nexport type Labels = { [key: string]: string };\n"]}