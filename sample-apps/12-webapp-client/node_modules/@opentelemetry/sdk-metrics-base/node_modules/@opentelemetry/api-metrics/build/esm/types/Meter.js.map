{"version":3,"file":"Meter.js","sourceRoot":"","sources":["../../../src/types/Meter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchObserverResult } from './BatchObserverResult';\nimport {\n  MetricOptions,\n  Counter,\n  ValueRecorder,\n  ValueObserver,\n  BatchObserverOptions,\n  UpDownCounter,\n  SumObserver,\n  UpDownSumObserver,\n} from './Metric';\nimport { ObserverResult } from './ObserverResult';\n\n/**\n * An interface to allow the recording metrics.\n *\n * {@link Metric}s are used for recording pre-defined aggregation (`Counter`),\n * or raw values (`ValueRecorder`) in which the aggregation and labels\n * for the exported metric are deferred.\n */\nexport interface Meter {\n  /**\n   * Creates and returns a new `ValueRecorder`.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createValueRecorder(name: string, options?: MetricOptions): ValueRecorder;\n\n  /**\n   * Creates a new `Counter` metric. Generally, this kind of metric when the\n   * value is a quantity, the sum is of primary interest, and the event count\n   * and value distribution are not of primary interest.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter;\n\n  /**\n   * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous\n   * instrument and very similar to Counter except that Add(increment)\n   * supports negative increments. It is generally useful for capturing changes\n   * in an amount of resources used, or any quantity that rises and falls\n   * during a request.\n   * Example uses for UpDownCounter:\n   * <ol>\n   *   <li> count the number of active requests. </li>\n   *   <li> count memory in use by instrumenting new and delete. </li>\n   *   <li> count queue size by instrumenting enqueue and dequeue. </li>\n   *   <li> count semaphore up and down operations. </li>\n   * </ol>\n   *\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter;\n\n  /**\n   * Creates a new `ValueObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the observer callback\n   */\n  createValueObserver(\n    name: string,\n    options?: MetricOptions,\n    callback?: (observerResult: ObserverResult) => void\n  ): ValueObserver;\n\n  /**\n   * Creates a new `SumObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the observer callback\n   */\n  createSumObserver(\n    name: string,\n    options?: MetricOptions,\n    callback?: (observerResult: ObserverResult) => void\n  ): SumObserver;\n\n  /**\n   * Creates a new `UpDownSumObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the observer callback\n   */\n  createUpDownSumObserver(\n    name: string,\n    options?: MetricOptions,\n    callback?: (observerResult: ObserverResult) => void\n  ): UpDownSumObserver;\n\n  /**\n   * Creates a new `BatchObserver`, can be used to update many metrics\n   * at the same time and when operations needs to be async\n   * @param callback the batch observer callback\n   * @param [options] the batch observer options.\n   */\n  createBatchObserver(\n    callback: (batchObserverResult: BatchObserverResult) => void,\n    options?: BatchObserverOptions\n  ): void;\n}\n"]}