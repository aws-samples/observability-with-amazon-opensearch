{"version":3,"file":"MeterProvider.js","sourceRoot":"","sources":["../../src/MeterProvider.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,wDAAoD;AACpD,wBAA0B;AAC1B,mCAAsD;AACtD,8DAA8D;AAC9D,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEtC;;GAEG;AACH,MAAa,aAAa;IAOxB,YAAY,SAAsB,EAAE;QALnB,YAAO,GAAuB,IAAI,GAAG,EAAE,CAAC;QACjD,yBAAoB,GAAkB,OAAO,CAAC,OAAO,EAAE,CAAC;QACxD,gBAAW,GAAG,KAAK,CAAC;QAI1B,MAAM,YAAY,GAAG,KAAK,CAAC,EAAE,EAAE,sBAAc,EAAE,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,IAAI,oBAAQ,CAAC,KAAK,EAAE,CAAC;QAC1D,IAAI,CAAC,QAAQ,GAAG,oBAAQ,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,EAAE;YAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,IAAY,EAAE,OAAgB,EAAE,MAAoB;QAC3D,MAAM,GAAG,GAAG,GAAG,IAAI,IAAI,OAAO,IAAI,EAAE,EAAE,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CACd,GAAG,EACH,IAAI,QAAK,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CACrD,CAAC;SACH;QAED,oEAAoE;QACpE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IAChC,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,IAAI,CAAC,oBAAoB,CAAC;SAClC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,CAAC,oBAAoB,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1D,OAAO,CAAC,OAAO,EAAE;iBACd,IAAI,CAAC,GAAG,EAAE;gBACT,OAAO,OAAO,CAAC,GAAG,CAChB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAC3D,CAAC;YACJ,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;oBACzB,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACzC;gBACD,OAAO;YACT,CAAC,CAAC;iBACD,IAAI,CAAC,OAAO,CAAC;iBACb,KAAK,CAAC,CAAC,CAAC,EAAE;gBACT,MAAM,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;CACF;AA5DD,sCA4DC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG, MeterConfig } from './types';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst merge = require('lodash.merge');\n\n/**\n * This class represents a meter provider which platform libraries can extend\n */\nexport class MeterProvider implements api.MeterProvider {\n  private readonly _config: MeterConfig;\n  private readonly _meters: Map<string, Meter> = new Map();\n  private _shuttingDownPromise: Promise<void> = Promise.resolve();\n  private _isShutdown = false;\n  readonly resource: Resource;\n\n  constructor(config: MeterConfig = {}) {\n    const mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this.resource = mergedConfig.resource || Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n  }\n\n  /**\n   * Returns a Meter, creating one if one with the given name and version is not already created\n   *\n   * @returns Meter A Meter with the given name and version\n   */\n  getMeter(name: string, version?: string, config?: MeterConfig): Meter {\n    const key = `${name}@${version || ''}`;\n    if (!this._meters.has(key)) {\n      this._meters.set(\n        key,\n        new Meter({ name, version }, config || this._config)\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._meters.get(key)!;\n  }\n\n  shutdown(): Promise<void> {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n\n    this._shuttingDownPromise = new Promise((resolve, reject) => {\n      Promise.resolve()\n        .then(() => {\n          return Promise.all(\n            Array.from(this._meters, ([_, meter]) => meter.shutdown())\n          );\n        })\n        .then(() => {\n          if (this._config.exporter) {\n            return this._config.exporter.shutdown();\n          }\n          return;\n        })\n        .then(resolve)\n        .catch(e => {\n          reject(e);\n        });\n    });\n    return this._shuttingDownPromise;\n  }\n}\n"]}