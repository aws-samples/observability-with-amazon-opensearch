{"version":3,"file":"Meter.js","sourceRoot":"","sources":["../../src/Meter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BatchObserver } from './BatchObserver';\nimport { BaseBoundInstrument } from './BoundInstrument';\nimport { CounterMetric } from './CounterMetric';\nimport { PushController } from './export/Controller';\nimport { NoopExporter } from './export/NoopExporter';\nimport { Processor, UngroupedProcessor } from './export/Processor';\nimport { Metric } from './Metric';\nimport { SumObserverMetric } from './SumObserverMetric';\nimport { DEFAULT_CONFIG, DEFAULT_METRIC_OPTIONS, MeterConfig } from './types';\nimport { UpDownCounterMetric } from './UpDownCounterMetric';\nimport { UpDownSumObserverMetric } from './UpDownSumObserverMetric';\nimport { ValueObserverMetric } from './ValueObserverMetric';\nimport { ValueRecorderMetric } from './ValueRecorderMetric';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst merge = require('lodash.merge');\n\n/**\n * Meter is an implementation of the {@link Meter} interface.\n */\nexport class Meter implements api.Meter {\n  private readonly _batchObservers: BatchObserver[] = [];\n  private readonly _metrics = new Map<string, Metric<BaseBoundInstrument>>();\n  private readonly _processor: Processor;\n  private readonly _resource: Resource;\n  private readonly _instrumentationLibrary: InstrumentationLibrary;\n  private readonly _controller: PushController;\n  private _isShutdown = false;\n  private _shuttingDownPromise: Promise<void> = Promise.resolve();\n\n  /**\n   * Constructs a new Meter instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: MeterConfig = {}\n  ) {\n    const mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this._processor = mergedConfig.processor ?? new UngroupedProcessor();\n    this._resource =\n      mergedConfig.resource || Resource.empty();\n    this._instrumentationLibrary = instrumentationLibrary;\n    // start the push controller\n    const exporter = mergedConfig.exporter || new NoopExporter();\n    const interval = mergedConfig.interval;\n    this._controller = new PushController(this, exporter, interval);\n  }\n\n  /**\n   * Creates and returns a new {@link ValueRecorder}.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createValueRecorder(\n    name: string,\n    options?: api.MetricOptions\n  ): api.ValueRecorder {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_VALUE_RECORDER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n\n    const valueRecorder = new ValueRecorderMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary\n    );\n    this._registerMetric(name, valueRecorder);\n    return valueRecorder;\n  }\n\n  /**\n   * Creates a new counter metric. Generally, this kind of metric when the\n   * value is a quantity, the sum is of primary interest, and the event count\n   * and value distribution are not of primary interest.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createCounter(name: string, options?: api.MetricOptions): api.Counter {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_COUNTER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n    const counter = new CounterMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary\n    );\n    this._registerMetric(name, counter);\n    return counter;\n  }\n\n  /**\n   * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous\n   * instrument and very similar to Counter except that Add(increment)\n   * supports negative increments. It is generally useful for capturing changes\n   * in an amount of resources used, or any quantity that rises and falls\n   * during a request.\n   *\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createUpDownCounter(\n    name: string,\n    options?: api.MetricOptions\n  ): api.UpDownCounter {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_COUNTER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n    const upDownCounter = new UpDownCounterMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary\n    );\n    this._registerMetric(name, upDownCounter);\n    return upDownCounter;\n  }\n\n  /**\n   * Creates a new `ValueObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  createValueObserver(\n    name: string,\n    options: api.MetricOptions = {},\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ): api.ValueObserver {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_VALUE_OBSERVER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n    const valueObserver = new ValueObserverMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary,\n      callback\n    );\n    this._registerMetric(name, valueObserver);\n    return valueObserver;\n  }\n\n  createSumObserver(\n    name: string,\n    options: api.MetricOptions = {},\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ): api.SumObserver {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_SUM_OBSERVER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n    const sumObserver = new SumObserverMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary,\n      callback\n    );\n    this._registerMetric(name, sumObserver);\n    return sumObserver;\n  }\n\n  /**\n   * Creates a new `UpDownSumObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  createUpDownSumObserver(\n    name: string,\n    options: api.MetricOptions = {},\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ): api.UpDownSumObserver {\n    if (!this._isValidName(name)) {\n      diag.warn(\n        `Invalid metric name ${name}. Defaulting to noop metric implementation.`\n      );\n      return api.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n    }\n    const opt: api.MetricOptions = {\n      ...DEFAULT_METRIC_OPTIONS,\n      ...options,\n    };\n    const upDownSumObserver = new UpDownSumObserverMetric(\n      name,\n      opt,\n      this._processor,\n      this._resource,\n      this._instrumentationLibrary,\n      callback\n    );\n    this._registerMetric(name, upDownSumObserver);\n    return upDownSumObserver;\n  }\n\n  /**\n   * Creates a new batch observer.\n   * @param callback the batch observer callback\n   * @param [options] the batch options.\n   */\n  createBatchObserver(\n    callback: (observerResult: api.BatchObserverResult) => void,\n    options: api.BatchObserverOptions = {}\n  ): BatchObserver {\n    const opt: api.BatchObserverOptions = {\n      ...options,\n    };\n    const batchObserver = new BatchObserver(opt, callback);\n    this._batchObservers.push(batchObserver);\n    return batchObserver;\n  }\n\n  /**\n   * Collects all the metrics created with this `Meter` for export.\n   *\n   * Utilizes the processor to create checkpoints of the current values in\n   * each aggregator belonging to the metrics that were created with this\n   * meter instance.\n   */\n  async collect(): Promise<void> {\n    // call batch observers first\n    const observations = this._batchObservers.map(observer => {\n      return observer.collect();\n    });\n    await Promise.all(observations);\n\n    // after this all remaining metrics can be run\n    const metricsRecords = Array.from(this._metrics.values()).map(metric => {\n      return metric.getMetricRecord();\n    });\n\n    await Promise.all(metricsRecords).then(records => {\n      records.forEach(metrics => {\n        metrics.forEach(metric => this._processor.process(metric));\n      });\n    });\n  }\n\n  getProcessor(): Processor {\n    return this._processor;\n  }\n\n  shutdown(): Promise<void> {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n\n    this._shuttingDownPromise = new Promise((resolve, reject) => {\n      Promise.resolve()\n        .then(() => {\n          return this._controller.shutdown();\n        })\n        .then(resolve)\n        .catch(e => {\n          reject(e);\n        });\n    });\n    return this._shuttingDownPromise;\n  }\n\n  /**\n   * Registers metric to register.\n   * @param name The name of the metric.\n   * @param metric The metric to register.\n   */\n  private _registerMetric<T extends BaseBoundInstrument>(\n    name: string,\n    metric: Metric<T>\n  ): void {\n    if (this._metrics.has(name)) {\n      diag.error(`A metric with the name ${name} has already been registered.`);\n      return;\n    }\n    this._metrics.set(name, metric);\n  }\n\n  /**\n   * Ensure a metric name conforms to the following rules:\n   *\n   * 1. They are non-empty strings\n   *\n   * 2. The first character must be non-numeric, non-space, non-punctuation\n   *\n   * 3. Subsequent characters must be belong to the alphanumeric characters,\n   *    '_', '.', and '-'.\n   *\n   * Names are case insensitive\n   *\n   * @param name Name of metric to be created\n   */\n  private _isValidName(name: string): boolean {\n    return Boolean(name.match(/^[a-z][a-z0-9_.-]*$/i));\n  }\n}\n"]}