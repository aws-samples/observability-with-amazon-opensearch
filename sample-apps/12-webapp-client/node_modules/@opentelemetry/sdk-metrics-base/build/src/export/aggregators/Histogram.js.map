{"version":3,"file":"Histogram.js","sourceRoot":"","sources":["../../../../src/export/aggregators/Histogram.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,oCAKkB;AAElB,8CAA6C;AAE7C;;;GAGG;AACH,MAAa,mBAAmB;IAM9B,YAAY,UAAoB;QALzB,SAAI,GAA6B,sBAAc,CAAC,SAAS,CAAC;QAM/D,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;QACD,2EAA2E;QAC3E,iDAAiD;QACjD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,aAAM,EAAE,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,KAAa;QAClB,IAAI,CAAC,eAAe,GAAG,aAAM,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,KAAK,CAAC;QAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;gBAC/B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACrC,OAAO;aACR;SACF;QACD,yCAAyC;QACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO;QACL,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,QAAQ;YACpB,SAAS,EAAE,IAAI,CAAC,eAAe;SAChC,CAAC;IACJ,CAAC;IAEO,mBAAmB;QACzB,OAAO;YACL,OAAO,EAAE;gBACP,UAAU,EAAE,IAAI,CAAC,WAAW;gBAC5B,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aAClD;YACD,GAAG,EAAE,CAAC;YACN,KAAK,EAAE,CAAC;SACT,CAAC;IACJ,CAAC;CACF;AAjDD,kDAiDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  HistogramAggregatorType,\n  Point,\n  Histogram,\n  AggregatorKind,\n} from '../types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hrTime } from '@opentelemetry/core';\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements HistogramAggregatorType {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n  private _current: Histogram;\n  private _lastUpdateTime: HrTime;\n  private readonly _boundaries: number[];\n\n  constructor(boundaries: number[]) {\n    if (boundaries === undefined || boundaries.length === 0) {\n      throw new Error('HistogramAggregator should be created with boundaries.');\n    }\n    // we need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    this._boundaries = boundaries.sort((a, b) => a - b);\n    this._current = this._newEmptyCheckpoint();\n    this._lastUpdateTime = hrTime();\n  }\n\n  update(value: number): void {\n    this._lastUpdateTime = hrTime();\n    this._current.count += 1;\n    this._current.sum += value;\n\n    for (let i = 0; i < this._boundaries.length; i++) {\n      if (value < this._boundaries[i]) {\n        this._current.buckets.counts[i] += 1;\n        return;\n      }\n    }\n    // value is above all observed boundaries\n    this._current.buckets.counts[this._boundaries.length] += 1;\n  }\n\n  toPoint(): Point<Histogram> {\n    return {\n      value: this._current,\n      timestamp: this._lastUpdateTime,\n    };\n  }\n\n  private _newEmptyCheckpoint(): Histogram {\n    return {\n      buckets: {\n        boundaries: this._boundaries,\n        counts: this._boundaries.map(() => 0).concat([0]),\n      },\n      sum: 0,\n      count: 0,\n    };\n  }\n}\n"]}