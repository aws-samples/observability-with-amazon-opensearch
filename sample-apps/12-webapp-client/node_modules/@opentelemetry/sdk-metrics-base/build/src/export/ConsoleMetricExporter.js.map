{"version":3,"file":"ConsoleMetricExporter.js","sourceRoot":"","sources":["../../../src/export/ConsoleMetricExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,8CAAqE;AAErE;;;GAGG;AAEH,+BAA+B;AAC/B,MAAa,qBAAqB;IAChC,MAAM,CACJ,OAAuB,EACvB,cAA8C;QAE9C,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAC1C,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;gBACnC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;aACtC;iBAAM,IAAI,OAAQ,KAAK,CAAC,KAAmB,CAAC,OAAO,KAAK,QAAQ,EAAE;gBACjE,MAAM,SAAS,GAAG,KAAK,CAAC,KAAkB,CAAC;gBAC3C,OAAO,CAAC,GAAG,CACT,UAAU,SAAS,CAAC,KAAK,UAAU,SAAS,CAAC,GAAG,cAAc,SAAS,CAAC,OAAO,EAAE,CAClF,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC1B;SACF;QACD,OAAO,cAAc,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,QAAQ;QACN,0BAA0B;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA3BD,sDA2BC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricExporter, MetricRecord, Histogram } from './types';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements MetricExporter {\n  export(\n    metrics: MetricRecord[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    for (const metric of metrics) {\n      console.log(metric.descriptor);\n      console.log(metric.labels);\n      const point = metric.aggregator.toPoint();\n      if (typeof point.value === 'number') {\n        console.log('value: ' + point.value);\n      } else if (typeof (point.value as Histogram).buckets === 'object') {\n        const histogram = point.value as Histogram;\n        console.log(\n          `count: ${histogram.count}, sum: ${histogram.sum}, buckets: ${histogram.buckets}`\n        );\n      } else {\n        console.log(point.value);\n      }\n    }\n    return resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  shutdown(): Promise<void> {\n    // By default does nothing\n    return Promise.resolve();\n  }\n}\n"]}