{"version":3,"file":"SumObserverMetric.js","sourceRoot":"","sources":["../../src/SumObserverMetric.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,6DAA0D;AAE1D,0CAAuD;AAGvD,0DAA0D;AAC1D,MAAa,iBACX,SAAQ,uCAAkB;IAE1B,YACE,IAAY,EACZ,OAA0B,EAC1B,SAAoB,EACpB,QAAkB,EAClB,sBAA8C,EAC9C,QAA0D;QAE1D,KAAK,CACH,IAAI,EACJ,OAAO,EACP,SAAS,EACT,QAAQ,EACR,kBAAU,CAAC,YAAY,EACvB,sBAAsB,EACtB,QAAQ,CACT,CAAC;IACJ,CAAC;IAEkB,eAAe,CAAC,cAA8B;QAC/D,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,oEAAoE;YACpE,uCAAuC;YACvC,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,EAAE,CAAC,OAAO,EAAE,CAAC;YACtD,IAAI,aAAa,GAAG,CAAC,QAAQ,CAAC;YAC9B,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC9D,aAAa,GAAG,QAAQ,CAAC,KAAkB,CAAC;aAC7C;YACD,IAAI,KAAK,IAAI,aAAa,EAAE;gBAC1B,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArCD,8CAqCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { Processor } from './export/Processor';\nimport { LastValue, MetricKind } from './export/types';\nimport { ObserverResult } from './ObserverResult';\n\n/** This is a SDK implementation of SumObserver Metric. */\nexport class SumObserverMetric\n  extends BaseObserverMetric\n  implements api.SumObserver {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary,\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ) {\n    super(\n      name,\n      options,\n      processor,\n      resource,\n      MetricKind.SUM_OBSERVER,\n      instrumentationLibrary,\n      callback\n    );\n  }\n\n  protected override _processResults(observerResult: ObserverResult): void {\n    observerResult.values.forEach((value, labels) => {\n      const instrument = this.bind(labels);\n      // SumObserver is monotonic which means it should only accept values\n      // greater or equal then previous value\n      const previous = instrument.getAggregator().toPoint();\n      let previousValue = -Infinity;\n      if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n        previousValue = previous.value as LastValue;\n      }\n      if (value >= previousValue) {\n        instrument.update(value);\n      }\n    });\n  }\n}\n"]}