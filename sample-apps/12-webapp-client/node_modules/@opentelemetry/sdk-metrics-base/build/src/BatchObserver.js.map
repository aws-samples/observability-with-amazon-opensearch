{"version":3,"file":"BatchObserver.js","sourceRoot":"","sources":["../../src/BatchObserver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,4CAA0C;AAC1C,+DAA4D;AAE5D,MAAM,aAAa,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;AAC/B,MAAM,qBAAqB,GAAG,GAAG,CAAC;AAElC,sDAAsD;AACtD,MAAa,aAAa;IAIxB,YACE,OAAiC,EACjC,QAA4D;;QAE5D,IAAI,CAAC,mBAAmB;YACtB,MAAA,OAAO,CAAC,kBAAkB,mCAAI,qBAAqB,CAAC;QACtD,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,aAAa,CAAC;IAC7C,CAAC;IAED,OAAO;QACL,UAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACtC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,cAAc,GAAG,IAAI,yCAAmB,EAAE,CAAC;YAEjD,6DAA6D;YAC7D,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC;gBAChC,oEAAoE;gBACpE,4DAA4D;gBAC5D,cAAc,CAAC,eAAe,EAAE,CAAC;gBACjC,OAAO,EAAE,CAAC;gBACV,UAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC1C,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAE7B,0CAA0C;YAC1C,cAAc,CAAC,eAAe,CAAC,GAAG,EAAE;gBAClC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,OAAO,EAAE,CAAC;gBACV,UAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,yCAAyC;YACzC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvCD,sCAuCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\n\nconst NOOP_CALLBACK = () => {};\nconst MAX_TIMEOUT_UPDATE_MS = 500;\n\n/** This is a SDK implementation of Batch Observer. */\nexport class BatchObserver {\n  private _callback: (observerResult: api.BatchObserverResult) => void;\n  private _maxTimeoutUpdateMS: number;\n\n  constructor(\n    options: api.BatchObserverOptions,\n    callback?: (observerResult: api.BatchObserverResult) => void\n  ) {\n    this._maxTimeoutUpdateMS =\n      options.maxTimeoutUpdateMS ?? MAX_TIMEOUT_UPDATE_MS;\n    this._callback = callback || NOOP_CALLBACK;\n  }\n\n  collect(): Promise<void> {\n    diag.debug('getMetricRecord - start');\n    return new Promise(resolve => {\n      const observerResult = new BatchObserverResult();\n\n      // cancels after MAX_TIMEOUT_MS - no more waiting for results\n      const timer = setTimeout(() => {\n        observerResult.cancelled = true;\n        // remove callback to prevent user from updating the values later if\n        // for any reason the observerBatchResult will be referenced\n        observerResult.onObserveCalled();\n        resolve();\n        diag.debug('getMetricRecord - timeout');\n      }, this._maxTimeoutUpdateMS);\n\n      // sets callback for each \"observe\" method\n      observerResult.onObserveCalled(() => {\n        clearTimeout(timer);\n        resolve();\n        diag.debug('getMetricRecord - end');\n      });\n\n      // calls the BatchObserverResult callback\n      this._callback(observerResult);\n    });\n  }\n}\n"]}