{"version":3,"file":"UpDownCounterMetric.js","sourceRoot":"","sources":["../../src/UpDownCounterMetric.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,uDAAuD;AACvD,0CAA4C;AAE5C,qCAAkC;AAElC,4DAA4D;AAC5D,MAAa,mBACX,SAAQ,eAA0B;IAElC,YACE,IAAY,EACZ,OAA0B,EACT,UAAqB,EACtC,QAAkB,EAClB,sBAA8C;QAE9C,KAAK,CACH,IAAI,EACJ,OAAO,EACP,kBAAU,CAAC,eAAe,EAC1B,QAAQ,EACR,sBAAsB,CACvB,CAAC;QAVe,eAAU,GAAV,UAAU,CAAW;IAWxC,CAAC;IACS,eAAe,CAAC,MAAkB;QAC1C,OAAO,IAAI,oCAAkB,CAC3B,MAAM,EACN,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAChD,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAC,KAAa,EAAE,SAAqB,EAAE;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;CACF;AApCD,kDAoCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { BoundUpDownCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Processor } from './export/Processor';\nimport { Metric } from './Metric';\n\n/** This is a SDK implementation of UpDownCounter Metric. */\nexport class UpDownCounterMetric\n  extends Metric<BoundUpDownCounter>\n  implements api.UpDownCounter {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    private readonly _processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary\n  ) {\n    super(\n      name,\n      options,\n      MetricKind.UP_DOWN_COUNTER,\n      resource,\n      instrumentationLibrary\n    );\n  }\n  protected _makeInstrument(labels: api.Labels): BoundUpDownCounter {\n    return new BoundUpDownCounter(\n      labels,\n      this._disabled,\n      this._valueType,\n      this._processor.aggregatorFor(this._descriptor)\n    );\n  }\n\n  /**\n   * Adds the given value to the current value. Values cannot be negative.\n   * @param value the value to add.\n   * @param [labels = {}] key-values pairs that are associated with a specific\n   *     metric that you want to record.\n   */\n  add(value: number, labels: api.Labels = {}): void {\n    this.bind(labels).add(value);\n  }\n}\n"]}