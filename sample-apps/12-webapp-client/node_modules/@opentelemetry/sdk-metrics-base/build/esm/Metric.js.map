{"version":3,"file":"Metric.js","sourceRoot":"","sources":["../../src/Metric.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BaseBoundInstrument } from './BoundInstrument';\nimport { MetricDescriptor, MetricKind, MetricRecord } from './export/types';\nimport { hashLabels } from './Utils';\n\n/** This is a SDK implementation of {@link Metric} interface. */\nexport abstract class Metric<T extends BaseBoundInstrument>\n  implements api.UnboundMetric<T> {\n  protected readonly _disabled: boolean;\n  protected readonly _valueType: api.ValueType;\n  protected readonly _descriptor: MetricDescriptor;\n  protected readonly _boundaries: number[] | undefined;\n  protected readonly _aggregationTemporality: api.AggregationTemporality;\n  private readonly _instruments: Map<string, T> = new Map();\n\n  constructor(\n    private readonly _name: string,\n    private readonly _options: api.MetricOptions,\n    private readonly _kind: MetricKind,\n    readonly resource: Resource,\n    readonly instrumentationLibrary: InstrumentationLibrary\n  ) {\n    this._disabled = !!_options.disabled;\n    this._valueType =\n      typeof _options.valueType === 'number'\n        ? _options.valueType\n        : api.ValueType.DOUBLE;\n    this._boundaries = _options.boundaries;\n    this._descriptor = this._getMetricDescriptor();\n    this._aggregationTemporality =\n      _options.aggregationTemporality === undefined\n        ? api.AggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE\n        : _options.aggregationTemporality;\n  }\n\n  /**\n   * Returns an Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Instrument instead of always\n   * calling this method for each operation.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  bind(labels: api.Labels): T {\n    const hash = hashLabels(labels);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    if (this._instruments.has(hash)) return this._instruments.get(hash)!;\n\n    const instrument = this._makeInstrument(labels);\n    this._instruments.set(hash, instrument);\n    return instrument;\n  }\n\n  /**\n   * Removes the Instrument from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  unbind(labels: api.Labels): void {\n    this._instruments.delete(hashLabels(labels));\n  }\n\n  /**\n   * Clears all Instruments from the Metric.\n   */\n  clear(): void {\n    this._instruments.clear();\n  }\n\n  /**\n   * Returns kind of metric\n   */\n  getKind(): MetricKind {\n    return this._kind;\n  }\n\n  getAggregationTemporality(): api.AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  getMetricRecord(): Promise<MetricRecord[]> {\n    return new Promise(resolve => {\n      resolve(\n        Array.from(this._instruments.values()).map(instrument => ({\n          descriptor: this._descriptor,\n          labels: instrument.getLabels(),\n          aggregator: instrument.getAggregator(),\n          aggregationTemporality: this.getAggregationTemporality(),\n          resource: this.resource,\n          instrumentationLibrary: this.instrumentationLibrary,\n        }))\n      );\n    });\n  }\n\n  private _getMetricDescriptor(): MetricDescriptor {\n    return {\n      name: this._name,\n      description: this._options.description || '',\n      unit: this._options.unit || '1',\n      metricKind: this._kind,\n      valueType: this._valueType,\n      ...(this._boundaries && { boundaries: this._boundaries }),\n    };\n  }\n\n  protected abstract _makeInstrument(labels: api.Labels): T;\n}\n"]}