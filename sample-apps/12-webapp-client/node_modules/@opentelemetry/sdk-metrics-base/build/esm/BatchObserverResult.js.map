{"version":3,"file":"BatchObserverResult.js","sourceRoot":"","sources":["../../src/BatchObserverResult.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAIH;;GAEG;AACH;IAAA;QAGE;;;;;WAKG;QACH,cAAS,GAAG,KAAK,CAAC;IA6BpB,CAAC;IA3BC;;;;OAIG;IACH,6CAAe,GAAf,UAAgB,QAAqB;QACnC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,qCAAO,GAAP,UAAQ,MAAkB,EAAE,YAA+B;QAA3D,iBAiBC;QAhBC,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACrC,OAAO;SACR;QACD,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YAC9B,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;gBAC7B,IAAI,OAAO,KAAI,CAAC,SAAS,KAAK,UAAU,EAAE;oBACxC,KAAI,CAAC,SAAS,EAAE,CAAC;oBACjB,gEAAgE;oBAChE,iEAAiE;oBACjE,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IACH,0BAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\n\n/**\n * Implementation of api BatchObserverResult\n */\nexport class BatchObserverResult implements api.BatchObserverResult {\n  private _callback: (() => void) | undefined;\n  private _immediate: NodeJS.Immediate | undefined;\n  /**\n   * Cancels the further updates.\n   * This is used to prevent updating the value of result that took too\n   * long to update. For example to avoid update after timeout.\n   * See {@link BatchObserver.collect}\n   */\n  cancelled = false;\n\n  /**\n   * used to save a callback that will be called after the observations are\n   *     updated\n   * @param [callback]\n   */\n  onObserveCalled(callback?: () => void): void {\n    this._callback = callback;\n  }\n\n  observe(labels: api.Labels, observations: api.Observation[]): void {\n    if (this.cancelled || !this._callback) {\n      return;\n    }\n    observations.forEach(observation => {\n      observation.observer.bind(labels).update(observation.value);\n    });\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        if (typeof this._callback === 'function') {\n          this._callback();\n          // prevent user from updating the values later if for any reason\n          // the observerBatchResult will be referenced and then try to use\n          this._callback = undefined;\n        }\n      });\n    }\n  }\n}\n"]}