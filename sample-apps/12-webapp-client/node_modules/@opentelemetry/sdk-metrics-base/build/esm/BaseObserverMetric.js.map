{"version":3,"file":"BaseObserverMetric.js","sourceRoot":"","sources":["../../src/BaseObserverMetric.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAGlD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,IAAM,aAAa,GAAG,cAAO,CAAC,CAAC;AAE/B;;;GAGG;AACH;IACU,sCAAqB;IAI7B,4BACE,IAAY,EACZ,OAA0B,EACT,UAAqB,EACtC,QAAkB,EAClB,UAAsB,EACtB,sBAA8C,EAC9C,QAA0D;QAP5D,YASE,kBAAM,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,sBAAsB,CAAC,SAEnE;QARkB,gBAAU,GAAV,UAAU,CAAW;QAOtC,KAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,aAAa,CAAC;;IAC7C,CAAC;IAES,4CAAe,GAAzB,UAA0B,MAAkB;QAC1C,OAAO,IAAI,aAAa,CACtB,MAAM,EACN,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAChD,CAAC;IACJ,CAAC;IAEc,4CAAe,GAA9B;;;;;;wBACQ,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;wBAC5C,qBAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAA;;wBAApC,SAAoC,CAAC;wBAErC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;wBAErC,sBAAO,iBAAM,eAAe,WAAE,EAAC;;;;KAChC;IAES,4CAAe,GAAzB,UAA0B,cAA8B;QAAxD,iBAKC;QAJC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,MAAM;YAC1C,IAAM,UAAU,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wCAAW,GAAX,UAAY,KAAa;QACvB,OAAO;YACL,KAAK,OAAA;YACL,QAAQ,EAAE,IAA0B;SACrC,CAAC;IACJ,CAAC;IACH,yBAAC;AAAD,CAAC,AAjDD,CACU,MAAM,GAgDf","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api-metrics';\nimport { Observation } from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BoundObserver } from './BoundInstrument';\nimport { Processor } from './export/Processor';\nimport { MetricKind, MetricRecord } from './export/types';\nimport { Metric } from './Metric';\nimport { ObserverResult } from './ObserverResult';\n\nconst NOOP_CALLBACK = () => {};\n\n/**\n * This is a SDK implementation of Base Observer Metric.\n * All observers should extend this class\n */\nexport abstract class BaseObserverMetric\n  extends Metric<BoundObserver>\n  implements api.BaseObserver {\n  protected _callback: (observerResult: api.ObserverResult) => unknown;\n\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    private readonly _processor: Processor,\n    resource: Resource,\n    metricKind: MetricKind,\n    instrumentationLibrary: InstrumentationLibrary,\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ) {\n    super(name, options, metricKind, resource, instrumentationLibrary);\n    this._callback = callback || NOOP_CALLBACK;\n  }\n\n  protected _makeInstrument(labels: api.Labels): BoundObserver {\n    return new BoundObserver(\n      labels,\n      this._disabled,\n      this._valueType,\n      this._processor.aggregatorFor(this._descriptor)\n    );\n  }\n\n  override async getMetricRecord(): Promise<MetricRecord[]> {\n    const observerResult = new ObserverResult();\n    await this._callback(observerResult);\n\n    this._processResults(observerResult);\n\n    return super.getMetricRecord();\n  }\n\n  protected _processResults(observerResult: ObserverResult): void {\n    observerResult.values.forEach((value, labels) => {\n      const instrument = this.bind(labels);\n      instrument.update(value);\n    });\n  }\n\n  observation(value: number): Observation {\n    return {\n      value,\n      observer: this as BaseObserverMetric,\n    };\n  }\n}\n"]}