{"version":3,"file":"Controller.js","sourceRoot":"","sources":["../../../src/export/Controller.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EACL,gBAAgB,EAChB,UAAU,EACV,kBAAkB,GACnB,MAAM,qBAAqB,CAAC;AAI7B,IAAM,uBAAuB,GAAG,KAAM,CAAC;AAEvC;IAAA;IAAyB,CAAC;IAAD,iBAAC;AAAD,CAAC,AAA1B,IAA0B;;AAE1B,2DAA2D;AAC3D;IAAoC,kCAAU;IAG5C,wBACmB,MAAa,EACb,SAAyB,EAC1C,QAA0C;QAA1C,yBAAA,EAAA,kCAA0C;QAH5C,YAKE,iBAAO,SAOR;QAXkB,YAAM,GAAN,MAAM,CAAO;QACb,eAAS,GAAT,SAAS,CAAgB;QAI1C,KAAI,CAAC,MAAM,GAAG,WAAW,CAAC;YACxB,KAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,UAAA,GAAG;gBACvB,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,QAAQ,CAAC,CAAC;QACb,UAAU,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;;IAC1B,CAAC;IAED,iCAAQ,GAAR;QACE,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAEa,iCAAQ,GAAtB;;;;;4BACE,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;wBAC5B,sBAAO,IAAI,OAAO,CAAC,UAAA,OAAO;gCACxB,KAAI,CAAC,SAAS,CAAC,MAAM,CACnB,KAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,aAAa,EAAE,EAC1C,UAAA,MAAM;;oCACJ,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,OAAO,EAAE;wCAC5C,kBAAkB,CAChB,MAAA,MAAM,CAAC,KAAK,mCACV,IAAI,KAAK,CAAC,2CAA2C,CAAC,CACzD,CAAC;qCACH;oCACD,OAAO,EAAE,CAAC;gCACZ,CAAC,CACF,CAAC;4BACJ,CAAC,CAAC,EAAC;;;;KACJ;IACH,qBAAC;AAAD,CAAC,AAvCD,CAAoC,UAAU,GAuC7C","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExportResultCode,\n  unrefTimer,\n  globalErrorHandler,\n} from '@opentelemetry/core';\nimport { Meter } from '../Meter';\nimport { MetricExporter } from './types';\n\nconst DEFAULT_EXPORT_INTERVAL = 60_000;\n\nexport class Controller {}\n\n/** Controller organizes a periodic push of metric data. */\nexport class PushController extends Controller {\n  private _timer: NodeJS.Timeout;\n\n  constructor(\n    private readonly _meter: Meter,\n    private readonly _exporter: MetricExporter,\n    interval: number = DEFAULT_EXPORT_INTERVAL\n  ) {\n    super();\n    this._timer = setInterval(() => {\n      this._collect().catch(err => {\n        globalErrorHandler(err);\n      });\n    }, interval);\n    unrefTimer(this._timer);\n  }\n\n  shutdown(): Promise<void> {\n    clearInterval(this._timer);\n    return this._collect();\n  }\n\n  private async _collect(): Promise<void> {\n    await this._meter.collect();\n    return new Promise(resolve => {\n      this._exporter.export(\n        this._meter.getProcessor().checkPointSet(),\n        result => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error('PushController: export failed in _collect')\n            );\n          }\n          resolve();\n        }\n      );\n    });\n  }\n}\n"]}