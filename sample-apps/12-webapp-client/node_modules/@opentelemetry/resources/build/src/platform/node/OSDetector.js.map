{"version":3,"file":"OSDetector.js","sourceRoot":"","sources":["../../../../src/platform/node/OSDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,8EAAiF;AACjF,6CAA0C;AAG1C,2BAAuC;AAEvC;;;GAGG;AACH,MAAM,UAAU;IACd,KAAK,CAAC,MAAM,CAAC,OAAiC;QAC5C,MAAM,UAAU,GAAuB;YACrC,CAAC,iDAA0B,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,IAAA,aAAQ,GAAE,CAAC;YACrE,CAAC,iDAA0B,CAAC,UAAU,CAAC,EAAE,IAAA,YAAO,GAAE;SACnD,CAAC;QACF,OAAO,IAAI,mBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAEO,cAAc,CAAC,YAAoB;QACzC,8EAA8E;QAC9E,4HAA4H;QAC5H,QAAQ,YAAY,EAAE;YACpB,KAAK,OAAO;gBACV,OAAO,SAAS,CAAC;YACnB,KAAK,OAAO;gBACV,OAAO,SAAS,CAAC;YACnB;gBACE,OAAO,YAAY,CAAC;SACvB;IACH,CAAC;CACF;AAEY,QAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { Detector, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { platform, release } from 'os';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  async detect(_config?: ResourceDetectionConfig): Promise<Resource> {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.OS_TYPE]: this._normalizeType(platform()),\n      [SemanticResourceAttributes.OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n\n  private _normalizeType(nodePlatform: string): string {\n    // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n    switch (nodePlatform) {\n      case 'sunos':\n        return 'solaris';\n      case 'win32':\n        return 'windows';\n      default:\n        return nodePlatform;\n    }\n  }\n}\n\nexport const osDetector = new OSDetector();\n"]}