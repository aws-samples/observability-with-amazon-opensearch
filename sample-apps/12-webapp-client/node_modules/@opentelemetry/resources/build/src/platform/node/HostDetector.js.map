{"version":3,"file":"HostDetector.js","sourceRoot":"","sources":["../../../../src/platform/node/HostDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,8EAAiF;AACjF,6CAA0C;AAG1C,2BAAoC;AAEpC;;;GAGG;AACH,MAAM,YAAY;IAChB,KAAK,CAAC,MAAM,CAAC,OAAiC;QAC5C,MAAM,UAAU,GAAuB;YACrC,CAAC,iDAA0B,CAAC,SAAS,CAAC,EAAE,IAAA,aAAQ,GAAE;YAClD,CAAC,iDAA0B,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,IAAA,SAAI,GAAE,CAAC;SACpE,CAAC;QACF,OAAO,IAAI,mBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAEO,cAAc,CAAC,cAAsB;QAC3C,0EAA0E;QAC1E,8HAA8H;QAC9H,QAAQ,cAAc,EAAE;YACtB,KAAK,KAAK;gBACR,OAAO,OAAO,CAAC;YACjB,KAAK,KAAK;gBACR,OAAO,OAAO,CAAC;YACjB,KAAK,KAAK;gBACR,OAAO,OAAO,CAAC;YACjB;gBACE,OAAO,cAAc,CAAC;SACzB;IACH,CAAC;CACF;AAEY,QAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { Detector, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { arch, hostname } from 'os';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  async detect(_config?: ResourceDetectionConfig): Promise<Resource> {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.HOST_NAME]: hostname(),\n      [SemanticResourceAttributes.HOST_ARCH]: this._normalizeArch(arch()),\n    };\n    return new Resource(attributes);\n  }\n\n  private _normalizeArch(nodeArchString: string): string {\n    // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n    switch (nodeArchString) {\n      case 'arm':\n        return 'arm32';\n      case 'ppc':\n        return 'ppc32';\n      case 'x64':\n        return 'amd64';\n      default:\n        return nodeArchString;\n    }\n  }\n}\n\nexport const hostDetector = new HostDetector();\n"]}