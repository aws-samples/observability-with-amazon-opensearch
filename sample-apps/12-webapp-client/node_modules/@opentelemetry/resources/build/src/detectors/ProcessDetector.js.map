{"version":3,"file":"ProcessDetector.js","sourceRoot":"","sources":["../../../src/detectors/ProcessDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA0C;AAC1C,8EAAiF;AACjF,0CAAuC;AAIvC;;;GAGG;AACH,MAAM,eAAe;IACnB,KAAK,CAAC,MAAM,CAAC,MAAgC;QAC3C,sCAAsC;QACtC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO,mBAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;QACD,MAAM,eAAe,GAAuB;YAC1C,CAAC,iDAA0B,CAAC,WAAW,CAAC,EAAE,OAAO,CAAC,GAAG;YACrD,CAAC,iDAA0B,CAAC,uBAAuB,CAAC,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;YACzE,CAAC,iDAA0B,CAAC,eAAe,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;YACnE,CAAC,iDAA0B,CAAC,oBAAoB,CAAC,EAC/C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;YAC9B,CAAC,iDAA0B,CAAC,uBAAuB,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;YAC3E,CAAC,iDAA0B,CAAC,oBAAoB,CAAC,EAAE,QAAQ;YAC3D,CAAC,iDAA0B,CAAC,2BAA2B,CAAC,EAAE,SAAS;SACpE,CAAC;QACF,OAAO,IAAI,CAAC,sBAAsB,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IACD;;;;;;OAMG;IACK,sBAAsB,CAC5B,eAAmC,EACnC,OAAiC;QAEjC,IACE,eAAe,CAAC,iDAA0B,CAAC,uBAAuB,CAAC;YACjE,EAAE;YACJ,eAAe,CAAC,iDAA0B,CAAC,uBAAuB,CAAC;gBACjE,EAAE;YACJ,eAAe,CAAC,iDAA0B,CAAC,eAAe,CAAC,KAAK,EAAE;YAClE,eAAe,CAAC,iDAA0B,CAAC,oBAAoB,CAAC,KAAK,EAAE;YACvE,eAAe,CAAC,iDAA0B,CAAC,uBAAuB,CAAC,KAAK,EAAE,EAC1E;YACA,UAAI,CAAC,KAAK,CACR,qEAAqE,CACtE,CAAC;YACF,OAAO,mBAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;aAAM;YACL,OAAO,IAAI,mBAAQ,mBACd,eAAe,EAClB,CAAC;SACJ;IACH,CAAC;CACF;AAEY,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { Detector, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  async detect(config?: ResourceDetectionConfig): Promise<Resource> {\n    // Skip if not in Node.js environment.\n    if (typeof process !== 'object') {\n      return Resource.empty();\n    }\n    const processResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_PID]: process.pid,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME]: process.title || '',\n      [SemanticResourceAttributes.PROCESS_COMMAND]: process.argv[1] || '',\n      [SemanticResourceAttributes.PROCESS_COMMAND_LINE]:\n        process.argv.join(' ') || '',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]: process.versions.node,\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n    return this._getResourceAttributes(processResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process varaibls\n   *\n   * @param processResource The unsantized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    processResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] ===\n        '' ||\n      processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH] ===\n        '' ||\n      processResource[SemanticResourceAttributes.PROCESS_COMMAND] === '' ||\n      processResource[SemanticResourceAttributes.PROCESS_COMMAND_LINE] === '' ||\n      processResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === ''\n    ) {\n      diag.debug(\n        'ProcessDetector failed: Unable to find required process resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...processResource,\n      });\n    }\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n"]}