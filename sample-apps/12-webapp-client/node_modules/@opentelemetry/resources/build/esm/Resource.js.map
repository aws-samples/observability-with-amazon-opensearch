{"version":3,"file":"Resource.js","sourceRoot":"","sources":["../../src/Resource.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,0BAA0B,EAAE,MAAM,qCAAqC,CAAC;AACjF,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAEhD;;;GAGG;AACH;IAyBE;IACE;;;;OAIG;IACM,UAA8B;QAA9B,eAAU,GAAV,UAAU,CAAoB;IACtC,CAAC;IA7BJ;;OAEG;IACI,cAAK,GAAZ;QACE,OAAO,QAAQ,CAAC,KAAK,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,gBAAO,GAAd;;QACE,OAAO,IAAI,QAAQ;YACjB,GAAC,0BAA0B,CAAC,YAAY,IAAG,kBAAkB,EAAE;YAC/D,GAAC,0BAA0B,CAAC,sBAAsB,IAChD,QAAQ,CAAC,0BAA0B,CAAC,sBAAsB,CAAC;YAC7D,GAAC,0BAA0B,CAAC,kBAAkB,IAC5C,QAAQ,CAAC,0BAA0B,CAAC,kBAAkB,CAAC;YACzD,GAAC,0BAA0B,CAAC,qBAAqB,IAC/C,QAAQ,CAAC,0BAA0B,CAAC,qBAAqB,CAAC;gBAC5D,CAAC;IACL,CAAC;IAWD;;;;;;;OAOG;IACH,wBAAK,GAAL,UAAM,KAAsB;QAC1B,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAEjE,yEAAyE;QACzE,IAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CACpC,EAAE,EACF,IAAI,CAAC,UAAU,EACf,KAAK,CAAC,UAAU,CACjB,CAAC;QACF,OAAO,IAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IACxC,CAAC;IAnDe,cAAK,GAAG,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;IAoD3C,eAAC;CAAA,AArDD,IAqDC;SArDY,QAAQ","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource {\n  static readonly EMPTY = new Resource({});\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): Resource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that indentifies the SDK in use.\n   */\n  static default(): Resource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    readonly attributes: ResourceAttributes\n  ) {}\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: Resource | null): Resource {\n    if (!other || !Object.keys(other.attributes).length) return this;\n\n    // SpanAttributes from resource overwrite attributes from other resource.\n    const mergedAttributes = Object.assign(\n      {},\n      this.attributes,\n      other.attributes\n    );\n    return new Resource(mergedAttributes);\n  }\n}\n"]}