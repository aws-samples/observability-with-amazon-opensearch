{"version":3,"file":"detect-resources.js","sourceRoot":"","sources":["../../../../src/platform/browser/detect-resources.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAE1C,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAE1C;;;;;GAKG;AACH,MAAM,CAAC,IAAM,eAAe,GAAG,UAC7B,MAAoC;IAApC,uBAAA,EAAA,WAAoC;;;;;;oBAE9B,cAAc,GAA4B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBAExC,qBAAM,OAAO,CAAC,GAAG,CAC7C,CAAC,cAAc,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAM,CAAC;;;;;;wCAEvB,qBAAM,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,EAAA;;wCAAzC,QAAQ,GAAG,SAA8B;wCAC/C,IAAI,CAAC,KAAK,CAAI,CAAC,CAAC,WAAW,CAAC,IAAI,qBAAkB,EAAE,QAAQ,CAAC,CAAC;wCAC9D,sBAAO,QAAQ,EAAC;;;wCAEhB,IAAI,CAAC,KAAK,CAAI,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAY,GAAC,CAAC,OAAS,CAAC,CAAC;wCACzD,sBAAO,QAAQ,CAAC,KAAK,EAAE,EAAC;;;;6BAE3B,CAAC,CACH,EAAA;;oBAXK,SAAS,GAAe,SAW7B;oBAED,sBAAO,SAAS,CAAC,MAAM,CACrB,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAnB,CAAmB,EACtC,QAAQ,CAAC,KAAK,EAAE,CACjB,EAAC;;;;CACH,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from '../../Resource';\nimport { ResourceDetectionConfig } from '../../config';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * Runs all resource detectors and returns the results merged into a single\n * Resource.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<Resource> => {\n  const internalConfig: ResourceDetectionConfig = Object.assign(config);\n\n  const resources: Resource[] = await Promise.all(\n    (internalConfig.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(internalConfig);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n"]}