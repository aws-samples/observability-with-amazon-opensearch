{"version":3,"file":"EnvDetector.js","sourceRoot":"","sources":["../../../src/detectors/EnvDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { Detector, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  async detect(_config?: ResourceDetectionConfig): Promise<Resource> {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split('^\"|\"$').join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = value;\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isPrintableString(name);\n  }\n\n  private _isPrintableString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch: string = str.charAt(i);\n      if (ch <= ' ' || ch >= '~') {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetector = new EnvDetector();\n"]}