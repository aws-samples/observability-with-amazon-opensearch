{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, TextMapPropagator } from '@opentelemetry/api';\nimport { metrics } from '@opentelemetry/api-metrics';\nimport {\n  InstrumentationOption,\n  registerInstrumentations\n} from '@opentelemetry/instrumentation';\nimport {\n  detectResources,\n  envDetector,\n  processDetector,\n  Resource,\n  ResourceDetectionConfig\n} from '@opentelemetry/resources';\nimport { MeterProvider, MetricReader } from '@opentelemetry/sdk-metrics-base';\nimport {\n  BatchSpanProcessor,\n  SpanProcessor\n} from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerConfig, NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { NodeSDKConfiguration } from './types';\n\n/** This class represents everything needed to register a fully configured OpenTelemetry Node.js SDK */\nexport class NodeSDK {\n  private _tracerProviderConfig?: {\n    tracerConfig: NodeTracerConfig;\n    spanProcessor: SpanProcessor;\n    contextManager?: ContextManager;\n    textMapPropagator?: TextMapPropagator;\n  };\n  private _instrumentations: InstrumentationOption[];\n  private _metricReader?: MetricReader;\n\n  private _resource: Resource;\n\n  private _autoDetectResources: boolean;\n\n  private _tracerProvider?: NodeTracerProvider;\n  private _meterProvider?: MeterProvider;\n  private _serviceName?: string;\n\n  /**\n   * Create a new NodeJS SDK instance\n   */\n  public constructor(configuration: Partial<NodeSDKConfiguration> = {}) {\n    this._resource = configuration.resource ?? new Resource({});\n\n    this._serviceName = configuration.serviceName;\n\n    this._autoDetectResources = configuration.autoDetectResources ?? true;\n\n    if (configuration.spanProcessor || configuration.traceExporter) {\n      const tracerProviderConfig: NodeTracerConfig = {};\n\n      if (configuration.sampler) {\n        tracerProviderConfig.sampler = configuration.sampler;\n      }\n      if (configuration.spanLimits) {\n        tracerProviderConfig.spanLimits = configuration.spanLimits;\n      }\n\n      const spanProcessor =\n        configuration.spanProcessor ??\n        new BatchSpanProcessor(configuration.traceExporter!);\n\n      this.configureTracerProvider(\n        tracerProviderConfig,\n        spanProcessor,\n        configuration.contextManager,\n        configuration.textMapPropagator\n      );\n    }\n\n    if (configuration.metricReader) {\n      this.configureMeterProvider(configuration.metricReader);\n    }\n\n    let instrumentations: InstrumentationOption[] = [];\n    if (configuration.instrumentations) {\n      instrumentations = configuration.instrumentations;\n    }\n    this._instrumentations = instrumentations;\n  }\n\n  /** Set configurations required to register a NodeTracerProvider */\n  public configureTracerProvider(\n    tracerConfig: NodeTracerConfig,\n    spanProcessor: SpanProcessor,\n    contextManager?: ContextManager,\n    textMapPropagator?: TextMapPropagator\n  ): void {\n    this._tracerProviderConfig = {\n      tracerConfig,\n      spanProcessor,\n      contextManager,\n      textMapPropagator,\n    };\n  }\n\n  /** Set configurations needed to register a MeterProvider */\n  public configureMeterProvider(reader: MetricReader): void {\n    this._metricReader = reader;\n  }\n\n  /** Detect resource attributes */\n  public async detectResources(\n    config?: ResourceDetectionConfig\n  ): Promise<void> {\n    const internalConfig: ResourceDetectionConfig = {\n      detectors: [ envDetector, processDetector],\n      ...config,\n    };\n\n    this.addResource(await detectResources(internalConfig));\n  }\n\n  /** Manually add a resource */\n  public addResource(resource: Resource): void {\n    this._resource = this._resource.merge(resource);\n  }\n\n  /**\n   * Once the SDK has been configured, call this method to construct SDK components and register them with the OpenTelemetry API.\n   */\n  public async start(): Promise<void> {\n    if (this._autoDetectResources) {\n      await this.detectResources();\n    }\n\n    this._resource = this._serviceName === undefined\n      ? this._resource\n      : this._resource.merge(new Resource(\n        {[SemanticResourceAttributes.SERVICE_NAME]: this._serviceName}\n      ));\n\n    if (this._tracerProviderConfig) {\n      const tracerProvider = new NodeTracerProvider({\n        ...this._tracerProviderConfig.tracerConfig,\n        resource: this._resource,\n      });\n\n      this._tracerProvider = tracerProvider;\n\n      tracerProvider.addSpanProcessor(this._tracerProviderConfig.spanProcessor);\n      tracerProvider.register({\n        contextManager: this._tracerProviderConfig.contextManager,\n        propagator: this._tracerProviderConfig.textMapPropagator,\n      });\n    }\n\n    if (this._metricReader) {\n      const meterProvider = new MeterProvider({\n        resource: this._resource,\n      });\n\n      meterProvider.addMetricReader(this._metricReader);\n\n      this._meterProvider = meterProvider;\n\n      metrics.setGlobalMeterProvider(meterProvider);\n    }\n\n    registerInstrumentations({\n      instrumentations: this._instrumentations,\n    });\n  }\n\n  public shutdown(): Promise<void> {\n    const promises: Promise<unknown>[] = [];\n    if (this._tracerProvider) {\n      promises.push(this._tracerProvider.shutdown());\n    }\n    if (this._meterProvider) {\n      promises.push(this._meterProvider.shutdown());\n    }\n\n    return (\n      Promise.all(promises)\n        // return void instead of the array from Promise.all\n        .then(() => {\n        })\n    );\n  }\n}\n"]}