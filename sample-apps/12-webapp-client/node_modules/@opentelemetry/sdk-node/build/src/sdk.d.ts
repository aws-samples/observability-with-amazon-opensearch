import { ContextManager, TextMapPropagator } from '@opentelemetry/api';
import { Resource, ResourceDetectionConfig } from '@opentelemetry/resources';
import { MetricReader } from '@opentelemetry/sdk-metrics-base';
import { SpanProcessor } from '@opentelemetry/sdk-trace-base';
import { NodeTracerConfig } from '@opentelemetry/sdk-trace-node';
import { NodeSDKConfiguration } from './types';
/** This class represents everything needed to register a fully configured OpenTelemetry Node.js SDK */
export declare class NodeSDK {
    private _tracerProviderConfig?;
    private _instrumentations;
    private _metricReader?;
    private _resource;
    private _autoDetectResources;
    private _tracerProvider?;
    private _meterProvider?;
    private _serviceName?;
    /**
     * Create a new NodeJS SDK instance
     */
    constructor(configuration?: Partial<NodeSDKConfiguration>);
    /** Set configurations required to register a NodeTracerProvider */
    configureTracerProvider(tracerConfig: NodeTracerConfig, spanProcessor: SpanProcessor, contextManager?: ContextManager, textMapPropagator?: TextMapPropagator): void;
    /** Set configurations needed to register a MeterProvider */
    configureMeterProvider(reader: MetricReader): void;
    /** Detect resource attributes */
    detectResources(config?: ResourceDetectionConfig): Promise<void>;
    /** Manually add a resource */
    addResource(resource: Resource): void;
    /**
     * Once the SDK has been configured, call this method to construct SDK components and register them with the OpenTelemetry API.
     */
    start(): Promise<void>;
    shutdown(): Promise<void>;
}
//# sourceMappingURL=sdk.d.ts.map