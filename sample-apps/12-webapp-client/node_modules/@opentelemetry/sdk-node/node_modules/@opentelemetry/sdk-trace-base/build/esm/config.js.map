{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,IAAI,EAAW,MAAM,oBAAoB,CAAC;AACnD,OAAO,EACL,gBAAgB,EAChB,eAAe,EACf,MAAM,EACN,mBAAmB,EACnB,kBAAkB,EAElB,wBAAwB,GACzB,MAAM,qBAAqB,CAAC;AAE7B,IAAM,GAAG,GAAG,MAAM,EAAE,CAAC;AACrB,IAAM,4BAA4B,GAAG,mBAAmB,CAAC,QAAQ,CAAC;AAClE,IAAM,aAAa,GAAG,CAAC,CAAC;AAExB;;;;;GAKG;AACH,MAAM,CAAC,IAAM,cAAc,GAAG;IAC5B,OAAO,EAAE,mBAAmB,CAAC,GAAG,CAAC;IACjC,uBAAuB,EAAE,KAAK;IAC9B,aAAa,EAAE;QACb,yBAAyB,EAAE,MAAM,EAAE,CAAC,iCAAiC;QACrE,mBAAmB,EAAE,MAAM,EAAE,CAAC,0BAA0B;KACzD;IACD,UAAU,EAAE;QACV,yBAAyB,EAAE,MAAM,EAAE,CAAC,sCAAsC;QAC1E,mBAAmB,EAAE,MAAM,EAAE,CAAC,+BAA+B;QAC7D,cAAc,EAAE,MAAM,EAAE,CAAC,0BAA0B;QACnD,eAAe,EAAE,MAAM,EAAE,CAAC,2BAA2B;KACtD;CACF,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CACjC,WAA6C;IAA7C,4BAAA,EAAA,cAAqC,MAAM,EAAE;IAE7C,QAAQ,WAAW,CAAC,mBAAmB,EAAE;QACvC,KAAK,mBAAmB,CAAC,QAAQ;YAC/B,OAAO,IAAI,eAAe,EAAE,CAAC;QAC/B,KAAK,mBAAmB,CAAC,SAAS;YAChC,OAAO,IAAI,gBAAgB,EAAE,CAAC;QAChC,KAAK,mBAAmB,CAAC,mBAAmB;YAC1C,OAAO,IAAI,kBAAkB,CAAC;gBAC5B,IAAI,EAAE,IAAI,eAAe,EAAE;aAC5B,CAAC,CAAC;QACL,KAAK,mBAAmB,CAAC,oBAAoB;YAC3C,OAAO,IAAI,kBAAkB,CAAC;gBAC5B,IAAI,EAAE,IAAI,gBAAgB,EAAE;aAC7B,CAAC,CAAC;QACL,KAAK,mBAAmB,CAAC,YAAY;YACnC,OAAO,IAAI,wBAAwB,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,KAAK,mBAAmB,CAAC,uBAAuB;YAC9C,OAAO,IAAI,kBAAkB,CAAC;gBAC5B,IAAI,EAAE,IAAI,wBAAwB,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC;aAC9E,CAAC,CAAC;QACL;YACE,IAAI,CAAC,KAAK,CACR,iCAA8B,WAAW,CAAC,mBAAmB,gCAA2B,4BAA4B,QAAI,CACzH,CAAC;YACF,OAAO,IAAI,eAAe,EAAE,CAAC;KAChC;AACH,CAAC;AAED,SAAS,4BAA4B,CACnC,WAAkC;IAElC,IACE,WAAW,CAAC,uBAAuB,KAAK,SAAS;QACjD,WAAW,CAAC,uBAAuB,KAAK,EAAE,EAC1C;QACA,IAAI,CAAC,KAAK,CACR,qDAAmD,aAAa,MAAG,CACpE,CAAC;QACF,OAAO,aAAa,CAAC;KACtB;IAED,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;IAEhE,IAAI,KAAK,CAAC,WAAW,CAAC,EAAE;QACtB,IAAI,CAAC,KAAK,CACR,6BAA2B,WAAW,CAAC,uBAAuB,qDAAgD,aAAa,MAAG,CAC/H,CAAC;QACF,OAAO,aAAa,CAAC;KACtB;IAED,IAAI,WAAW,GAAG,CAAC,IAAI,WAAW,GAAG,CAAC,EAAE;QACtC,IAAI,CAAC,KAAK,CACR,6BAA2B,WAAW,CAAC,uBAAuB,mEAA8D,aAAa,MAAG,CAC7I,CAAC;QACF,OAAO,aAAa,CAAC;KACtB;IAED,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Sampler } from '@opentelemetry/api';\nimport {\n  AlwaysOffSampler,\n  AlwaysOnSampler,\n  getEnv,\n  TracesSamplerValues,\n  ParentBasedSampler,\n  ENVIRONMENT,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/core';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\nexport const DEFAULT_CONFIG = {\n  sampler: buildSamplerFromEnv(env),\n  forceFlushTimeoutMillis: 30000,\n  generalLimits: {\n    attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n  },\n  spanLimits: {\n    attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n    linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n    eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n  },\n};\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n"]}