{"version":3,"file":"MetricCollector.js","sourceRoot":"","sources":["../../../src/state/MetricCollector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAO7C,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AAGnC;;;;GAIG;AACH;IACE,yBAAoB,YAAsC,EAAU,aAA2B;QAA3E,iBAAY,GAAZ,YAAY,CAA0B;QAAU,kBAAa,GAAb,aAAa,CAAc;IAC/F,CAAC;IAEK,iCAAO,GAAb,UAAc,OAA8B;;;;;;;wBACpC,cAAc,GAAG,MAAM,EAAE,CAAC;wBAC1B,uBAAuB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;6BACrF,GAAG,CAAC,UAAA,gBAAgB,IAAI,OAAA,gBAAgB,CAAC,OAAO,CAAC,KAAI,EAAE,cAAc,EAAE,OAAO,CAAC,EAAvD,CAAuD,CAAC,CAAC;wBACrE,qBAAM,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAAA;;wBAAnD,MAAM,GAAG,SAA0C;wBAEzD,sBAAO;gCACL,eAAe,EAAE;oCACf,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;oCACpC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,YAAY,EAAf,CAAe,CAAC;iCAChD;gCACD,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,EAAT,CAAS,CAAC;6BACzC,EAAC;;;;KACH;IAED;;OAEG;IACG,oCAAU,GAAhB,UAAiB,OAA2B;;;;4BAC1C,qBAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,EAAA;;wBAA5C,SAA4C,CAAC;;;;;KAC9C;IAED;;OAEG;IACG,kCAAQ,GAAd,UAAe,OAAyB;;;;4BACtC,qBAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAA;;wBAA1C,SAA0C,CAAC;;;;;KAC5C;IAED,sDAA4B,GAA5B,UAA6B,cAA8B;QACzD,OAAO,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;IACzE,CAAC;IACH,sBAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { hrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationTemporality';\nimport { CollectionResult } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { FlatMap } from '../utils';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(private _sharedState: MeterProviderSharedState, private _metricReader: MetricReader) {\n  }\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = hrTime();\n    const meterCollectionPromises = Array.from(this._sharedState.meterSharedStates.values())\n      .map(meterSharedState => meterSharedState.collect(this, collectionTime, options));\n    const result = await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: result.map(it => it.scopeMetrics),\n      },\n      errors: FlatMap(result, it => it.errors),\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n"]}