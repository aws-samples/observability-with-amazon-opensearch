{"version":3,"file":"LastValue.js","sourceRoot":"","sources":["../../../src/aggregator/LastValue.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mCAAkG;AAElG,8CAAmE;AACnE,qDAAsE;AAKtE,MAAa,qBAAqB;IAChC,YAAmB,SAAiB,EAAU,WAAmB,CAAC,EAAS,aAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;QAAnF,cAAS,GAAT,SAAS,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAY;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAE1G,MAAM,CAAC,KAAa;QAClB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,IAAA,aAAM,GAAE,CAAC;IAC7B,CAAC;IAED,YAAY,CAAC,SAAiB;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AAfD,sDAeC;AAED,kFAAkF;AAClF,MAAa,mBAAmB;IAAhC;QACS,SAAI,GAA8B,sBAAc,CAAC,UAAU,CAAC;IAgDrE,CAAC;IA9CC,kBAAkB,CAAC,SAAiB;QAClC,OAAO,IAAI,qBAAqB,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAA+B,EAAE,KAA4B;QACjE,mCAAmC;QACnC,MAAM,kBAAkB,GAAG,IAAA,2BAAoB,EAAC,KAAK,CAAC,UAAU,CAAC,IAAI,IAAA,2BAAoB,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;QAClI,OAAO,IAAI,qBAAqB,CAAC,QAAQ,CAAC,SAAS,EAAE,kBAAkB,CAAC,YAAY,EAAE,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACzH,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,QAA+B,EAAE,OAA8B;QAClE,mCAAmC;QACnC,MAAM,kBAAkB,GAAG,IAAA,2BAAoB,EAAC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAA,2BAAoB,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC;QACtI,OAAO,IAAI,qBAAqB,CAAC,OAAO,CAAC,SAAS,EAAE,kBAAkB,CAAC,YAAY,EAAE,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACxH,CAAC;IAED,YAAY,CACV,UAAgC,EAChC,sBAA8C,EAC9C,wBAAqE,EACrE,OAAe;QACf,OAAO;YACL,UAAU;YACV,sBAAsB;YACtB,aAAa,EAAE,0BAAa,CAAC,KAAK;YAClC,UAAU,EAAE,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,EAAE,EAAE;gBACtE,OAAO;oBACL,UAAU;oBACV,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,OAAO;oBACP,KAAK,EAAE,YAAY,CAAC,YAAY,EAAE;iBACnC,CAAC;YACJ,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;CACF;AAjDD,kDAiDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Accumulation, AccumulationRecord, Aggregator, AggregatorKind, LastValue } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport { DataPointType, GaugeMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(public startTime: HrTime, private _current: number = 0, public sampleTime: HrTime = [0, 0]) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = hrTime();\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(previous: LastValueAccumulation, delta: LastValueAccumulation): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation = hrTimeToMicroseconds(delta.sampleTime) >= hrTimeToMicroseconds(previous.sampleTime) ? delta : previous;\n    return new LastValueAccumulation(previous.startTime, latestAccumulation.toPointValue(), latestAccumulation.sampleTime);\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(previous: LastValueAccumulation, current: LastValueAccumulation): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation = hrTimeToMicroseconds(current.sampleTime) >= hrTimeToMicroseconds(previous.sampleTime) ? current : previous;\n    return new LastValueAccumulation(current.startTime, latestAccumulation.toPointValue(), latestAccumulation.sampleTime);\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      })\n    };\n  }\n}\n"]}