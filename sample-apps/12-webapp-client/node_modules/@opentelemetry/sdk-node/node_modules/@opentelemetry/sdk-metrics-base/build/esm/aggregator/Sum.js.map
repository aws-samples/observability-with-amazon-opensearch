{"version":3,"file":"Sum.js","sourceRoot":"","sources":["../../../src/aggregator/Sum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sum, AggregatorKind, Aggregator, Accumulation, AccumulationRecord } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { DataPointType, SumMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(public startTime: HrTime, public monotonic: boolean, private _current: number = 0, public reset = false) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor (public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(delta.startTime, this.monotonic, deltaPv, delta.reset);\n    }\n    return new SumAccumulation(previous.startTime, this.monotonic, prevPv + deltaPv);\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && (prevPv > currPv)) {\n      return new SumAccumulation(current.startTime, this.monotonic, currPv, true);\n    }\n    return new SumAccumulation(current.startTime, this.monotonic, currPv - prevPv);\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic\n    };\n  }\n}\n"]}