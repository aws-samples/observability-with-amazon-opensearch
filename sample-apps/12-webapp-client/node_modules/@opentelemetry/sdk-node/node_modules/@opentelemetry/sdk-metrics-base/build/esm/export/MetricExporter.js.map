{"version":3,"file":"MetricExporter.js","sourceRoot":"","sources":["../../../src/export/MetricExporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,OAAO,EAEL,gBAAgB,GACjB,MAAM,qBAAqB,CAAC;AAoC7B;IAIE,+BAAY,sBAA+C;QAHjD,cAAS,GAAG,IAAI,CAAC;QAIzB,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,aAAtB,sBAAsB,cAAtB,sBAAsB,GAAI,sBAAsB,CAAC,UAAU,CAAC;IAC7F,CAAC;IAED,sCAAM,GAAN,UAAO,OAAwB,EAAE,cAA8C;QAC7E,OAAO,cAAc,CAAC;YACpB,IAAI,EAAE,gBAAgB,CAAC,MAAM;YAC7B,KAAK,EAAE,IAAI,KAAK,CAAC,wBAAwB,CAAC;SAC3C,CAAC,CAAC;IACL,CAAC;IAED,4DAA4B,GAA5B,UAA6B,eAA+B;QAC1D,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAED,gBAAgB;IACV,0CAAU,GAAhB;;;;KAAqB;IAEf,wCAAQ,GAAd;;;gBACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;;;KACvB;IACH,4BAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport {\n  ExportResult,\n  ExportResultCode,\n} from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\n/**\n * An interface that allows different metric services to export recorded data\n * in their own format.\n *\n * To export data this MUST be registered to the Metrics SDK with a MetricReader.\n */\nexport interface PushMetricExporter {\n  /**\n   * Called to export sampled {@link ResourceMetrics}.\n   * @param metrics the metric data to be exported.\n   */\n  export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void): void;\n\n  /**\n   * Ensure that the export of any metrics the exporter has received is\n   * completed before the returned promise is settled.\n   */\n  forceFlush(): Promise<void>;\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this exporter.\n   */\n  selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality;\n\n  /**\n   * Returns a promise which resolves when the last exportation is completed.\n   * Further calls to {@link PushMetricExporter.export} may not export the\n   * data.\n   */\n  shutdown(): Promise<void>;\n}\n\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = true;\n  private _aggregationTemporality: AggregationTemporality;\n\n  constructor(aggregationTemporality?: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality ?? AggregationTemporality.CUMULATIVE;\n  }\n\n  export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void) {\n    return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Method not implemented')\n    });\n  }\n\n  selectAggregationTemporality(_instrumentType: InstrumentType) {\n    return this._aggregationTemporality;\n  }\n\n  // nothing to do\n  async forceFlush() {}\n\n  async shutdown() {\n    this._shutdown = true;\n  }\n}\n"]}