{"version":3,"file":"ViewRegistry.js","sourceRoot":"","sources":["../../../src/view/ViewRegistry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAMH,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;IAAA;QAIU,qBAAgB,GAAW,EAAE,CAAC;IA6BxC,CAAC;IA3BC,8BAAO,GAAP,UAAQ,IAAU;QAChB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,gCAAS,GAAT,UAAU,UAAgC,EAAE,KAA2B;QAAvE,iBAWC;QAVC,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB;aAChC,MAAM,CAAC,UAAA,cAAc;YACpB,OAAO,KAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,kBAAkB,EAAE,UAAU,CAAC;gBACzE,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEL,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,uCAAgB,GAAxB,UAAyB,QAA4B,EAAE,UAAgC;QACrF,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,SAAS,IAAI,UAAU,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO,EAAE,CAAC;YACjF,QAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAEO,kCAAW,GAAnB,UAAoB,QAAuB,EAAE,KAA2B;QACtE,OAAO,QAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YAC/C,CAAC,KAAK,CAAC,OAAO,KAAK,SAAS,IAAI,QAAQ,CAAC,gBAAgB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjF,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5F,CAAC;IA/Bc,yBAAY,GAAG,IAAI,IAAI,CAAC;QACrC,cAAc,EAAE,GAAG;KACpB,CAAC,CAAC;IA8BL,mBAAC;CAAA,AAjCD,IAiCC;SAjCY,YAAY","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private static DEFAULT_VIEW = new View({\n    instrumentName: '*'\n  });\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(instrument: InstrumentDescriptor, meter: InstrumentationScope): View[] {\n    const views = this._registeredViews\n      .filter(registeredView => {\n        return this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n          this._matchMeter(registeredView.meterSelector, meter);\n      });\n\n    if (views.length === 0) {\n      return [ViewRegistry.DEFAULT_VIEW];\n    }\n    return views;\n  }\n\n  private _matchInstrument(selector: InstrumentSelector, instrument: InstrumentDescriptor): boolean {\n    return (selector.getType() === undefined || instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name);\n  }\n\n  private _matchMeter(selector: MeterSelector, meter: InstrumentationScope): boolean {\n    return selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined || selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined || selector.getSchemaUrlFilter().match(meter.schemaUrl));\n  }\n}\n"]}