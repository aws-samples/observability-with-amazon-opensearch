{"version":3,"file":"RegistrationConflicts.js","sourceRoot":"","sources":["../../../src/view/RegistrationConflicts.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(existing: InstrumentDescriptor, otherDescriptor: InstrumentDescriptor): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n"]}