{"version":3,"file":"MeterSharedState.js","sourceRoot":"","sources":["../../../src/state/MeterSharedState.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport { createInstrumentDescriptorWithView, InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  private _metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(private _meterProviderSharedState: MeterProviderSharedState, private _instrumentationScope: InstrumentationScope) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationScope);\n    const storages = views\n      .map(view => {\n        const viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n        const aggregator = view.aggregation.createAggregator(viewDescriptor);\n        const storage = new SyncMetricStorage(viewDescriptor, aggregator, view.attributesProcessor);\n        return this._metricStorageRegistry.register(storage);\n      })\n      .filter(isNotNullish);\n    if (storages.length === 1)  {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationScope);\n    const storages = views\n      .map(view => {\n        const viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n        const aggregator = view.aggregation.createAggregator(viewDescriptor);\n        const viewStorage = new AsyncMetricStorage(viewDescriptor, aggregator, view.attributesProcessor);\n        return this._metricStorageRegistry.register(viewStorage);\n      })\n      .filter(isNotNullish);\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @returns the list of metric data collected.\n   */\n  async collect(collector: MetricCollectorHandle, collectionTime: HrTime, options?: MetricCollectOptions): Promise<ScopeMetricsResult> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(collectionTime, options?.timeoutMillis);\n    const metricDataList = Array.from(this._metricStorageRegistry.getStorages())\n      .map(metricStorage => {\n        return metricStorage.collect(\n          collector,\n          this._meterProviderSharedState.metricCollectors,\n          collectionTime);\n      })\n      .filter(isNotNullish);\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList.filter(isNotNullish),\n      },\n      errors,\n    };\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics: ScopeMetrics;\n  errors: unknown[];\n}\n"]}