{"version":3,"file":"MetricStorageRegistry.js","sourceRoot":"","sources":["../../../src/state/MetricStorageRegistry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAGH,OAAO,EAAE,0BAA0B,EAAE,MAAM,yBAAyB,CAAC;AACrE,OAAO,KAAK,GAAG,MAAM,oBAAoB,CAAC;AAE1C,OAAO,EAAE,2BAA2B,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAEvG;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAAlC;QACmB,2BAAsB,GAAG,IAAI,GAAG,EAA2B,CAAC;IAoE/E,CAAC;IAlEC,MAAM,CAAC,MAAM;QACX,OAAO,IAAI,qBAAqB,EAAE,CAAC;IACrC,CAAC;IAED,WAAW;QACT,IAAI,QAAQ,GAAoB,EAAE,CAAC;QACnC,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,EAAE;YACjE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;SAC5C;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,QAAQ,CAA0B,OAAU;QAC1C,MAAM,kBAAkB,GAAG,OAAO,CAAC,uBAAuB,EAAE,CAAC;QAC7D,MAAM,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAElF,oCAAoC;QACpC,IAAI,gBAAgB,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YACpE,OAAO,OAAO,CAAC;SAChB;QAED,IAAI,iBAAiB,GAAG,IAAI,CAAC;QAE7B,KAAK,MAAM,eAAe,IAAI,gBAAgB,EAAE;YAC9C,MAAM,kBAAkB,GAAG,eAAe,CAAC,uBAAuB,EAAE,CAAC;YAErE,IAAI,0BAA0B,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,EAAE;gBACtE,mDAAmD;gBACnD,IAAI,kBAAkB,CAAC,WAAW,KAAK,kBAAkB,CAAC,WAAW,EAAE;oBACrE,IAAI,kBAAkB,CAAC,WAAW,CAAC,MAAM,GAAG,kBAAkB,CAAC,WAAW,CAAC,MAAM,EAAE;wBACjF,eAAe,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;qBACnE;oBAED,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,EACjD,kBAAkB,CAAC,IAAI,EACvB,mHAAmH,EACnH,YAAY,EACZ,yBAAyB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,EACjE,gEAAgE,EAChE,2BAA2B,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CAAC;iBACxE;gBACD,wGAAwG;gBACxG,iBAAiB,GAAG,eAAoB,CAAC;aAC1C;iBAAM;gBACL,yEAAyE;gBACzE,+CAA+C;gBAC/C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,EACjD,kBAAkB,CAAC,IAAI,EACvB,kFAAkF,EAClF,YAAY,EACZ,yBAAyB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,EACjE,4BAA4B,EAC5B,2BAA2B,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CAAC;aACxE;SACF;QAED,IAAI,iBAAiB,IAAI,IAAI,EAAE;YAC7B,OAAO,iBAAiB,CAAC;SAC1B;QAED,yEAAyE;QACzE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport { isDescriptorCompatibleWith } from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { getConflictResolutionRecipe, getIncompatibilityDetails } from '../view/RegistrationConflicts';\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _metricStorageRegistry = new Map<string, MetricStorage[]>();\n\n  static create(){\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._metricStorageRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    return storages;\n  }\n\n  register<T extends MetricStorage>(storage: T): Maybe<T> {\n    const expectedDescriptor = storage.getInstrumentDescriptor();\n    const existingStorages = this._metricStorageRegistry.get(expectedDescriptor.name);\n\n    // Add storage if it does not exist.\n    if (existingStorages === undefined) {\n      this._metricStorageRegistry.set(expectedDescriptor.name, [storage]);\n      return storage;\n    }\n\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (expectedDescriptor.description.length > existingDescriptor.description.length) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn('A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn('A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n      }\n    }\n\n    if (compatibleStorage != null) {\n      return compatibleStorage;\n    }\n\n    // None of the storages were compatible, add the current one to the list.\n    existingStorages.push(storage);\n    return storage;\n  }\n}\n"]}