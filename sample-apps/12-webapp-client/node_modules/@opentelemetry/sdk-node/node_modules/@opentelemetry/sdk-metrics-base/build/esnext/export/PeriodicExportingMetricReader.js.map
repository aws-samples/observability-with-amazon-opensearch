{"version":3,"file":"PeriodicExportingMetricReader.js","sourceRoot":"","sources":["../../../src/export/PeriodicExportingMetricReader.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  exporter: PushMetricExporter\n  exportIntervalMillis?: number,\n  exportTimeoutMillis?: number\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link MetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n\n  private _exporter: PushMetricExporter;\n\n  private readonly _exportInterval: number;\n\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super();\n\n    if (options.exportIntervalMillis !== undefined && options.exportIntervalMillis <= 0) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (options.exportTimeoutMillis !== undefined && options.exportTimeoutMillis <= 0) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis) {\n      throw Error('exportIntervalMillis must be greater than or equal to exportTimeoutMillis');\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({});\n\n    if (errors.length > 0) {\n      api.diag.error('PeriodicExportingMetricReader: metrics collection errors', ...errors);\n    }\n\n    return new Promise((resolve, reject) => {\n      this._exporter.export(resourceMetrics, result => {\n        if (result.code !== ExportResultCode.SUCCESS) {\n          reject(\n            result.error ??\n              new Error(\n                `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n              )\n          );\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(async () => {\n      try {\n        await callWithTimeout(this._runOnce(), this._exportTimeout);\n      } catch (err) {\n        if (err instanceof TimeoutError) {\n          api.diag.error('Export took longer than %s milliseconds and timed out.', this._exportTimeout);\n          return;\n        }\n\n        globalErrorHandler(err);\n      }\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n\n  /**\n   * @inheritdoc\n   */\n  selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality {\n    return this._exporter.selectAggregationTemporality(instrumentType);\n  }\n}\n"]}