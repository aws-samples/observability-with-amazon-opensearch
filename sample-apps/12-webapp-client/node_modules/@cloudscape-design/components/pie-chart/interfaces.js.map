{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/pie-chart/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { PopoverProps } from '../popover/interfaces';\n\nexport interface SeriesInfo {\n  label: string;\n  color: string;\n  index: number;\n  markerType: 'line' | 'rectangle';\n}\n\nexport interface ChartDetailPair {\n  key: string;\n  value: string | number;\n}\n\nexport interface PieChartProps<T extends PieChartProps.Datum = PieChartProps.Datum> extends BaseComponentProps {\n  /**\n   * An array that represents the source of data for the displayed segments.\n   * Each element can have the following properties:\n   *\n   * * `title` (string) - A human-readable title for this data point.\n   * * `value` (number) - Numeric value that determines the segment size.\n   *                        A segment with a value of zero (0) or lower (negative number) won't have a segment.\n   * * `color`: (string) - (Optional) Color value for this segment that takes priority over the automatically assigned color.\n   *                        Can be any valid CSS color identifier.\n   *\n   * As long as your data object implements the properties above, you can also define additional properties\n   * that are relevant to your data visualization.\n   * The full data object will be passed down to events and properties like `detailPopoverContent`.\n   */\n  data: ReadonlyArray<T>;\n\n  /**\n   * Specifies the size of the pie or donut chart.\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * Visual variant of the pie chart. Currently supports the default `pie` variant and the `donut` variant.\n   * The donut variant provides a slot in the center of the chart that can contain additional information.\n   * For more information, see `innerContent`.\n   */\n  variant?: 'pie' | 'donut';\n\n  /**\n   * A function that determines the details that are displayed in the popover when hovering over a segment.\n   * The function is called with the data of the target segment and is expected to return an array of detail pairs.\n   * By default, each segment displays two detail pairs: count and percentage.\n   *\n   * Each pair has the following properties:\n   * * `key` (string) - Name of the detail or metric.\n   * * `value` (string | number) - The value of this detail for the target segment.\n   */\n  detailPopoverContent?: PieChartProps.DetailPopoverContentFunction<T>;\n\n  /**\n   * A function that determines the description of a segment that is displayed on the chart, unless `hideDescriptions` is set to `true`.\n   * This is an optional description that explains the segment and is displayed underneath the label.\n   * The function is called with the data object of each segment and is expected to return the description as a string.\n   */\n  segmentDescription?: PieChartProps.SegmentDescriptionFunction<T>;\n\n  /**\n   * Determines the maximum width of the popover.\n   */\n  detailPopoverSize?: PopoverProps.Size;\n\n  /**\n   * Hides legend beneath the chart when set to `true`.\n   * We highly recommend that you leave this unspecified or set to `false`.\n   */\n  hideLegend?: boolean;\n\n  /**\n   * Hides label titles next to the chart segments when set to `true`.\n   * We highly recommend that you leave this unspecified or set to `false`.\n   */\n  hideTitles?: boolean;\n\n  /**\n   * Hides the label descriptions next to the chart segments when set to `true`.\n   */\n  hideDescriptions?: boolean;\n\n  /**\n   * Hides the default filtering dropdown when set to `true`.\n   * You can still display additional filters with the `additionalFilters` slot.\n   */\n  hideFilter?: boolean;\n\n  /**\n   * Additional metric number that's displayed in the center of the chart if `variant` is set to `donut`.\n   */\n  innerMetricValue?: string;\n\n  /**\n   * Additional description that's displayed in the center of the chart below `innerMetricValue` if `variant` is set to `donut`.\n   * This is usually the unit of the `innerMetricValue`.\n   */\n  innerMetricDescription?: string;\n\n  /**\n   * Title for the legend.\n   */\n  legendTitle?: string;\n\n  /**\n   * Additional filters that you can add above the chart component.\n   * Make sure you update the `data` property when any of your custom filters change the data that's displayed.\n   */\n  additionalFilters?: React.ReactNode;\n\n  /**\n   * Specifies the currently highlighted data segment. Highlighting is typically the result of\n   * a user hovering over or selecting a segment in the chart or the legend.\n   * A value of `null` means no segment is being highlighted.\n   *\n   * - If you don't set this property, segments are highlighted automatically when a user hovers over or selects one of the triggers (that is, uncontrolled behavior).\n   * - If you explicitly set this property, you must set an `onHighlightChange` listener to update this property when a segment should be highlighted (that is, controlled behavior).\n   */\n  highlightedSegment?: T | null;\n\n  /**\n   * An array of data segment objects that determines which data segments are currently visible (that is, not filtered out).\n   *\n   * - If you don't set this property, segments are filtered automatically when using the default filtering of the component (that is, uncontrolled behavior).\n   * - If you explicitly set this property, you must set an `onFilterChange` listener to update this property when the list of filtered segments changes (that is, controlled behavior).\n   */\n  visibleSegments?: ReadonlyArray<T>;\n\n  /**\n   * Specifies the current status of loading data.\n   * * `loading` - Indicates that data fetching is in progress.\n   * * `finished` - Indicates that data has loaded successfully.\n   * * `error` - Indicates that an error occurred during fetch. You should provide an option to enable the user to recover.\n   **/\n  statusType?: 'loading' | 'finished' | 'error';\n\n  /**\n   * Content that's displayed when the data passed to the component is empty.\n   */\n  empty?: React.ReactNode;\n\n  /**\n   * Content that's displayed when there is no data to display because it doesn't match the specified filter.\n   */\n  noMatch?: React.ReactNode;\n\n  /**\n   * Text that's displayed when the chart is loading (that is, when `statusType` is set to `loading`).\n   */\n  loadingText?: string;\n\n  /**\n   * Text that's displayed when the chart is in error state (that is, when `statusType` is set to `error`).\n   */\n  errorText?: string;\n\n  /**\n   * Text for the recovery button that's displayed next to the error text.\n   **/\n  recoveryText?: string;\n\n  /**\n   * Called when the user clicks the recovery button that appears when there is an error state.\n   * Use this to enable the user to retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n\n  /**\n   * Called when the highlighted segmented changes because of a user interaction.\n   */\n  onHighlightChange?: NonCancelableEventHandler<PieChartProps.HighlightChangeDetail<T>>;\n\n  /**\n   * Called when the values of the internal filter component changes.\n   * This isn't called for any custom filter components you've defined in `additionalFilters`.\n   */\n  onFilterChange?: NonCancelableEventHandler<PieChartProps.FilterChangeDetail<T>>;\n\n  /**\n   * ARIA label that's assigned to the chart. It should match the visible label on the page\n   * (for example, in the container header). Use either `ariaLabel` or `ariaLabelledby` (you can't use both).\n   */\n  ariaLabel?: string;\n\n  /**\n   * Sets `aria-labelledby` on the chart. If there is a visible label for the chart on the page\n   * (for example, in the container header), set this property to the ID of that header element.\n   * Use either `ariaLabel` or `ariaLabelledby` (you can't use both).\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * A description of the chart that assistive technologies can use (through `aria-describedby` and `<title>`).\n   * Provide a concise summary of the data visualized in the chart.\n   */\n  ariaDescription?: string;\n\n  /**\n   * An object that contains all of the localized strings required by the component.\n   */\n  i18nStrings?: PieChartProps.I18nStrings;\n}\n\nexport namespace PieChartProps {\n  export interface Datum {\n    title: string;\n    value: number;\n    color?: string;\n  }\n\n  export type PieChartData = ReadonlyArray<Datum>;\n\n  export interface DetailPopoverContentFunction<T = Datum> {\n    (segment: T, visibleDataSum: number): ReadonlyArray<ChartDetailPair>;\n  }\n\n  export interface SegmentDescriptionFunction<T = Datum> {\n    (segment: T, visibleDataSum: number): string;\n  }\n\n  export interface HighlightChangeDetail<T> {\n    highlightedSegment: T | null;\n  }\n\n  export interface FilterChangeDetail<T> {\n    visibleSegments: ReadonlyArray<T>;\n  }\n\n  export interface I18nStrings {\n    /** Name of the \"Value\" key that is displayed in the details popover by default */\n    detailsValue?: string;\n\n    /** Name of the \"Percentage\" key that is displayed in the details popover by default */\n    detailsPercentage?: string;\n\n    /** Visible label of the default filter */\n    filterLabel?: string;\n\n    /** Placeholder text of the default filter */\n    filterPlaceholder?: string;\n\n    /** ARIA label for the default filter which is appended to any option that is selected */\n    filterSelectedAriaLabel?: string;\n\n    /** ARIA label that is associated with the legend in case there is no visible `legendTitle` defined */\n    legendAriaLabel?: string;\n\n    /** ARIA label for details popover dismiss button */\n    detailPopoverDismissAriaLabel?: string;\n\n    /** Name of the ARIA role description of the chart, e.g. \"pie chart\" */\n    chartAriaRoleDescription?: string;\n\n    /** Name of the ARIA role description of each segment, e.g. \"segment\" */\n    segmentAriaRoleDescription?: string;\n  }\n}\n"]}