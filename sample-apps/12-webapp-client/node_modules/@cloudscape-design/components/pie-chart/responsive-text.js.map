{"version":3,"file":"responsive-text.js","sourceRoot":"","sources":["../../../src/pie-chart/responsive-text.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\n\ninterface ResponsiveTextProps {\n  x: number;\n  y: number;\n  rightSide?: boolean;\n  className?: string;\n  children: string;\n  containerBoundaries: null | { left: number; right: number };\n}\n\nexport default memo(ResponsiveText);\n\nfunction ResponsiveText({ x, y, rightSide, className, children, containerBoundaries }: ResponsiveTextProps) {\n  const actualRef = useRef<SVGTextElement>(null);\n  const virtualRef = useRef<SVGTextElement>(null);\n\n  // Determine the visible width of the text and if necessary truncate it until it fits.\n  useEffect(() => {\n    // The debouncing is necessary for visual smoothness.\n    const timeoutId = setTimeout(() => {\n      const groupRect = virtualRef.current!.getBoundingClientRect();\n      const visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;\n      renderTextContent(actualRef.current!, children, visibleWidth);\n    }, 25);\n    return () => clearTimeout(timeoutId);\n  });\n\n  return (\n    <>\n      {/* Invisible sample text used for measurement */}\n      <text\n        ref={virtualRef}\n        x={x}\n        y={y}\n        style={{ textAnchor: rightSide ? 'start' : 'end', visibility: 'hidden' }}\n        aria-hidden=\"true\"\n        className={className}\n      >\n        {children}\n      </text>\n\n      {/* Text node to render truncated text into */}\n      <text ref={actualRef} x={x} y={y} style={{ textAnchor: rightSide ? 'start' : 'end' }} className={className}>\n        {children}\n      </text>\n    </>\n  );\n}\n\nfunction getVisibleWidth(element: { left: number; right: number }, container: { left: number; right: number }): number {\n  if (element.left < container.left) {\n    return element.right - container.left;\n  } else if (element.right > container.right) {\n    return container.right - element.left;\n  } else {\n    return container.right - container.left;\n  }\n}\n\nfunction renderTextContent(textNode: SVGTextElement, text: string, visibleWidth: number) {\n  let visibleLength = text.length;\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength);\n    if (!textNode.getComputedTextLength || textNode.getComputedTextLength() <= visibleWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\n\nfunction truncateText(text: string, maxLength: number) {\n  if (text.length === maxLength) {\n    return text;\n  }\n  return text.slice(0, maxLength) + 'â€¦';\n}\n"]}