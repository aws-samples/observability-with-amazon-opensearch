{"version":3,"file":"use-versions-fetch.js","sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-in-context/use-versions-fetch.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,OAAO,EAAE,qBAAqB,EAAE,MAAM,+CAA+C,CAAC;AACtF,OAAO,EAAE,eAAe,EAAE,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AAExF,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAG3D,MAAM,UAAU,gBAAgB,CAAC,aAAuD;IAChF,IAAA,KAAwB,QAAQ,CAAC,KAAK,CAAC,EAAtC,OAAO,QAAA,EAAE,UAAU,QAAmB,CAAC;IACxC,IAAA,KAAqC,QAAQ,CAAC,EAAE,CAAC,EAAhD,gBAAgB,QAAA,EAAE,cAAc,QAAgB,CAAC;IAClD,IAAA,KAA0B,QAAQ,CAA4B,EAAE,CAAC,EAAhE,QAAQ,QAAA,EAAE,WAAW,QAA2C,CAAC;IAExE,IAAM,YAAY,GAAG,UAAC,GAAW;QAC/B,IAAI,GAAG,KAAK,gBAAgB,EAAE;YAC5B,OAAO;SACR;QACD,cAAc,CAAC,GAAG,CAAC,CAAC;QACpB,IAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAA,KAAuB,iBAAiB,CAAC,GAAG,CAAC,EAA5C,UAAU,QAAA,EAAE,MAAM,QAA0B,CAAC;QACpD,IAAI,SAAS,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACnE,OAAO;SACR;QACD,UAAU,CAAC,IAAI,CAAC,CAAC;QACjB,IAAM,MAAM,GAAG,eAAe,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,IAAI,CACjB,UAAA,QAAQ;YACN,UAAU,CAAC,KAAK,CAAC,CAAC;YAClB,WAAW,CACT,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC;gBACvB,KAAK,EAAE,OAAO,CAAC,SAAS;gBACxB,KAAK,EAAE,OAAO,CAAC,YAAY;aAC5B,CAAC,EAHsB,CAGtB,CAAC,CACJ,CAAC;QACJ,CAAC,EACD,UAAA,GAAG;YACD,IAAI,CAAC,CAAC,GAAG,YAAY,sBAAsB,CAAC,EAAE;gBAC5C,UAAU,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC,CACF,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO;QACL,OAAO,SAAA;QACP,QAAQ,UAAA;QACR,aAAa,EAAE,cAAM,OAAA,WAAW,CAAC,EAAE,CAAC,EAAf,CAAe;QACpC,6CAA6C;QAC7C,YAAY,EAAE,qBAAqB,CAAC,YAAY,CAAC;KAClD,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { SelectProps } from '../../select/interfaces';\nimport { extractBucketName, validate } from './validation';\nimport { S3ResourceSelectorProps } from '../interfaces';\n\nexport function useVersionsFetch(fetchVersions: S3ResourceSelectorProps['fetchVersions']) {\n  const [loading, setLoading] = useState(false);\n  const [lastFetchedValue, setLastFetched] = useState('');\n  const [versions, setVersions] = useState<Array<SelectProps.Option>>([]);\n\n  const loadVersions = (uri: string) => {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    const errorCode = validate(uri);\n    const [bucketName, prefix] = extractBucketName(uri);\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    const result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(\n      versions => {\n        setLoading(false);\n        setVersions(\n          versions.map(version => ({\n            value: version.VersionId,\n            label: version.LastModified,\n          }))\n        );\n      },\n      err => {\n        if (!(err instanceof PromiseCancelledSignal)) {\n          setLoading(false);\n        }\n      }\n    );\n    return result;\n  };\n\n  return {\n    loading,\n    versions,\n    resetVersions: () => setVersions([]),\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions),\n  };\n}\n"]}