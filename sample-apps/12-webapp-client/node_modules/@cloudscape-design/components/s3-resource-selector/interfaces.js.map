{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/s3-resource-selector/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { TableProps } from '../table/interfaces';\nimport { PaginationProps } from '../pagination/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface S3ResourceSelectorProps extends BaseComponentProps {\n  /**\n   * Specifies additional information about component status.\n   */\n  alert?: React.ReactNode;\n\n  /**\n   * Adds `aria-labelledby` to the S3 URI input. If you're using this component within a form field,\n   * you do not need to set this property, as the form field component will set it automatically.\n   *\n   * Use this property if the component isn't surrounded by a form field, or you want to override the value\n   * automatically set by the form field (for example, if you have two components within a single form field).\n   *\n   * To use it correctly, define an ID for the element you want to use as label and set the property to that ID.\n   */\n  inputAriaDescribedby?: string;\n\n  /**\n   * An array of the item types that are selectable in the table view. The array may contain the following items:\n   * 'buckets', 'objects', or 'versions'. Example: ['buckets', 'objects']. By default, no items are selectable.\n   * This property determines whether the component operates in Read mode or Write mode:\n   * * Read mode - When 'objects' and 'versions' values are provided (folder selection should be disabled by\n   * customizing `objectsIsItemDisabled` function).\n   * * Write mode - When 'buckets' and 'objects' values are provided (file selection should be disabled by\n   * customizing `objectsIsItemDisabled` function).\n   */\n  selectableItemsTypes?: ReadonlyArray<S3ResourceSelectorProps.SelectableItems>;\n\n  /**\n   * Href of the selected object that is applied to the View button.\n   */\n  viewHref?: string;\n\n  /**\n   * Whether the S3 URI input field is in invalid state.\n   */\n  invalid?: boolean;\n\n  /**\n   * Optionally overrides the set of visible columns in the Buckets view. Available columns: 'Name', 'CreationDate',\n   * and 'Region'.\n   */\n  bucketsVisibleColumns?: ReadonlyArray<string>;\n\n  /**\n   * Optionally overrides the set of visible columns in the Objects view. Available columns: 'Key', 'LastModified',\n   * and 'Size'.\n   */\n  objectsVisibleColumns?: ReadonlyArray<string>;\n\n  /**\n   * Optionally overrides the set of visible columns in the Versions view. Available columns: 'ID', 'CreationDate',\n   * and 'Size'.\n   */\n  versionsVisibleColumns?: ReadonlyArray<string>;\n\n  /**\n   * Optionally overrides whether a bucket should be disabled for selection in the Buckets view or not.\n   * It has higher priority than `selectableItemsTypes`. Example: if `selectableItemsTypes` has `['buckets']` value and\n   * `bucketsIsItemDisabled` returns false for a bucket, then the bucket is disabled for selection.\n   */\n  bucketsIsItemDisabled?: (item: S3ResourceSelectorProps.Bucket) => boolean;\n\n  /**\n   * Optionally overrides whether an object should be disabled for selection in the Objects view or not. Similar to\n   * `bucketsIsItemDisabled` this property takes precedence over the `selectableItemsTypes` property.\n   */\n  objectsIsItemDisabled?: (item: S3ResourceSelectorProps.Object) => boolean;\n\n  /**\n   * Optionally overrides whether a version should be disabled for selection in the Versions view or not. Similar to\n   * `bucketsIsItemDisabled` this property takes precedence over the `selectableItemsTypes` property.\n   */\n  versionsIsItemDisabled?: (item: S3ResourceSelectorProps.Version) => boolean;\n\n  /**\n   * The current selected resource. Resource has the following properties:\n   * - `uri` (string) - URI of the resource.\n   * - `versionId` (string) - (Optional) Version ID of the selected resource.\n   */\n  resource: S3ResourceSelectorProps.Resource;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings?: S3ResourceSelectorProps.I18nStrings;\n\n  /**\n   * Specifies a function that returns all available buckets. The return type of the function should be a promise\n   * that resolves to a list of objects with the following properties:\n   * - `Name` (string) - Name of the bucket.\n   * - `CreationDate` (string) - (Optional) Creation date of the bucket.\n   * - `Region` (string) - (Optional) Region of the bucket.\n   */\n  fetchBuckets: () => Promise<ReadonlyArray<S3ResourceSelectorProps.Bucket>>;\n\n  /**\n   * Specifies a function that returns available objects and object prefixes for the given `bucketName` and `pathPrefix`.\n   * The return type of the function should be a promise that resolves to a list of objects with the following properties:\n   * - `Key` (string) - Name of the object or object prefix.\n   * - `LastModified` (string) - (Optional) Date when this object was last modified.\n   * - `Size` (number) - (Optional) Size of the object.\n   * - `IsFolder` (boolean) - (Optional)  Determines whether the entry is an object prefix (folder).\n   */\n  fetchObjects: (bucketName: string, pathPrefix: string) => Promise<ReadonlyArray<S3ResourceSelectorProps.Object>>;\n\n  /**\n   * Specifies a function that returns available versions for the given `bucketName` and `pathPrefix`.\n   * The return type of the function should be a promise that resolves to a list of versions with the following properties:\n   * - `VersionId` (string) - Version ID of an object.\n   * - `LastModified` (string) - (Optional) Date when this object was last modified.\n   * - `Size` (number) - (Optional) Size of the object version.\n   */\n  fetchVersions: (bucketName: string, pathPrefix: string) => Promise<ReadonlyArray<S3ResourceSelectorProps.Version>>;\n\n  /**\n   * Fired when the resource selection is changed. The event detail object contains resource that represents the full\n   * path of the selected resource and `errorText` that may contain a validation error.\n   */\n  onChange?: NonCancelableEventHandler<S3ResourceSelectorProps.ChangeDetail>;\n}\n\n// Does not use TableProps.AriaLabels, because here we do not need \"allItemsSelectionLabel\"\n// it is not applicable to single selection mode\ninterface SelectionLabels<T> {\n  itemSelectionLabel: (data: TableProps.SelectionState<T>, row: T) => string;\n  selectionGroupLabel: string;\n}\n\ntype SortingColumnContainingString = (columnName: string) => string;\n\nexport namespace S3ResourceSelectorProps {\n  export interface Bucket {\n    Name?: string;\n    CreationDate?: string;\n    // artificial field, does not exist on the real s3 response\n    Region?: string;\n  }\n  export interface Object {\n    Key?: string;\n    LastModified?: string;\n    Size?: number;\n    // artificial field, does not exist on the real s3 response\n    IsFolder?: boolean;\n  }\n  export interface Version {\n    VersionId?: string;\n    LastModified?: string;\n    Size?: number;\n  }\n\n  export interface Resource {\n    uri: string;\n    versionId?: string;\n  }\n\n  export type SelectableItems = 'buckets' | 'objects' | 'versions';\n\n  export interface I18nStrings {\n    inContextInputPlaceholder: string;\n    inContextSelectPlaceholder: string;\n    inContextBrowseButton: string;\n    inContextViewButton: string;\n    inContextLoadingText: string;\n    inContextUriLabel: string;\n    inContextVersionSelectLabel: string;\n\n    modalTitle: string;\n    modalCancelButton: string;\n    modalSubmitButton: string;\n    modalBreadcrumbRootItem: string;\n\n    selectionBuckets: string;\n    selectionObjects: string;\n    selectionVersions: string;\n    selectionBucketsSearchPlaceholder: string;\n    selectionObjectsSearchPlaceholder: string;\n    selectionVersionsSearchPlaceholder: string;\n    selectionBucketsLoading: string;\n    selectionBucketsNoItems: string;\n    selectionObjectsLoading: string;\n    selectionObjectsNoItems: string;\n    selectionVersionsLoading: string;\n    selectionVersionsNoItems: string;\n\n    filteringCounterText: (count: number) => string;\n    filteringNoMatches: string;\n    filteringCantFindMatch: string;\n    clearFilterButtonText: string;\n\n    columnBucketName: string;\n    columnBucketCreationDate?: string;\n    columnBucketRegion?: string;\n    columnObjectKey: string;\n    columnObjectLastModified?: string;\n    columnObjectSize?: string;\n    columnVersionID: string;\n    columnVersionLastModified: string;\n    columnVersionSize?: string;\n\n    validationPathMustBegin: string;\n    validationBucketLowerCase: string;\n    validationBucketMustNotContain: string;\n    validationBucketLength: string;\n    validationBucketMustComplyDns: string;\n\n    labelSortedDescending: SortingColumnContainingString;\n    labelSortedAscending: SortingColumnContainingString;\n    labelNotSorted: SortingColumnContainingString;\n    labelsPagination: PaginationProps.Labels;\n    labelsBucketsSelection: SelectionLabels<Bucket>;\n    labelsObjectsSelection: SelectionLabels<S3ResourceSelectorProps.Object>;\n    labelsVersionsSelection: SelectionLabels<Version>;\n    labelFiltering: (itemsType: string) => string;\n    labelRefresh: string;\n    labelModalDismiss: string;\n    labelBreadcrumbs: string;\n  }\n\n  export interface ChangeDetail {\n    resource: Resource;\n    errorText?: string;\n  }\n\n  export interface Ref {\n    /**\n     * Focuses the S3 URI input field\n     */\n    focus(): void;\n  }\n}\n"]}