{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-previous-frame/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAE1C;;;;;GAKG;AACH,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAI,KAAQ;IAC/C,IAAM,GAAG,GAAG,MAAM,EAAK,CAAC;IACxB,SAAS,CAAC;QACR,IAAM,MAAM,GAAG,qBAAqB,CAAC;YACnC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,OAAO,cAAM,OAAA,oBAAoB,CAAC,MAAM,CAAC,EAA5B,CAA4B,CAAC;IAC5C,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC,OAAO,CAAC;AACrB,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useEffect } from 'react';\n\n/**\n * This hook provides access to the value of any variable\n * from the previous render frame.\n * Even if multiple effects are flushed in a single render\n * loop, this hook still keeps the original value.\n */\nexport const usePreviousFrameValue = <T>(value: T) => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    const handle = requestAnimationFrame(() => {\n      ref.current = value;\n    });\n    return () => cancelAnimationFrame(handle);\n  });\n  return ref.current;\n};\n"]}