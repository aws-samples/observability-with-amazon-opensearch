{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-scroll-sync/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAc,EAAa,MAAM,EAAE,MAAM,OAAO,CAAC;AAEjD;;;;;;;GAOG;AACH,MAAM,UAAU,aAAa,CAAC,IAA2B,EAAE,QAAgB;IAAhB,yBAAA,EAAA,gBAAgB;IACzE,IAAM,aAAa,GAAG,MAAM,CAAqB,IAAI,CAAC,CAAC;IACvD,IAAM,QAAQ,GAAG,UAAC,KAAoB;QACpC,IAAM,aAAa,GAAG,KAAK,CAAC,MAAqB,CAAC;QAClD,0FAA0F;QAC1F,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,OAAO,KAAK,IAAI,IAAI,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,EAAE;YAChG,qBAAqB,CAAC;gBACpB,aAAa,CAAC,OAAO,GAAG,aAAa,CAAC;gBACtC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;oBACd,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;oBAC5B,IAAI,OAAO,IAAI,OAAO,KAAK,aAAa,EAAE;wBACxC,OAAO,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC;qBAC/C;gBACH,CAAC,CAAC,CAAC;gBACH,oDAAoD;gBACpD,qBAAqB,CAAC;oBACpB,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC/B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;AAC1C,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject, useRef } from 'react';\n\n/**\n * useScrollSync returns scroll event handler to be attached to synchronised scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\nexport function useScrollSync(refs: Array<RefObject<any>>, disabled = false) {\n  const activeElement = useRef<HTMLElement | null>(null);\n  const onScroll = (event: React.UIEvent) => {\n    const targetElement = event.target as HTMLElement;\n    // remembers the first element that fires onscroll to align with other elements against it\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(() => {\n        activeElement.current = targetElement;\n        refs.forEach(ref => {\n          const element = ref.current;\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        });\n        // unblock the ability to scroll the synced elements\n        requestAnimationFrame(() => {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n\n  return !disabled ? onScroll : undefined;\n}\n"]}