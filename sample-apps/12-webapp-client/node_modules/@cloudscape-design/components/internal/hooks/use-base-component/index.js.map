{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-base-component/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAoB,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC5D,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,MAAM,CAAC,IAAM,sBAAsB,GAAG,mBAAmB,CAAC;AAM1D;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAU,aAAqB;IACrE,IAAM,UAAU,GAAG,MAAM,CAAI,IAAI,CAAC,CAAC;IACnC,YAAY,CAAC,aAAa,CAAC,CAAC;IAC5B,oBAAoB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IAEhD,OAAO;QACL,iBAAiB,EAAE,UAAU;KAC9B,CAAC;AACJ,CAAC;AAED,SAAS,oBAAoB,CAAC,aAAqB,EAAE,UAAiC;IAUpF,SAAS,CAAC;QACR,IAAI,UAAU,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,sBAAsB,CAAC,EAAE;YAC3G,IAAM,IAAI,GAAG,UAAU,CAAC,OAA8B,CAAC;YACvD,IAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,eAAe;aACzB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACxB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE;gBAClD,KAAK,EAAE,QAAQ;gBACf,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;SACJ;QACD,yEAAyE;QACzE,2DAA2D;QAC3D,uDAAuD;IACzD,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { MutableRefObject, useEffect, useRef } from 'react';\nimport { useTelemetry } from '../use-telemetry';\nimport { PACKAGE_VERSION } from '../../environment';\n\nexport const COMPONENT_METADATA_KEY = '__awsuiMetadata__';\n\nexport interface InternalBaseComponentProps {\n  __internalRootRef?: MutableRefObject<any> | null;\n}\n\n/**\n * This hook is used for components which are exported to customers. The returned __internalRootRef needs to be\n * attached to the (internal) component's root DOM node. The hook takes care of attaching the metadata to this\n * root DOM node and emits the telemetry for this component.\n */\nexport default function useBaseComponent<T = any>(componentName: string) {\n  const elementRef = useRef<T>(null);\n  useTelemetry(componentName);\n  useComponentMetadata(componentName, elementRef);\n\n  return {\n    __internalRootRef: elementRef,\n  };\n}\n\nfunction useComponentMetadata(componentName: string, elementRef: MutableRefObject<any>) {\n  interface AwsUiMetadata {\n    name: string;\n    version: string;\n  }\n\n  interface HTMLMetadataElement extends HTMLElement {\n    [COMPONENT_METADATA_KEY]: AwsUiMetadata;\n  }\n\n  useEffect(() => {\n    if (elementRef.current && !Object.prototype.hasOwnProperty.call(elementRef.current, COMPONENT_METADATA_KEY)) {\n      const node = elementRef.current as HTMLMetadataElement;\n      const metadata = {\n        name: componentName,\n        version: PACKAGE_VERSION,\n      };\n\n      Object.freeze(metadata);\n      Object.defineProperty(node, COMPONENT_METADATA_KEY, {\n        value: metadata,\n        writable: false,\n      });\n    }\n    // Some component refs change dynamically. E.g. The Modal component where\n    // the content gets rendered conditionally inside a Portal.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef.current]);\n}\n"]}