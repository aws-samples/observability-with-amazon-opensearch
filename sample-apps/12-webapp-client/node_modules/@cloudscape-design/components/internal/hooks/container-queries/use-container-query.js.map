{"version":3,"file":"use-container-query.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/container-queries/use-container-query.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAE7D,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,iBAAiB,CAC/B,KAAwD,EACxD,IAA+B;IAA/B,qBAAA,EAAA,SAA+B;IAE/B,IAAM,UAAU,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IACvC,IAAA,KAAoB,QAAQ,CAAW,IAAI,CAAC,EAA3C,KAAK,QAAA,EAAE,QAAQ,QAA4B,CAAC;IAEnD,iEAAiE;IACjE,uDAAuD;IACvD,IAAM,UAAU,GAAG,WAAW,CAAC,cAAM,OAAA,UAAU,CAAC,OAAO,EAAlB,CAAkB,EAAE,IAAI,CAAC,CAAC;IAE/D,iBAAiB,CAAC,UAAU,EAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,UAAA,SAAS,IAAI,OAAA,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,EAAvB,CAAuB,CAAC,EAA9C,CAA8C,CAAC,CAAC;IAEvF,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState, useCallback } from 'react';\nimport { ContainerQueryEntry } from './interfaces';\nimport { useResizeObserver } from './use-resize-observer';\n\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * Examples:\n *    // Switching display mode under a given condition (only re-renders when mode changes):\n *    const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight]);\n *\n *    // Obtain observer entity (re-renders with each observation):\n *    const [entry, ref] = useContainerQuery(entry => entry);\n *\n *    // Using prevState to avoid unnecessary re-renders:\n *    const [value, ref] = useContainerQuery((entry, prevValue) => shouldUpdate(entry) ? getValue(entry) : prevValue);\n *\n * @param mapFn Function to convert ContainerQueryEntry to a custom type S\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of observation value and a reference to be attached to the target element.\n */\nexport function useContainerQuery<S>(\n  mapFn: (entry: ContainerQueryEntry, prev: null | S) => S,\n  deps: React.DependencyList = []\n): [null | S, React.Ref<any>] {\n  const elementRef = useRef<HTMLElement>(null);\n  const [state, setState] = useState<S | null>(null);\n\n  // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getElement = useCallback(() => elementRef.current, deps);\n\n  useResizeObserver(getElement, entry => setState(prevState => mapFn(entry, prevState)));\n\n  return [state, elementRef];\n}\n"]}