{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-singleton-handler/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AAMpD,MAAM,UAAU,sBAAsB,CAAI,OAAuD;IAC/F,IAAM,SAAS,GAA4B,EAAE,CAAC;IAC9C,IAAM,QAAQ,GAAqB,UAAA,KAAK;QACtC,uBAAuB,CAAC;YACtB,KAAuB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;gBAA7B,IAAM,QAAQ,kBAAA;gBACjB,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IACF,IAAI,OAAiC,CAAC;IAEtC,OAAO,SAAS,YAAY,CAAC,QAA0B;QACrD,SAAS,CAAC;YACR,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;aAC7B;YACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEzB,OAAO;gBACL,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC1B,OAAQ,EAAE,CAAC;oBACX,OAAO,GAAG,SAAS,CAAC;iBACrB;YACH,CAAC,CAAC;YACF,kCAAkC;YAClC,uDAAuD;QACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC;AACJ,CAAC;AAOD,MAAM,UAAU,oBAAoB,CAAI,EAAmD;QAAjD,OAAO,aAAA,EAAE,YAAY,kBAAA;IAC7D,IAAM,YAAY,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACrD,IAAI,KAAK,GAAG,YAAY,CAAC;IACzB,OAAO,SAAS,iBAAiB;QACzB,IAAA,KAAoB,QAAQ,CAAI,KAAK,CAAC,EAArC,KAAK,QAAA,EAAE,QAAQ,QAAsB,CAAC;QAC7C,YAAY,CAAC,UAAA,QAAQ;YACnB,KAAK,GAAG,QAAQ,CAAC;YACjB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\n\ntype ValueCallback<T> = (value: T) => void;\ntype CleanupCallback = () => void;\nexport type UseSingleton<T> = (listener: ValueCallback<T>) => void;\n\nexport function createSingletonHandler<T>(factory: (handler: ValueCallback<T>) => CleanupCallback): UseSingleton<T> {\n  const listeners: Array<ValueCallback<T>> = [];\n  const callback: ValueCallback<T> = value => {\n    unstable_batchedUpdates(() => {\n      for (const listener of listeners) {\n        listener(value);\n      }\n    });\n  };\n  let cleanup: (() => void) | undefined;\n\n  return function useSingleton(listener: ValueCallback<T>) {\n    useEffect(() => {\n      if (listeners.length === 0) {\n        cleanup = factory(callback);\n      }\n      listeners.push(listener);\n\n      return () => {\n        listeners.splice(listeners.indexOf(listener), 1);\n        if (listeners.length === 0) {\n          cleanup!();\n          cleanup = undefined;\n        }\n      };\n      // register handlers only on mount\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n  };\n}\n\ninterface SingletonStateOptions<T> {\n  factory: (handler: ValueCallback<T>) => CleanupCallback;\n  initialState: T | (() => T); // useState signature\n}\n\nexport function createSingletonState<T>({ factory, initialState }: SingletonStateOptions<T>) {\n  const useSingleton = createSingletonHandler(factory);\n  let value = initialState;\n  return function useSingletonState() {\n    const [state, setState] = useState<T>(value);\n    useSingleton(newValue => {\n      value = newValue;\n      setState(newValue);\n    });\n    return state;\n  };\n}\n"]}