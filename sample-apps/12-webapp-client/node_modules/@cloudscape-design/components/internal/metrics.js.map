{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../../../src/internal/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\n\nexport interface MetricsLogItem {\n  source: string;\n  action: string;\n  version: string;\n}\n\ninterface AWSC {\n  Clog: any;\n}\n\ninterface MetricsWindow extends Window {\n  AWSC?: AWSC;\n}\n\ndeclare const AWSUI_METRIC_ORIGIN: string | undefined;\n\nconst oneTimeMetrics: Record<string, boolean> = {};\n\nconst buildMetricHash = ({ source, action }: MetricsLogItem): string => {\n  return [`src${source}`, `action${action}`].join('_');\n};\n\nconst getMajorVersion = (versionString: string): string => {\n  const majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\n\nconst formatMajorVersionForMetricDetail = (version: string) => {\n  return version.replace(/\\s/g, '');\n};\n\nconst formatVersionForMetricName = (theme: string, version: string) => {\n  return `${theme.charAt(0)}${getMajorVersion(version).replace('.', '')}`;\n};\n\nconst buildMetricDetail = ({ source, action, version }: MetricsLogItem): string => {\n  const metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  const detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version),\n  };\n  return JSON.stringify(detailObject);\n};\n\nconst buildMetricName = ({ source, version }: MetricsLogItem): string => {\n  return ['awsui', source, `${formatVersionForMetricName(THEME, version)}`].join('_');\n};\n\nconst findAWSC = (currentWindow?: MetricsWindow): AWSC | undefined => {\n  try {\n    if (typeof currentWindow?.AWSC === 'object') {\n      return currentWindow?.AWSC;\n    }\n\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n};\n\n// react is the default framework we're logging, for angular we need to set it explicitly\nlet framework = 'react';\nfunction setFramework(fwk: string) {\n  framework = fwk;\n}\n\nexport const Metrics = {\n  initMetrics(fwk: string) {\n    setFramework(fwk);\n  },\n\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric(metricName: string, value: number, detail?: string): void {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(`Invalid metric name: ${metricName}`);\n      return;\n    }\n    if (detail && detail.length > 200) {\n      console.error(`Detail for metric ${metricName} is too long: ${detail}`);\n      return;\n    }\n    const AWSC = findAWSC(window);\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n\n  sendMetricObject(metric: MetricsLogItem, value: number): void {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n\n  sendMetricObjectOnce(metric: MetricsLogItem, value: number): void {\n    const metricHash = buildMetricHash(metric);\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce(metricName: string, value: number, detail?: string): void {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded() {\n    this.sendMetricObjectOnce(\n      {\n        source: 'components',\n        action: 'loaded',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed(componentName: string) {\n    this.sendMetricObjectOnce(\n      {\n        source: componentName,\n        action: 'used',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n};\n\nexport const MetricsTestHelper = {\n  resetOneTimeMetricsCache: () => {\n    for (const prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail,\n  formatVersionForMetricName,\n};\n"]}