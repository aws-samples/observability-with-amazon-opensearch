{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../src/internal/components/dropdown-status/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ReactNode } from 'react';\n\nexport interface DropdownStatusProps {\n  /**\n   * Displayed when there are no options to display.\n   * This is only shown when `statusType` is set to `finished` or not set at all.\n   */\n  empty?: ReactNode;\n  /**\n   * Specifies the text to display when in the loading state.\n   **/\n  loadingText?: string;\n  /**\n   * Specifies the text to display at the bottom of the dropdown menu after pagination has reached the end.\n   **/\n  finishedText?: string;\n  /**\n   * Specifies the text to display when a data fetching error occurs. Make sure that you provide `recoveryText`.\n   **/\n  errorText?: string;\n  /**\n   * Specifies the text for the recovery button. The text is displayed next to the error text.\n   * Use the `onLoadItems` event to perform a recovery action (for example, retrying the request).\n   **/\n  recoveryText?: string;\n  /**\n   * Specifies the current status of loading more options.\n   * * `pending` - Indicates that no request in progress, but more options may be loaded.\n   * * `loading` - Indicates that data fetching is in progress.\n   * * `finished` - Indicates that pagination has finished and no more requests are expected.\n   * * `error` - Indicates that an error occurred during fetch. You should use `recoveryText` to enable the user to recover.\n   **/\n  statusType?: DropdownStatusProps.StatusType;\n}\n\nexport namespace DropdownStatusProps {\n  export type StatusType = 'pending' | 'loading' | 'finished' | 'error';\n}\n"]}