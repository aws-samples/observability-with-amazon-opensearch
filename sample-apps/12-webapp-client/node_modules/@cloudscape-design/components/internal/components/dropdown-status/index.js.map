{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/components/dropdown-status/index.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAEtC,OAAO,YAAY,MAAM,wBAAwB,CAAC;AAElD,OAAO,uBAAuB,MAAM,oCAAoC,CAAC;AACzE,OAAO,EAA6B,sBAAsB,EAAE,MAAM,cAAc,CAAC;AACjF,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAGvD,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAiBrC,SAAS,cAAc,CAAC,EAA2C;QAAzC,QAAQ,cAAA;IAChC,OAAO,6BAAK,SAAS,EAAE,MAAM,CAAC,IAAI,IAAG,QAAQ,CAAO,CAAC;AACvD,CAAC;AAqBD,MAAM,CAAC,IAAM,iBAAiB,GAAsB,UAAC,EAWpD;QAVC,UAAU,gBAAA,EACV,KAAK,WAAA,EACL,WAAW,iBAAA,EACX,YAAY,kBAAA,EACZ,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,OAAO,aAAA,EACP,SAAS,eAAA,EACT,OAAO,aAAA,EACP,eAAe,qBAAA;IAEf,IAAM,OAAO,GAAG,MAAM,CAAuB,IAAI,CAAC,CAAC;IACnD,IAAM,iBAAiB,GAAG,sBAAM,OAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAA,EAAA,CAAC;IACzD,IAAM,kBAAkB,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IAEnD,IAAM,YAAY,GAAyB,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,iBAAiB,mBAAA,EAAE,CAAC;IAEhG,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,YAAY,CAAC,OAAO,GAAG,oBAAC,uBAAuB,IAAC,IAAI,EAAE,SAAS,IAAG,WAAW,CAA2B,CAAC;KAC1G;SAAM,IAAI,UAAU,KAAK,OAAO,EAAE;QACjC,YAAY,CAAC,OAAO,GAAG,CACrB;YACE,oBAAC,uBAAuB,IAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAE,kBAAkB,KAAK,OAAO,IAC5E,SAAS,CACc;YAAC,GAAG;YAC7B,YAAY,IAAI,CACf,oBAAC,YAAY,IACX,GAAG,EAAE,OAAO,EACZ,QAAQ,EAAE,cAAM,OAAA,sBAAsB,CAAC,eAAe,CAAC,EAAvC,CAAuC,EACvD,OAAO,EAAC,UAAU,EAClB,SAAS,EAAE,MAAM,CAAC,QAAQ,IAEzB,YAAY,CACA,CAChB,CACA,CACJ,CAAC;KACH;SAAM,IAAI,OAAO,IAAI,KAAK,EAAE;QAC3B,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;KAC9B;SAAM,IAAI,SAAS,IAAI,OAAO,EAAE;QAC/B,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;KAChC;SAAM,IAAI,UAAU,KAAK,UAAU,IAAI,YAAY,EAAE;QACpD,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC;QACpC,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC;KAC/B;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAEF,eAAe,cAAc,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { LinkProps } from '../../../link/interfaces';\nimport InternalLink from '../../../link/internal';\n\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\n\nimport { DropdownStatusProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport { DropdownStatusProps };\n\nexport interface DropdownStatusPropsExtended extends DropdownStatusProps {\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  noMatch?: React.ReactNode;\n  /**\n   * Called when the user clicks the recovery button placed at the\n   * bottom of the dropdown list in the error state. Use this to\n   * retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n}\n\nfunction DropdownStatus({ children }: { children: React.ReactNode }) {\n  return <div className={styles.root}>{children}</div>;\n}\n\ntype UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n}: DropdownStatusPropsExtended) => DropdownStatusResult;\n\ninterface DropdownStatusResult {\n  isSticky: boolean;\n  content: React.ReactNode | null;\n  focusRecoveryLink: () => void;\n}\n\nexport const useDropdownStatus: UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n}) => {\n  const linkRef = useRef<LinkProps.Ref | null>(null);\n  const focusRecoveryLink = () => linkRef.current?.focus();\n  const previousStatusType = usePrevious(statusType);\n\n  const statusResult: DropdownStatusResult = { isSticky: true, content: null, focusRecoveryLink };\n\n  if (statusType === 'loading') {\n    statusResult.content = <InternalStatusIndicator type={'loading'}>{loadingText}</InternalStatusIndicator>;\n  } else if (statusType === 'error') {\n    statusResult.content = (\n      <>\n        <InternalStatusIndicator type=\"error\" __animate={previousStatusType !== 'error'}>\n          {errorText}\n        </InternalStatusIndicator>{' '}\n        {recoveryText && (\n          <InternalLink\n            ref={linkRef}\n            onFollow={() => fireNonCancelableEvent(onRecoveryClick)}\n            variant=\"recovery\"\n            className={styles.recovery}\n          >\n            {recoveryText}\n          </InternalLink>\n        )}\n      </>\n    );\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\n\nexport default DropdownStatus;\n"]}