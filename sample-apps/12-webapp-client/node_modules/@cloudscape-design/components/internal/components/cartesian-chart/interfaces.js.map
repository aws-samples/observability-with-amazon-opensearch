{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../src/internal/components/cartesian-chart/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../../base-component';\nimport { NonCancelableEventHandler } from '../../events';\n\nexport interface CartesianChartProps<T extends ChartDataTypes, Series> extends BaseComponentProps {\n  /**\n   * Determines the type of scale for values on the x axis.\n   */\n  xScaleType?: ScaleType;\n\n  /**\n   * Determines the type of scale for values on the y axis.\n   */\n  yScaleType?: 'linear' | 'log';\n\n  /**\n   * Determines the domain of the x axis, i.e. the range of values that will be visible in the chart.\n   * For numerical and time-based data this is represented as an array with two values: `[minimumValue, maximumValue]`.\n   * For categorical data this is represented as an array of strings that determine the categories to display.\n   *\n   * It is recommended to set this explicitly. If not, the component will determine a domain that fits all data points.\n   * When controlling this directly, make sure to update the value based on filtering changes.\n   */\n  xDomain?: T extends unknown ? ReadonlyArray<T> : ReadonlyArray<T>;\n\n  /**\n   * Determines the domain of the y axis, i.e. the range of values that will be visible in the chart.\n   * The domain is defined by a tuple: `[minimumValue, maximumValue]`.\n   *\n   * It is recommended to set this explicitly. If not, the component will determine a domain that fits all data points.\n   * When controlling this directly, make sure to update the value based on filtering changes.\n   */\n  yDomain?: ReadonlyArray<number>;\n\n  /**\n   * The title of the x axis.\n   */\n  xTitle?: string;\n\n  /**\n   * The title of the y axis.\n   */\n  yTitle?: string;\n\n  /**\n   * Optional title for the legend.\n   */\n  legendTitle?: string;\n\n  /**\n   * ARIA label that is assigned to the chart itself. It should match the visible label on the page, e.g. in the container header.\n   * Do not use `ariaLabel` and `ariaLabelledby` at the same time.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Sets `aria-labelledby` on the chart itself.\n   * If there is a visible label for the chart on the page, e.g. in the container header, set this property to the ID of that header element.\n   * Do not use `ariaLabel` and `ariaLabelledby` at the same time.\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * A description of the chart that assistive technologies can use (through `aria-describedby`).\n   * Provide a concise summary of the data visualized in the chart.\n   */\n  ariaDescription?: string;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings?: CartesianChartProps.I18nStrings<T>;\n\n  /**\n   * An optional pixel value number that fixes the height of the chart area.\n   * If not set explicitly, the component will use a default height that is defined internally.\n   */\n  height?: number;\n\n  /**\n   * Determines the maximum width the detail popover will be limited to.\n   */\n  detailPopoverSize?: 'small' | 'medium' | 'large';\n\n  /**\n   * When set to `true`, the legend beneath the chart is not displayed.\n   * It is highly recommended to keep this set to `false`.\n   */\n  hideLegend?: boolean;\n\n  /**\n   * When set to `true`, the default filtering dropdown is not displayed.\n   * It is still possible to render additional filters with the `additionalFilters` slot.\n   */\n  hideFilter?: boolean;\n\n  /**\n   * Additional filters that are added above the chart component.\n   * Make sure to update the `data` property when any of your custom filters change the data to be displayed.\n   */\n  additionalFilters?: React.ReactNode;\n\n  /**\n   * The currently highlighted data series, usually through hovering over a series or the legend.\n   * A value of `null` means no series is highlighted.\n   *\n   * - If you do not set this property, series are highlighted automatically when hovering over one of the triggers (uncontrolled behavior).\n   * - If you explicitly set this property, you must set an `onHighlightChange` listener to update this property when a series should be highlighted (controlled behavior).\n   */\n  highlightedSeries?: Series | null;\n\n  /**\n   * An array of series objects that determines which of the data series are currently displayed, i.e. not filtered out.\n   * - If you do not set this property, series are shown and hidden automatically when using the default filter component (uncontrolled behavior).\n   * - If you explicitly set this property, you must set an `onFilterChange` listener to update this property when the visible series should change, or when one of your custom filters changes the number of visible series (controlled behavior).\n   */\n  visibleSeries?: ReadonlyArray<Series>;\n\n  /**\n   * Specifies the current status of loading data.\n   * * `loading`: data fetching is in progress.\n   * * `finished`: data has loaded successfully.\n   * * `error`: an error occurred during fetch. You should provide user an option to recover.\n   **/\n  statusType?: 'loading' | 'finished' | 'error';\n\n  /**\n   * Content that is displayed when the data passed to the component is empty.\n   */\n  empty?: React.ReactNode;\n\n  /**\n   * Content that is displayed when there is no data to display due to the built-in filtering.\n   */\n  noMatch?: React.ReactNode;\n\n  /**\n   * Text that is displayed when the chart is loading, i.e. when `statusType` is set to `\"loading\"`.\n   */\n  loadingText?: string;\n\n  /**\n   * Text that is displayed when the chart is in error state, i.e. when `statusType` is set to `\"error\"`.\n   */\n  errorText?: string;\n\n  /**\n   * Text for the recovery button that is displayed next to the error text.\n   **/\n  recoveryText?: string;\n\n  /**\n   * Called when the user clicks the recovery button that appears when there is an error state.\n   * Use this to enable the user to retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n\n  /**\n   * Called when the values of the internal filter component changed.\n   * This will **not** be called for any custom filter components you have defined in `additionalFilters`.\n   */\n  onFilterChange?: NonCancelableEventHandler<CartesianChartProps.FilterChangeDetail<Series>>;\n\n  /**\n   * Called when the highlighted series has changed because of user interaction.\n   */\n  onHighlightChange?: NonCancelableEventHandler<CartesianChartProps.HighlightChangeDetail<Series>>;\n}\n\nexport namespace CartesianChartProps {\n  export interface FilterChangeDetail<Series> {\n    visibleSeries: ReadonlyArray<Series>;\n  }\n\n  export interface HighlightChangeDetail<Series> {\n    highlightedSeries: Series | null;\n  }\n\n  export interface TickFormatter<T> {\n    (value: T): string;\n  }\n\n  export interface ValueFormatter<YType, XType = null> {\n    (yValue: YType, xValue: XType): string;\n  }\n\n  export interface I18nStrings<T> {\n    /** Visible label of the default filter */\n    filterLabel?: string;\n\n    /** Placeholder text of the default filter */\n    filterPlaceholder?: string;\n\n    /** ARIA label for the default filter which is appended to any option that is selected */\n    filterSelectedAriaLabel?: string;\n\n    /** ARIA label that is associated with the legend in case there is no visible `legendTitle` defined */\n    legendAriaLabel?: string;\n\n    /** ARIA label for details popover dismiss button */\n    detailPopoverDismissAriaLabel?: string;\n\n    /** Name of the ARIA role description of the chart, e.g. \"line chart\" */\n    chartAriaRoleDescription?: string;\n\n    /** Name of the ARIA role description of the x axis, e.g. \"x axis\" */\n    xAxisAriaRoleDescription?: string;\n\n    /** Name of the ARIA role description of the y axis, e.g. \"y axis\" */\n    yAxisAriaRoleDescription?: string;\n\n    /** Function to format the displayed label of an x axis tick. */\n    xTickFormatter?: TickFormatter<T>;\n\n    /** Function to format the displayed label of a y axis tick. */\n    yTickFormatter?: TickFormatter<number>;\n  }\n}\n\nexport type ChartDataTypes = number | string | Date;\n\nexport type ScaleType = 'linear' | 'log' | 'time' | 'categorical';\nexport type XScaleType = 'linear' | 'log' | 'time' | 'categorical';\nexport type YScaleType = 'linear' | 'log';\nexport type ScaleRange = [number, number];\n\nexport type ChartDomain<T extends ChartDataTypes> = T extends unknown ? ReadonlyArray<T> : ReadonlyArray<T>;\nexport type XDomain<T extends ChartDataTypes> = ChartDomain<T>;\nexport type YDomain = ChartDomain<number>;\n"]}