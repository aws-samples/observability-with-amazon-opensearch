{"version":3,"file":"keyboard-handler.js","sourceRoot":"","sources":["../../../../../src/internal/components/masked-input/keyboard-handler.ts"],"names":[],"mappings":"AASA;;;;;;;GAOG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAC9B,YAAoB,EACpB,MAAkB,EAClB,cAAsB,EACtB,YAAoB;IAEpB,IAAM,eAAe,GAAG,cAAc,KAAK,YAAY,CAAC;IACxD,IAAI,eAAe,EAAE;QACnB,IAAM,aAAa,GAAG,YAAY,KAAK,YAAY,CAAC,MAAM,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,MAAM,CAAC,uBAAuB,CAAC,YAAY,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;SACnF;QAED,OAAO;YACL,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC;YAC5C,QAAQ,EAAE,cAAc;SACzB,CAAC;KACH;IAED,IAAM,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC1D,IAAM,KAAK,GAAG,cAAc,KAAK,YAAY,CAAC,MAAM,CAAC;IAErD,IAAI,CAAC,KAAK,EAAE;QACV,IAAI,WAAW,EAAE;YACf,OAAO,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;SAC7D;aAAM;YACL,OAAO,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;SACzD;KACF;IAED,IAAI,WAAW,EAAE;QACf,OAAO;YACL,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;YAChD,QAAQ,EAAE,cAAc,GAAG,CAAC;SAC7B,CAAC;KACH;IAED,OAAO;QACL,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;QAChD,QAAQ,EAAE,cAAc,GAAG,CAAC;KAC7B,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,YAAoB,EACpB,GAAW,EACX,MAAkB,EAClB,cAAsB,EACtB,YAAoB;IAEpB,IAAI,KAAK,GAAG,YAAY,CAAC;IACzB,IAAM,QAAQ,GAAG,cAAc,CAAC;IAEhC,mDAAmD;IACnD,IAAI,cAAc,KAAK,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,YAAY,EAAE,EAAE;QAC7E,OAAO,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;KAC5B;IAED,sEAAsE;IACtE,IAAI,cAAc,KAAK,KAAK,CAAC,MAAM,IAAI,YAAY,KAAK,KAAK,CAAC,MAAM,EAAE;QACpE,IAAM,QAAQ,GAAG,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;QAClG,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KACzC;IAED,IAAI,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;QACxC,OAAO,EAAE,KAAK,OAAA,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC,EAAE,CAAC;KAC1C;IAED,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,KAAa,EAAE,MAAkB;IAC5D,IAAM,kBAAkB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACtD,IAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC3C,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,QAAQ,UAAA,EAAE,CAAC;AACjD,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport MaskFormat from './utils/mask-format';\n\nexport interface HandlerResult {\n  position: number;\n  value: string;\n}\n\n/**\n * Handles character removal\n *\n * @param initialValue Current value of input\n * @param format MaskFormat object\n * @param selectionStart Starting index value of selection cursor\n * @param selectionEnd Ending Index value of selection cursor\n */\nexport const backspaceHandler = (\n  initialValue: string,\n  format: MaskFormat,\n  selectionStart: number,\n  selectionEnd: number\n): HandlerResult => {\n  const multiCharDelete = selectionStart !== selectionEnd;\n  if (multiCharDelete) {\n    const isCursorAtEnd = selectionEnd === initialValue.length;\n    if (!isCursorAtEnd) {\n      return format.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);\n    }\n\n    return {\n      value: initialValue.slice(0, selectionStart),\n      position: selectionStart,\n    };\n  }\n\n  const isSeparator = format.isSegmentStart(selectionStart);\n  const atEnd = selectionStart === initialValue.length;\n\n  if (!atEnd) {\n    if (isSeparator) {\n      return format.deleteSeparator(initialValue, selectionStart);\n    } else {\n      return format.deleteDigit(initialValue, selectionStart);\n    }\n  }\n\n  if (isSeparator) {\n    return {\n      value: initialValue.slice(0, selectionStart - 2),\n      position: selectionStart - 2,\n    };\n  }\n\n  return {\n    value: initialValue.slice(0, selectionStart - 1),\n    position: selectionStart - 1,\n  };\n};\n\n/**\n * Handle key down events\n *\n * @param initialValue Current value of input\n * @param key Key that was pressed\n * @param format MaskFormat object\n * @param selectionStart Starting index value of selection cursor\n * @param selectionEnd Ending Index value of selection cursor\n */\nexport const keyHandler = (\n  initialValue: string,\n  key: string,\n  format: MaskFormat,\n  selectionStart: number,\n  selectionEnd: number\n): HandlerResult => {\n  let value = initialValue;\n  const position = selectionStart;\n\n  // return if no more digits can be added at the end\n  if (selectionStart === value.length && value.length === format.getMaxLength()) {\n    return { value, position };\n  }\n\n  // if range is selected to the end, remove all of that selection first\n  if (selectionStart !== value.length && selectionEnd === value.length) {\n    const sliceEnd = format.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;\n    value = initialValue.slice(0, sliceEnd);\n  }\n\n  if (format.isCursorAtSeparator(position)) {\n    return { value, position: position + 1 };\n  }\n\n  return format.processKey(value, key, position);\n};\n\nexport const enterHandler = (value: string, format: MaskFormat): HandlerResult => {\n  const autoCompletedValue = format.autoComplete(value);\n  const position = autoCompletedValue.length;\n  return { value: autoCompletedValue, position };\n};\n"]}