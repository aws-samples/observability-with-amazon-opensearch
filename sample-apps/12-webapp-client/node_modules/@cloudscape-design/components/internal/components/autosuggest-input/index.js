// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { __assign, __rest } from "tslib";
import React, { useRef, useState, useImperativeHandle, useEffect } from 'react';
import Dropdown from '../dropdown';
import { useFormFieldContext } from '../../context/form-field-context';
import { getBaseProps } from '../../base-component';
import { fireCancelableEvent, fireNonCancelableEvent, getBlurEventRelatedTarget, } from '../../events';
import InternalInput from '../../../input/internal';
import { getFocusables } from '../focus-lock/utils';
import { KeyCode } from '../../keycode';
import styles from './styles.css.js';
import clsx from 'clsx';
var AutosuggestInput = React.forwardRef(function (_a, ref) {
    var value = _a.value, onChange = _a.onChange, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyUp = _a.onKeyUp, onKeyDown = _a.onKeyDown, name = _a.name, placeholder = _a.placeholder, disabled = _a.disabled, readOnly = _a.readOnly, autoFocus = _a.autoFocus, ariaLabel = _a.ariaLabel, ariaRequired = _a.ariaRequired, _b = _a.disableBrowserAutocorrect, disableBrowserAutocorrect = _b === void 0 ? false : _b, expandToViewport = _a.expandToViewport, ariaControls = _a.ariaControls, ariaActivedescendant = _a.ariaActivedescendant, dropdownExpanded = _a.dropdownExpanded, dropdownContentKey = _a.dropdownContentKey, _c = _a.dropdownContent, dropdownContent = _c === void 0 ? null : _c, _d = _a.dropdownFooter, dropdownFooter = _d === void 0 ? null : _d, dropdownWidth = _a.dropdownWidth, onDropdownMouseDown = _a.onDropdownMouseDown, onCloseDropdown = _a.onCloseDropdown, onDelayedInput = _a.onDelayedInput, onPressArrowDown = _a.onPressArrowDown, onPressArrowUp = _a.onPressArrowUp, onPressEnter = _a.onPressEnter, __internalRootRef = _a.__internalRootRef, restProps = __rest(_a, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onKeyDown", "name", "placeholder", "disabled", "readOnly", "autoFocus", "ariaLabel", "ariaRequired", "disableBrowserAutocorrect", "expandToViewport", "ariaControls", "ariaActivedescendant", "dropdownExpanded", "dropdownContentKey", "dropdownContent", "dropdownFooter", "dropdownWidth", "onDropdownMouseDown", "onCloseDropdown", "onDelayedInput", "onPressArrowDown", "onPressArrowUp", "onPressEnter", "__internalRootRef"]);
    var baseProps = getBaseProps(restProps);
    var formFieldContext = useFormFieldContext(restProps);
    var inputRef = useRef(null);
    var dropdownContentRef = useRef(null);
    var dropdownFooterRef = useRef(null);
    var preventOpenOnFocusRef = useRef(false);
    var _e = useState(false), open = _e[0], setOpen = _e[1];
    var openDropdown = function () { return !readOnly && setOpen(true); };
    var closeDropdown = function () {
        setOpen(false);
        fireNonCancelableEvent(onCloseDropdown, null);
    };
    useImperativeHandle(ref, function () { return ({
        focus: function (options) {
            var _a;
            if (options === null || options === void 0 ? void 0 : options.preventDropdown) {
                preventOpenOnFocusRef.current = true;
            }
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        },
        select: function () {
            var _a;
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.select();
        },
        open: openDropdown,
        close: closeDropdown
    }); });
    var handleBlur = function (event) {
        var _a, _b;
        var relatedTarget = getBlurEventRelatedTarget(event.nativeEvent);
        if (event.currentTarget.contains(relatedTarget) ||
            ((_a = dropdownContentRef.current) === null || _a === void 0 ? void 0 : _a.contains(relatedTarget)) ||
            ((_b = dropdownFooterRef.current) === null || _b === void 0 ? void 0 : _b.contains(relatedTarget))) {
            return;
        }
        closeDropdown();
        fireNonCancelableEvent(onBlur, null);
    };
    var handleFocus = function () {
        if (!preventOpenOnFocusRef.current) {
            openDropdown();
            fireNonCancelableEvent(onFocus, null);
        }
        preventOpenOnFocusRef.current = false;
    };
    var handleKeyDown = function (e) {
        switch (e.detail.keyCode) {
            case KeyCode.down: {
                onPressArrowDown === null || onPressArrowDown === void 0 ? void 0 : onPressArrowDown();
                openDropdown();
                e.preventDefault();
                break;
            }
            case KeyCode.up: {
                onPressArrowUp === null || onPressArrowUp === void 0 ? void 0 : onPressArrowUp();
                openDropdown();
                e.preventDefault();
                break;
            }
            case KeyCode.enter: {
                if (open) {
                    if (!(onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter())) {
                        closeDropdown();
                    }
                    e.preventDefault();
                }
                fireCancelableEvent(onKeyDown, e.detail);
                break;
            }
            case KeyCode.escape: {
                if (open) {
                    closeDropdown();
                }
                else if (value) {
                    fireNonCancelableEvent(onChange, { value: '' });
                }
                e.preventDefault();
                fireCancelableEvent(onKeyDown, e.detail);
                break;
            }
            default: {
                fireCancelableEvent(onKeyDown, e.detail);
            }
        }
    };
    var handleChange = function (value) {
        openDropdown();
        fireNonCancelableEvent(onChange, { value: value });
    };
    var handleDelayedInput = function (value) {
        fireNonCancelableEvent(onDelayedInput, { value: value });
    };
    var expanded = open && (dropdownExpanded !== null && dropdownExpanded !== void 0 ? dropdownExpanded : !!dropdownContent);
    var nativeAttributes = {
        name: name,
        placeholder: placeholder,
        autoFocus: autoFocus,
        onClick: openDropdown,
        role: 'combobox',
        'aria-autocomplete': 'list',
        'aria-expanded': expanded,
        'aria-controls': ariaControls,
        // 'aria-owns' needed for safari+vo to announce activedescendant content
        'aria-owns': ariaControls,
        'aria-label': ariaLabel,
        'aria-activedescendant': ariaActivedescendant
    };
    var _f = useState(false), trapDropdownFocus = _f[0], setTrapDropdownFocus = _f[1];
    // Run this effect on every render to determine if necessary to trap focus around input and dropdown.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useEffect(function () {
        setTrapDropdownFocus((dropdownFooterRef.current ? getFocusables(dropdownFooterRef.current).length > 0 : false) ||
            (dropdownContentRef.current ? getFocusables(dropdownContentRef.current).length > 0 : false));
    });
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(baseProps.className, styles.root), ref: __internalRootRef, onBlur: handleBlur }),
        React.createElement(Dropdown, { minWidth: dropdownWidth, stretchWidth: !dropdownWidth, contentKey: dropdownContentKey, trigger: React.createElement(InternalInput, __assign({ type: "search", value: value, onChange: function (event) { return handleChange(event.detail.value); }, __onDelayedInput: function (event) { return handleDelayedInput(event.detail.value); }, onFocus: handleFocus, onKeyDown: handleKeyDown, onKeyUp: onKeyUp, disabled: disabled, disableBrowserAutocorrect: disableBrowserAutocorrect, readOnly: readOnly, ariaRequired: ariaRequired, ref: inputRef, autoComplete: false, __nativeAttributes: nativeAttributes }, formFieldContext)), onMouseDown: onDropdownMouseDown, open: open, footer: dropdownFooterRef && (React.createElement("div", { ref: dropdownFooterRef, className: styles['dropdown-footer'] }, dropdownFooter)), expandToViewport: expandToViewport, hasContent: expanded, trapFocus: trapDropdownFocus },
            React.createElement("div", { ref: dropdownContentRef, className: styles['dropdown-content'] }, open && dropdownContent))));
});
export default AutosuggestInput;
//# sourceMappingURL=index.js.map