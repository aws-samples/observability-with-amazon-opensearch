{"version":3,"file":"application-controller.js","sourceRoot":"","sources":["../../../../../src/internal/components/chart-plot/application-controller.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport focusSvgElement from '../../utils/focus-svg-element';\nimport styles from './styles.css.js';\n\nexport interface ApplicationRef {\n  focus(): void;\n}\n\nexport interface ApplicationControllerProps {\n  activeElementKey: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  onFocus?: (event: React.FocusEvent<SVGGElement>) => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n}\n\nexport default forwardRef(ApplicationController);\n\nfunction ApplicationController(\n  { activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }: ApplicationControllerProps,\n  ref: React.Ref<ApplicationRef>\n) {\n  const containerRef = useRef<SVGGElement>(null);\n  const applicationRef = useRef<SVGGElement>(null);\n  const focusTransitionRef = useRef(false);\n  const [isFocused, setFocused] = useState(false);\n\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  const onApplicationFocus = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(true);\n        onFocus && onFocus(event);\n      } else {\n        focusTransitionRef.current = false;\n      }\n    },\n    [onFocus]\n  );\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  const onApplicationBlur = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(false);\n        onBlur && onBlur(event);\n        // The application controller can only be focused programmatically.\n        muteApplication(applicationRef.current!);\n      }\n    },\n    [onBlur]\n  );\n  const onApplicationKeyDown = onKeyDown;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => focusApplication(applicationRef.current!, activeElementRef?.current || null),\n    }),\n    [activeElementRef]\n  );\n\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(() => {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    const timeoutId = setTimeout(() => {\n      focusTransitionRef.current = true;\n      containerRef.current!.removeChild(applicationRef.current!);\n      containerRef.current!.appendChild(applicationRef.current!);\n      focusApplication(applicationRef.current!, activeElementRef?.current || null);\n    }, 0);\n\n    return () => clearTimeout(timeoutId);\n  }, [isFocused, activeElementKey, activeElementRef]);\n\n  return (\n    <g ref={containerRef}>\n      <g\n        focusable={false}\n        tabIndex={-1}\n        ref={applicationRef}\n        onFocus={onApplicationFocus}\n        onBlur={onApplicationBlur}\n        onKeyDown={onApplicationKeyDown}\n        className={styles.application}\n      ></g>\n    </g>\n  );\n}\n\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app: SVGGElement, target: null | SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Copy new attributes.\n  if (target) {\n    for (const attributeName of getAttributeNames(target)) {\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        const attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  }\n\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n\n  // Focus app.\n  focusSvgElement(app);\n}\n\n// The application is to be only focused programmatically.\nfunction muteApplication(app: SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Make app non-focusable.\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element: Element) {\n  const attributes = element.attributes;\n  const result = new Array(attributes.length);\n  for (let i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}\n"]}