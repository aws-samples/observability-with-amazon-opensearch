{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../src/internal/components/dropdown/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { NonCancelableEventHandler } from '../../events';\nimport React from 'react';\n\nexport type OptionsFilteringType = 'none' | 'auto' | 'manual';\nexport interface OptionsLoadItemsDetail {\n  filteringText: string;\n  firstPage: boolean;\n  samePage: boolean;\n}\n\nexport interface BaseDropdownHostProps extends ExpandToViewport {\n  /**\n   * If you have more than 500 options, enable this flag to apply a performance optimization\n   * that makes the filtering experience smoother. We don't recommend enabling the feature if you\n   * have less than 500 options, because the improvements to performance are offset by a\n   * visible scrolling lag.\n   *\n   * When you set this flag to `true`, it removes options that are not currently in view from the DOM.\n   * If your test accesses such options, you need to first scroll the options container\n   * to the correct offset, before performing any operations on them. Use the element returned\n   * by the `findOptionsContainer` test utility for this.\n   */\n  virtualScroll?: boolean;\n\n  /**\n   * Use this event to implement the asynchronous behavior for the component.\n   *\n   * The event is called in the following situations:\n   * * The user scrolls to the end of the list of options, if `statusType` is set to `pending`.\n   * * The user clicks on the recovery button in the error state.\n   * * The user types inside the input field.\n   * * The user focuses the input field.\n   *\n   * The detail object contains the following properties:\n   * * `filteringText` - The value that you need to use to fetch options.\n   * * `firstPage` - Indicates that you should fetch the first page of options that match the `filteringText`.\n   * * `samePage` - Indicates that you should fetch the same page that you have previously fetched (for example, when the user clicks on the recovery button).\n   **/\n  onLoadItems?: NonCancelableEventHandler<OptionsLoadItemsDetail>;\n}\n\nexport interface DropdownProps extends ExpandToViewport {\n  /**\n   * Trigger element.\n   */\n  trigger: React.ReactNode;\n  /**\n   * \"Sticky\" header of the dropdown content\n   */\n  header?: React.ReactNode;\n  /**\n   * Footer slot fixed at the bottom of the dropdown\n   */\n  footer?: React.ReactNode;\n  /**\n   * Dropdown content elements.\n   */\n  children?: React.ReactNode;\n  /**\n   * Open state of the dropdown.\n   */\n  open?: boolean;\n  /**\n   * Called when a user clicks outside of the dropdown content, when it is open.\n   */\n  onDropdownClose?: NonCancelableEventHandler<null>;\n  /**\n   * Called when a mouse button is pressed inside the dropdown content.\n   */\n  onMouseDown?: React.MouseEventHandler;\n  /**\n   * Dropdown id\n   */\n  dropdownId?: string;\n  /**\n   * Stretches dropdown to occupy entire width.\n   */\n  stretchWidth?: boolean;\n  /**\n   * Stretches dropdown to occupy entire height.\n   */\n  stretchHeight?: boolean;\n\n  /**\n   * Stretches the trigger to the height of the dropdown container.\n   */\n  stretchTriggerHeight?: boolean;\n\n  /**\n   * Whether the dropdown content should be at least as wide as the trigger.\n   *\n   * @defaultValue true\n   */\n  stretchToTriggerWidth?: boolean;\n\n  /**\n   * Determines that the dropdown should preferably be aligned to the center of the trigger\n   * instead of dropping left or right.\n   */\n  preferCenter?: boolean;\n\n  /**\n   * Indicates if this dropdown lies within a parent dropdown and positions itself relative to it (as a fly out).\n   */\n  interior?: boolean;\n  /**\n   * Sets the min width of the dropdown (in px)\n   */\n  minWidth?: number;\n  /**\n   * Whether there are items in the dropdown vs. an empty list\n   */\n  hasContent?: boolean;\n  /**\n   * Whether the dropdown will have a scrollbar or not\n   */\n  scrollable?: boolean;\n}\n\nexport interface ExpandToViewport {\n  /**\n   * Enabling this property will allow the dropdown to extend beyond its parent by using fixed positioning and\n   * [React Portals](https://reactjs.org/docs/portals.html).\n   * If you want the dropdown to ignore the `overflow` CSS property of its parents,\n   * such as in a split view layout, enable this property.\n   * However, use discretion. If you don't need to, we recommend you don't enable this property because fixed positioning results\n   * in a slight, visible lag when scrolling complex pages.\n   */\n  expandToViewport?: boolean;\n}\n"]}