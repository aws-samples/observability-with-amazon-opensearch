{"version":3,"file":"highlight-match.js","sourceRoot":"","sources":["../../../../../src/internal/components/option/highlight-match.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,IAAM,gBAAgB,GAAG,UAAC,GAAW,EAAE,aAAqB;IAC1D,yCAAyC;IACzC,IAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IAChF,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAClD,IAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAElC,OAAO,EAAE,SAAS,WAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AAChC,CAAC,CAAC;AAOF,IAAM,SAAS,GAAG,UAAC,EAA4B;QAA1B,GAAG,SAAA;IACtB,OAAA,GAAG,CAAC,CAAC,CAAC,8BAAM,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC,IAAG,GAAG,CAAQ,CAAC,CAAC,CAAC,IAAI;AAArF,CAAqF,CAAC;AAExF,MAAM,CAAC,OAAO,UAAU,cAAc,CAAC,EAA2C;QAAzC,GAAG,SAAA,EAAE,aAAa,mBAAA;IACzD,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE;QAC1B,OAAO,0CAAG,GAAG,CAAI,CAAC;KACnB;IAED,IAAI,GAAG,KAAK,aAAa,EAAE;QACzB,OAAO,oBAAC,SAAS,IAAC,GAAG,EAAE,GAAG,GAAI,CAAC;KAChC;IAEK,IAAA,KAAyB,gBAAgB,CAAC,GAAG,EAAE,aAAa,CAAC,EAA3D,SAAS,eAAA,EAAE,OAAO,aAAyC,CAAC;IAEpE,IAAM,WAAW,GAA6B,EAAE,CAAC;IAEjD,SAAS,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,GAAG;QAC7B,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1B,IAAI,OAAO,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE;YACnC,WAAW,CAAC,IAAI,CAAC,oBAAC,SAAS,IAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;SAC9D;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,kCAAO,WAAW,CAAQ,CAAC;AACpC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\n\nconst splitOnFiltering = (str: string, highlightText: string) => {\n  // Filtering needs to be case insensitive\n  const filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  const regexp = new RegExp(filteringPattern, 'gi');\n  const noMatches = str.split(regexp);\n  const matches = str.match(regexp);\n\n  return { noMatches, matches };\n};\n\nexport interface HighlightMatchProps {\n  str?: string;\n  highlightText?: string;\n}\n\nconst Highlight = ({ str }: HighlightMatchProps) =>\n  str ? <span className={clsx(styles['filtering-match-highlight'])}>{str}</span> : null;\n\nexport default function HighlightMatch({ str, highlightText }: HighlightMatchProps) {\n  if (!str || !highlightText) {\n    return <>{str}</>;\n  }\n\n  if (str === highlightText) {\n    return <Highlight str={str} />;\n  }\n\n  const { noMatches, matches } = splitOnFiltering(str, highlightText);\n\n  const highlighted: (string | JSX.Element)[] = [];\n\n  noMatches.forEach((noMatch, idx) => {\n    highlighted.push(noMatch);\n\n    if (matches && idx < matches.length) {\n      highlighted.push(<Highlight key={idx} str={matches[idx]} />);\n    }\n  });\n\n  return <span>{highlighted}</span>;\n}\n"]}