// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import clsx from 'clsx';
import React, { useRef, memo, useState } from 'react';
import LiveRegion from '../live-region';
import InternalBox from '../../../box/internal';
import { KeyCode } from '../../keycode';
import SeriesMarker from '../chart-series-marker';
import styles from './styles.css.js';
export default memo(ChartLegend);
function ChartLegend(_a) {
    var series = _a.series, onHighlightChange = _a.onHighlightChange, highlightedSeries = _a.highlightedSeries, legendTitle = _a.legendTitle, ariaLabel = _a.ariaLabel, plotContainerRef = _a.plotContainerRef;
    var _b = useState(false), isFocused = _b[0], setIsFocused = _b[1];
    var containerRef = useRef(null);
    var highlightLeft = function () {
        var currentIndex = findSeriesIndex(series, highlightedSeries) || 0;
        var nextIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : series.length - 1;
        onHighlightChange(series[nextIndex].datum);
    };
    var highlightRight = function () {
        var currentIndex = findSeriesIndex(series, highlightedSeries) || 0;
        var nextIndex = currentIndex + 1 < series.length ? currentIndex + 1 : 0;
        onHighlightChange(series[nextIndex].datum);
    };
    var handleKeyPress = function (event) {
        if (event.keyCode === KeyCode.right || event.keyCode === KeyCode.left) {
            // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.
            event.preventDefault();
            switch (event.keyCode) {
                case KeyCode.left:
                    return highlightLeft();
                case KeyCode.right:
                    return highlightRight();
                default:
                    return;
            }
        }
    };
    var handleFocus = function () {
        setIsFocused(true);
        onHighlightChange(highlightedSeries || series[0].datum);
    };
    var handleBlur = function (event) {
        var _a;
        setIsFocused(false);
        // We need to check if the next element to be focused inside the plot container or not
        // so we don't clear the selected legend in case we are still focusing elements ( legend elements )
        // inside the plot container
        if (event.relatedTarget === null ||
            !(event.relatedTarget instanceof Element) ||
            (containerRef.current &&
                !containerRef.current.contains(event.relatedTarget) &&
                !((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget)))) {
            onHighlightChange(null);
        }
    };
    var handleMouseOver = function (s) {
        if (s !== highlightedSeries) {
            onHighlightChange(s);
        }
    };
    var handleMouseLeave = function () {
        onHighlightChange(null);
    };
    var highlightedSeriesLabel = findSeriesLabel(series, highlightedSeries);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { tabIndex: 0, className: styles.root, ref: containerRef, role: "application", "aria-label": legendTitle || ariaLabel, onKeyDown: handleKeyPress, onFocus: handleFocus, onBlur: handleBlur },
            legendTitle && (React.createElement(InternalBox, { fontWeight: "bold", className: styles.title }, legendTitle)),
            React.createElement("ul", { className: styles.list }, series.map(function (s, index) {
                var _a;
                var someHighlighted = highlightedSeries !== null;
                var isHighlighted = highlightedSeries === s.datum;
                var isDimmed = someHighlighted && !isHighlighted;
                return (React.createElement("li", { key: index, onMouseOver: handleMouseOver.bind(null, s.datum), onMouseLeave: handleMouseLeave, className: clsx(styles.marker, (_a = {},
                        _a[styles['marker--dimmed']] = isDimmed,
                        _a[styles['marker--highlighted']] = isHighlighted,
                        _a[styles['marker--focused']] = isHighlighted && isFocused,
                        _a)), "aria-disabled": isDimmed ? true : undefined },
                    React.createElement(SeriesMarker, { color: s.color, type: s.type }),
                    " ",
                    s.label));
            }))),
        React.createElement(LiveRegion, null, isFocused ? highlightedSeriesLabel : null)));
}
function findSeriesIndex(series, targetSeries) {
    for (var index = 0; index < series.length; index++) {
        if (series[index].datum === targetSeries) {
            return index;
        }
    }
    return undefined;
}
function findSeriesLabel(series, targetSeries) {
    for (var _i = 0, series_1 = series; _i < series_1.length; _i++) {
        var s = series_1[_i];
        if (s.datum === targetSeries) {
            return s.label;
        }
    }
    return null;
}
//# sourceMappingURL=index.js.map