{"version":3,"file":"split-panel-context.js","sourceRoot":"","sources":["../../../../src/internal/context/split-panel-context.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAc,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,OAAO,CAAC;AAsCzD,MAAM,CAAC,IAAM,iBAAiB,GAAG,aAAa,CAAyB;IACrE,SAAS,EAAE,CAAC;IACZ,YAAY,EAAE,CAAC;IACf,UAAU,EAAE,CAAC;IACb,WAAW,EAAE,CAAC;IACd,QAAQ,EAAE,QAAQ;IAClB,IAAI,EAAE,CAAC;IACP,WAAW,EAAE,cAAM,OAAA,CAAC,EAAD,CAAC;IACpB,YAAY,EAAE,cAAM,OAAA,CAAC,EAAD,CAAC;IACrB,SAAS,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IACrB,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,KAAK;IACf,SAAS,EAAE,KAAK;IAChB,gBAAgB,EAAE,KAAK;IACvB,eAAe,EAAE,SAAS;IAC1B,aAAa,EAAE,SAAS;IACxB,mBAAmB,EAAE,SAAS;IAC9B,QAAQ,EAAE,cAAO,CAAC;IAClB,QAAQ,EAAE,cAAO,CAAC;IAClB,mBAAmB,EAAE,cAAO,CAAC;IAC7B,UAAU,EAAE,cAAO,CAAC;CACrB,CAAC,CAAC;AAEH,MAAM,UAAU,oBAAoB;IAClC,OAAO,UAAU,CAAC,iBAAiB,CAAC,CAAC;AACvC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, createContext } from 'react';\n\nexport type SplitPanelLastInteraction = { type: 'open' } | { type: 'close' } | { type: 'position' };\n\nexport interface SplitPanelContextProps {\n  topOffset: number;\n  bottomOffset: number;\n  leftOffset: number;\n  rightOffset: number;\n  position: 'side' | 'bottom';\n  size: number;\n  getMaxWidth: () => number;\n  getMaxHeight: () => number;\n  getHeader: () => HTMLElement | null;\n  disableContentPaddings?: boolean;\n  contentWidthStyles?: React.CSSProperties;\n  contentWrapperPaddings?: {\n    closedNav: boolean;\n    closedTools: boolean;\n  };\n  isCopy?: boolean;\n  isOpen?: boolean;\n  isMobile: boolean;\n  isRefresh: boolean;\n  isForcedPosition: boolean;\n  // The lastInteraction property indicates last meaningful state transition used to trigger split-panel effects.\n  // We can't observe properties in a regular way because split-panel is being mounted in several places at once.\n  lastInteraction?: SplitPanelLastInteraction;\n  splitPanelRef?: React.Ref<any>;\n  splitPanelHeaderRef?: React.Ref<any>;\n  onResize: (detail: { size: number }) => void;\n  onToggle: () => void;\n  onPreferencesChange: (detail: { position: 'side' | 'bottom' }) => void;\n  reportSize: (pixels: number) => void;\n  openButtonAriaLabel?: string;\n  setOpenButtonAriaLabel?: (value: string) => void;\n}\n\nexport const SplitPanelContext = createContext<SplitPanelContextProps>({\n  topOffset: 0,\n  bottomOffset: 0,\n  leftOffset: 0,\n  rightOffset: 0,\n  position: 'bottom',\n  size: 0,\n  getMaxWidth: () => 0,\n  getMaxHeight: () => 0,\n  getHeader: () => null,\n  isCopy: false,\n  isOpen: true,\n  isMobile: false,\n  isRefresh: false,\n  isForcedPosition: false,\n  lastInteraction: undefined,\n  splitPanelRef: undefined,\n  splitPanelHeaderRef: undefined,\n  onResize: () => {},\n  onToggle: () => {},\n  onPreferencesChange: () => {},\n  reportSize: () => {},\n});\n\nexport function useSplitPanelContext() {\n  return useContext(SplitPanelContext);\n}\n"]}