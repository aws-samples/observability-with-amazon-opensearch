{"version":3,"file":"promises.js","sourceRoot":"","sources":["../../../../src/internal/utils/promises.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC;IAAA;IAAqC,CAAC;IAAD,6BAAC;AAAD,CAAC,AAAtC,IAAsC;;AAEtC;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAAI,OAAmB;IAKpD,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAC1B,UAAA,KAAK;QACH,IAAI,SAAS,EAAE;YACb,MAAM,IAAI,sBAAsB,EAAE,CAAC;SACpC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EACD,UAAA,GAAG;QACD,IAAI,SAAS,EAAE;YACb,MAAM,IAAI,sBAAsB,EAAE,CAAC;SACpC;QACD,MAAM,GAAG,CAAC;IACZ,CAAC,CACF,CAAC;IAEF,OAAO;QACL,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE;YACN,SAAS,GAAG,IAAI,CAAC;QACnB,CAAC;QACD,WAAW,EAAE,cAAM,OAAA,SAAS,EAAT,CAAS;KAC7B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport class PromiseCancelledSignal {}\n\n/**\n * Wrap and provide a handle for a promise to provide cancellation information inside\n * callbacks. Takes a similar approach to how an AbortController works in modern fetch.\n *\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancellable<T>(promise: Promise<T>): {\n  promise: Promise<T>;\n  cancel: () => void;\n  isCancelled: () => boolean;\n} {\n  let cancelled = false;\n  const wrapped = promise.then(\n    value => {\n      if (cancelled) {\n        throw new PromiseCancelledSignal();\n      }\n      return value;\n    },\n    err => {\n      if (cancelled) {\n        throw new PromiseCancelledSignal();\n      }\n      throw err;\n    }\n  );\n\n  return {\n    promise: wrapped,\n    cancel: () => {\n      cancelled = true;\n    },\n    isCancelled: () => cancelled,\n  };\n}\n"]}