{"version":3,"file":"task.js","sourceRoot":"","sources":["../../../../../src/tutorial-panel/components/tutorial-detail-view/task.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAC3C,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAErC,OAAO,WAAW,MAAM,uBAAuB,CAAC;AAChD,OAAO,uBAAuB,MAAM,oCAAoC,CAAC;AACzE,OAAO,oBAAoB,MAAM,iCAAiC,CAAC;AACnE,OAAO,yBAAyB,MAAM,sCAAsC,CAAC;AAE7E,SAAS,sBAAsB,CAAC,SAAiB,EAAE,gBAAwB;IACzE,IAAI,SAAS,GAAG,gBAAgB,EAAE;QAChC,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,SAAS,KAAK,gBAAgB,EAAE;QAClC,OAAO,aAAa,CAAC;KACtB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAWD,MAAM,UAAU,IAAI,CAAC,EAAuF;QAArF,IAAI,UAAA,EAAE,SAAS,eAAA,EAAE,gBAAgB,sBAAA,EAAE,QAAQ,cAAA,EAAE,cAAc,oBAAA,EAAE,WAAW,iBAAA;IAC7F,IAAM,mBAAmB,GAAG,sBAAsB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAEhF,IAAM,cAAc,GAAG,WAAW,CAAC;QACjC,cAAc,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;IAEhC,OAAO,CACL,4BAAI,SAAS,EAAE,MAAM,CAAC,IAAI;QACxB,oBAAC,oBAAoB,IAAC,IAAI,EAAC,KAAK;YAC9B,6BAAK,SAAS,EAAE,MAAM,CAAC,YAAY,CAAC;gBAClC,oBAAC,uBAAuB,IACtB,MAAM,EAAC,SAAS,EAChB,IAAI,EAAE,mBAAmB,EACzB,aAAa,EAAE,WAAW,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAChE,SAAS,EAAE,MAAM,CAAC,oBAAoB,CAAC,GACvC;gBAEF,oBAAC,WAAW,IACV,OAAO,EAAC,IAAI,EACZ,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EACxC,QAAQ,EAAC,WAAW,EACpB,KAAK,EAAE,SAAS,GAAG,gBAAgB,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,sBAAsB,IAEnF,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CACjC,CACV;YAEN,6BAAK,SAAS,EAAE,MAAM,CAAC,4BAA4B,CAAC;gBAClD,oBAAC,yBAAyB,IACxB,MAAM,EACJ,8BAAM,SAAS,EAAE,MAAM,CAAC,2BAA2B,CAAC,IACjD,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1C,EAET,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,cAAc;oBAExB,4BAAI,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,IAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,SAAS,IAAK,OAAA,CACnC,4BAAI,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI;wBACxC,oBAAC,WAAW,IACV,KAAK,EAAC,qBAAqB,EAC3B,QAAQ,EAAC,QAAQ,EACjB,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EACtB,SAAS,EAAE,MAAM,CAAC,YAAY,CAAC,IAE9B,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CACjC,CACX,CACN,EAXoC,CAWpC,CAAC,CACC,CACqB,CACxB,CACe,CACpB,CACN,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport styles from './styles.css.js';\nimport { TutorialPanelProps } from '../../interfaces';\nimport InternalBox from '../../../box/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport InternalExpandableSection from '../../../expandable-section/internal';\n\nfunction getStatusIndicatorType(taskIndex: number, currentTaskIndex: number) {\n  if (taskIndex < currentTaskIndex) {\n    return 'success';\n  }\n  if (taskIndex === currentTaskIndex) {\n    return 'in-progress';\n  }\n  return 'pending';\n}\n\ninterface TaskProps {\n  task: TutorialPanelProps.Task;\n  taskIndex: number;\n  currentTaskIndex: number;\n  expanded: boolean;\n  onToggleExpand: (step: number) => void;\n  i18nStrings: TutorialPanelProps['i18nStrings'];\n}\n\nexport function Task({ task, taskIndex, currentTaskIndex, expanded, onToggleExpand, i18nStrings }: TaskProps) {\n  const statusIndicatorType = getStatusIndicatorType(taskIndex, currentTaskIndex);\n\n  const onExpandChange = useCallback(() => {\n    onToggleExpand(taskIndex);\n  }, [onToggleExpand, taskIndex]);\n\n  return (\n    <li className={styles.task}>\n      <InternalSpaceBetween size=\"xxs\">\n        <div className={styles['task-title']}>\n          <InternalStatusIndicator\n            __size=\"inherit\"\n            type={statusIndicatorType}\n            iconAriaLabel={i18nStrings.labelsTaskStatus[statusIndicatorType]}\n            className={styles['task-title--status']}\n          />\n\n          <InternalBox\n            variant=\"h3\"\n            padding={{ left: 'xxxs', vertical: 'n' }}\n            fontSize=\"heading-s\"\n            color={taskIndex < currentTaskIndex ? 'text-status-success' : 'text-status-inactive'}\n          >\n            {i18nStrings.taskTitle(taskIndex, task.title)}\n          </InternalBox>\n        </div>\n\n        <div className={styles['expandable-section-wrapper']}>\n          <InternalExpandableSection\n            header={\n              <span className={styles['expandable-section-header']}>\n                {i18nStrings.labelTotalSteps(task.steps.length)}\n              </span>\n            }\n            expanded={expanded}\n            onChange={onExpandChange}\n          >\n            <ol className={styles['step-list']}>\n              {task.steps.map((step, stepIndex) => (\n                <li key={stepIndex} className={styles.step}>\n                  <InternalBox\n                    color=\"text-body-secondary\"\n                    fontSize=\"body-m\"\n                    padding={{ left: 'l' }}\n                    className={styles['step-title']}\n                  >\n                    {i18nStrings.stepTitle(stepIndex, step.title)}\n                  </InternalBox>\n                </li>\n              ))}\n            </ol>\n          </InternalExpandableSection>\n        </div>\n      </InternalSpaceBetween>\n    </li>\n  );\n}\n"]}