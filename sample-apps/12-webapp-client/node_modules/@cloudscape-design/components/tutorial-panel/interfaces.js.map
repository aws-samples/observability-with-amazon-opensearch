{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/tutorial-panel/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface TutorialPanelProps extends BaseComponentProps {\n  /**\n   * Whether the content of the panel is currently loading. If this property\n   * is set to `true`, the panel displays a spinner and the loadingText that is\n   * specified in the `i18nStrings` property.\n   */\n  loading?: boolean;\n\n  /**\n   * List of all available tutorials. An array of objects with the following properties:\n   *\n   * * `title` (string) - Name of the tutorial\n   *\n   * * `description` (ReactNode) - Short description of the tutorial's content.\n   *\n   * * `tasks` - Array of tasks (in intended order). Each Task has the following properties:\n   *   * `title` (string) - Name of this task. This is shown in the task list overview of the tutorial's detail view.\n   *   * `steps` - Array of steps in this task (in intended order). Each step has the following properties:\n   *     * `title` (string) - Title of this step. This is shown in the step list in the tutorial's detail view.\n   *     * `content` (ReactNode) - Content to be shown in the popover of this step. Can be JSX or plain text.\n   *     * `warningAlert` (ReactNode) - (Optional) If this field is present, a warning alert will be displayed\n   *        inside the step's popover, showing this field's content. Can be JSX or plain text.\n   *     * `hotspotId` (string) - ID of the hotspot that this tutorial step points to.\n   *\n   *        A hotspot with this ID needs to be added manually to the code of the application and represents a location\n   *        in the application that a tutorial step can be attached to. It can be re-used by multiple tutorials. Hotspot\n   *        IDs need to be unique in the scope of the whole application that uses this tutorial.\n   *\n   * * `completedScreenDescription` (ReactNode) - Description to be shown on the last page of the tutorial, when the\n   *    user has successfully completed the tutorial.\n   *\n   * * `prerequisitesAlert` (ReactNode) - (Optional) If the application determines that the user cannot start the tutorial\n   *    yet (by specifying the property `prerequisitesNeeded` on the tutorial object), the content of `prerequisitesAlert`\n   *    will be shown in the tutorial list underneath the tutorial title.\n   *\n   *    Example: `<><Link>Create a bucket first</Link> to complete this tutorial.</>`\n   *\n   * * `prerequisitesNeeded` (boolean) - (Optional) If this property is set to `true`, the tutorial list will disable the\n   *   `Start tutorial` button for this tutorial, and it will show the contents of the tutorial's `prerequisitesAlert` field\n   *    in an alert underneath the tutorial title.\n   *\n   * * `learnMoreUrl` (string | null) - (Optional) If present, the tutorial list will show a \"Learn More\" link pointing to\n   *    this URL underneath the tutorial's description.\n   *\n   * * `completed` (boolean) - Whether the user has already completed this tutorial.\n   *\n   *   If this property is set to `true`, the tutorial list will show a status indicator underneath the tutorial title with\n   *   a message that indicates that this tutorial has already been completed by the user (e.g. \"Tutorial completed\"), and\n   *   the \"Start tutorial\" button will be replaced by a \"Restart tutorial\" button.\n   */\n  tutorials: ReadonlyArray<TutorialPanelProps.Tutorial>;\n\n  /**\n   * The link to a file documenting all tutorials (usually a PDF).\n   */\n  downloadUrl: string;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings: TutorialPanelProps.I18nStrings;\n\n  /**\n   * Fired when the user clicks on the feedback link at the end of a tutorial.\n   */\n  onFeedbackClick: NonCancelableEventHandler<TutorialPanelProps.TutorialDetail>;\n\n  /*\n  Filtering is not available in the Beta release.\n\n  filteringFunction?: (tutorial: TutorialPanelProps.Tutorial, searchTerm: string) => boolean;\n  */\n}\n\nexport namespace TutorialPanelProps {\n  export interface TutorialDetail {\n    tutorial: Tutorial;\n  }\n\n  export interface Tutorial {\n    /**\n     * Title of the tutorial\n     * */\n    title: string;\n\n    /**\n     * Short description of the tutorial's content. This is displayed in the tutorial list.\n     */\n    description: React.ReactNode;\n\n    /**\n     * List of tasks (in intended order)\n     */\n    tasks: ReadonlyArray<Task>;\n\n    /**\n     * Description to be shown on the last page of the tutorial, when the user has\n     * successfully completed the tutorial.\n     */\n    completedScreenDescription: React.ReactNode;\n\n    /**\n     * If the application determines that the user cannot start\n     * the tutorial yet (by specifying the property `prerequisitesNeeded` on the\n     * tutorial object), the content of `prerequisitesAlert` will be shown in the\n     * tutorial list underneath the tutorial title.\n     *\n     * Example: `<><Link>Create a bucket first</Link> to complete this tutorial.</>`\n     */\n    prerequisitesAlert?: React.ReactNode;\n\n    /**\n     * If this property is set to `true`, the tutorial list\n     * will disable the `Start tutorial` button for this\n     * tutorial, and it will show the contents of the\n     * tutorial's `prerequisitesAlert` field in an alert underneath\n     * the tutorial title.\n     */\n    prerequisitesNeeded?: boolean;\n\n    /**\n     * If present, the tutorial list will show a \"Learn More\" link pointing to\n     * this URL underneath the tutorial's description.\n     */\n    learnMoreUrl?: string | null;\n\n    /**\n     * Whether the user has already completed this tutorial.\n     *\n     * If this property is set to `true`, the tutorial list\n     * will show a status indicator underneath the tutorial\n     * title with a message that indicates that this tutorial\n     * has already been completed by the user (e.g.\n     * \"Tutorial completed\"), and the \"Start tutorial\" button\n     * will be replaced by a \"Restart tutorial\" button.\n     *\n     */\n    completed: boolean;\n  }\n\n  export interface Task {\n    /**\n     * Title of this task. This is shown in the task list overview of the tutorial's\n     * detail view.\n     */\n    title: string;\n\n    /**\n     * Steps in this task (in intended order)\n     */\n    steps: ReadonlyArray<Step>;\n  }\n\n  export interface Step {\n    /**\n     * Title of this step. This is shown in the step list in the tutorial's\n     * detail view.\n     */\n    title: string;\n\n    /**\n     * Content to be shown in the popover of this step. Can be JSX or plain text.\n     */\n    content: React.ReactNode;\n\n    /**\n     * If this field is present, a warning alert will be displayed inside\n     * the step's popover, showing this field's content. Can be JSX or plain text.\n     */\n    warningAlert?: React.ReactNode;\n\n    /**\n     * ID of the hotspot that this tutorial step points to.\n     *\n     * A hotspot with this ID needs to be added manually to the code of the application\n     * and represents a location in the application that a tutorial step can be\n     * attached to. It can be re-used by multiple tutorials. Hotspot IDs need\n     * to be unique in the scope of the whole application that uses this tutorial.\n     */\n    hotspotId: string;\n  }\n\n  export interface I18nStrings {\n    loadingText: string;\n\n    tutorialListTitle: string;\n    tutorialListDescription: React.ReactNode;\n    tutorialListDownloadLinkText: string;\n\n    tutorialCompletedText: string;\n    learnMoreLinkText: string;\n\n    startTutorialButtonText: string;\n    restartTutorialButtonText: string;\n\n    completionScreenTitle: string;\n\n    feedbackLinkText: string;\n    dismissTutorialButtonText: string;\n\n    taskTitle: (taskIndex: number, taskTitle: string) => string;\n    stepTitle: (stepIndex: number, stepTitle: string) => string;\n\n    labelExitTutorial: string;\n    labelTotalSteps: (totalStepCount: number) => string;\n    labelLearnMoreExternalIcon: string;\n\n    labelsTaskStatus: {\n      pending: string;\n      'in-progress': string;\n      success: string;\n    };\n  }\n}\n"]}