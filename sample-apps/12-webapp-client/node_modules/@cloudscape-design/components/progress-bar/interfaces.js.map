{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/progress-bar/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface ProgressBarProps extends BaseComponentProps {\n  /**\n   * Indicates the current progress as a percentage. The value must be between 0 and 100. Decimals are rounded.\n   */\n  value?: number;\n\n  /**\n   * Specifies the status of the progress bar. You can set it to one of the following:\n   *\n   * - `\"in-progress\"` - Displays a progress bar.\n   * - `\"success\"` or `\"error\"` - Displays a result state and replaces the progress element with a status indicator,\n   * `resultText`, and a result button.\n   */\n  status?: ProgressBarProps.Status;\n\n  /**\n   * Enables the correct styling of the progress bar in different contexts. You can set it to one of the following:\n   *\n   * - `\"flash\"` - Use this variatn when using the progress bar within a flash component.\n   *              Note that the result button isn't displayed when using this variant.\n   *              Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item instead of the result button provided by the progress bar.\n   * - `\"key-value\"` - Use this variant when using the progress bar within the key-value pairs pattern.\n   * - `\"standalone\"` Use in all other cases. This is the default value.\n   */\n  variant?: ProgressBarProps.Variant;\n\n  /**\n   * Specifies the text for the button that's displayed when the `status` is set to `error` or `success`.\n   * If `resultButtonText` is empty, the result button isn't displayed.\n   *\n   * Note: If you use the `flash` variant, the result button isn't displayed.\n   * Add a button using the `action` property of the flashbar item instead.\n   */\n  resultButtonText?: string;\n\n  /**\n   * Short description of the operation that appears at the top of the component.\n   *\n   * Make sure that you always provide a label for accessibility.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * More detailed information about the operation that appears below the label.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Information that's displayed below the progress bar or status text.\n   */\n  additionalInfo?: React.ReactNode;\n\n  /**\n   * Content that's displayed when `status` is set to `error` or `success`.\n   */\n  resultText?: React.ReactNode;\n\n  /**\n   * Called when the user clicks the result state button.\n   *\n   * Note: If you are using the `flash` variant, the result button isn't displayed.\n   * Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item instead.\n   */\n  onResultButtonClick?: NonCancelableEventHandler;\n}\n\nexport namespace ProgressBarProps {\n  export type Status = 'in-progress' | 'success' | 'error';\n  export type Variant = 'standalone' | 'flash' | 'key-value';\n}\n"]}