{"version":3,"file":"time-offset.js","sourceRoot":"","sources":["../../../src/date-range-picker/time-offset.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAExF;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,KAAwC,EACxC,mBAA4B;IAE5B,IAAI,CAAC,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,MAAK,UAAU,CAAC,EAAE;QACjC,OAAO,KAAK,CAAC;KACd;IAEO,IAAA,SAAS,GAAc,KAAK,UAAnB,EAAE,OAAO,GAAK,KAAK,QAAV,CAAW;IAErC,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,SAAS,GAAG,oBAAoB,CAAC,SAAS,EAAE,mBAAmB,CAAC;QAC3E,OAAO,EAAE,OAAO,GAAG,oBAAoB,CAAC,OAAO,EAAE,mBAAmB,CAAC;KACtE,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAC7B,KAAwC,EACxC,mBAA4B;IAE5B,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;QACvC,OAAO,KAAK,CAAC;KACd;IAED;;;;;MAKE;IACF,IAAM,aAAa,GAAG,iFAAiF,CAAC;IAExG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;QAC9E,QAAQ,CACN,iBAAiB,EACjB,sGAAsG;YACpG,uEAAuE,CAC1E,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IAED,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,mBAAmB,CAAC;QACpE,OAAO,EAAE,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,mBAAmB,CAAC;KACjE,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DateRangePickerProps } from './interfaces';\nimport { warnOnce } from '../internal/logging';\nimport { formatTimezoneOffset, shiftTimezoneOffset } from '../internal/utils/date-time';\n\n/**\n * Appends a time zone offset to an offset-less date string.\n */\nexport function setTimeOffset(\n  value: DateRangePickerProps.Value | null,\n  timeOffsetInMinutes?: number\n): DateRangePickerProps.Value | null {\n  if (!(value?.type === 'absolute')) {\n    return value;\n  }\n\n  const { startDate, endDate } = value;\n\n  return {\n    type: 'absolute',\n    startDate: startDate + formatTimezoneOffset(startDate, timeOffsetInMinutes),\n    endDate: endDate + formatTimezoneOffset(endDate, timeOffsetInMinutes),\n  };\n}\n\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\nexport function shiftTimeOffset(\n  value: null | DateRangePickerProps.Value,\n  timeOffsetInMinutes?: number\n): DateRangePickerProps.Value | null {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n  const dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce(\n      'DateRangePicker',\n      'You have provided a misformatted start or end date. The component will fall back to an empty value. ' +\n        'Dates have to be ISO8601-formatted with an optional time zone offset.'\n    );\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: shiftTimezoneOffset(value.startDate, timeOffsetInMinutes),\n    endDate: shiftTimezoneOffset(value.endDate, timeOffsetInMinutes),\n  };\n}\n"]}