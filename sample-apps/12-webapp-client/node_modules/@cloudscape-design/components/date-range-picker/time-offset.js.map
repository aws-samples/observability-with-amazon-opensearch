{"version":3,"file":"time-offset.js","sourceRoot":"","sources":["../../../src/date-range-picker/time-offset.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DateRangePickerProps } from './interfaces';\nimport { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\n\n/**\n * Returns the time offset of the browser.\n *\n * I.e. determines the `x` in `current offset = UTC + x`\n */\nexport function getBrowserTimezoneOffset() {\n  return 0 - new Date().getTimezoneOffset();\n}\n\n/**\n * Appends a time zone offset to an offset-less date string.\n */\nexport function setTimeOffset(\n  value: DateRangePickerProps.Value | null,\n  timeOffsetInMinutes: number\n): DateRangePickerProps.Value | null {\n  if (!(value?.type === 'absolute')) {\n    return value;\n  }\n\n  const offsetSuffix = formatOffset(timeOffsetInMinutes);\n\n  const { startDate, endDate } = value;\n\n  return {\n    type: 'absolute',\n    startDate: startDate + offsetSuffix,\n    endDate: endDate + offsetSuffix,\n  };\n}\n\nexport function formatOffset(offsetInMinutes: number) {\n  const hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n  const minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n\n  const sign = offsetInMinutes < 0 ? '-' : '+';\n  const offsetSuffix = `${sign}${hoursOffset}:${minuteOffset}`;\n\n  return offsetSuffix;\n}\n\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\nexport function shiftTimeOffset(\n  value: null | DateRangePickerProps.Value,\n  timeOffsetInMinutes: number\n): DateRangePickerProps.Value | null {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n  const dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce(\n      'DateRangePicker',\n      'You have provided a misformatted start or end date. The component will fall back to an empty value. ' +\n        'Dates have to be ISO8601-formatted with an optional time zone offset.'\n    );\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n    endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes),\n  };\n}\n\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target time offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * doShiftTimeOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60)\n * = \"2020-01-01T08:00:00\"\n * ```\n */\nfunction doShiftTimeOffset(value: string, targetOffsetInMinutes: number) {\n  const [valueWithoutOffset, offsetInMinutes] = splitOffset(value);\n\n  const differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n\n  const date = new Date(valueWithoutOffset);\n  const adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n\n  const formattedDate = formatDate(adjustedDate);\n  const formattedTime = formatTime(adjustedDate);\n\n  return `${formattedDate}T${formattedTime}`;\n}\n\n/**\n * Splits an ISO8601 date string into its timezone-independent part\n * and its time offset in minutes.\n */\nfunction splitOffset(value: string) {\n  const [datePart, timePart] = value.split('T');\n  const [time, signCharacter, offsetPart] = timePart.split(/(-|\\+)/);\n\n  if (signCharacter && offsetPart) {\n    const [offsetHours, offsetMinutes] = offsetPart.split(':');\n\n    const offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n\n    const sign = signCharacter === '-' ? -1 : 1;\n\n    return [`${datePart}T${time}`, offset * sign] as const;\n  }\n\n  const utcTimezoneIndicator = value.indexOf('Z');\n  if (utcTimezoneIndicator !== -1) {\n    return [value.substring(0, utcTimezoneIndicator), 0] as const;\n  }\n\n  return [value, getBrowserTimezoneOffset()] as const;\n}\n"]}