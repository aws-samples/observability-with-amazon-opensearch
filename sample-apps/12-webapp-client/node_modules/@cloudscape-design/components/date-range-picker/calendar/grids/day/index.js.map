{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/date-range-picker/calendar/grids/day/index.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { DateRangePickerProps } from '../../../interfaces';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { getDateLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\n\ninterface GridDayProps {\n  locale: string;\n  baseDate: Date;\n  date: Date;\n\n  isDateInFirstRow: boolean;\n  isDateInFirstColumn: boolean;\n  isDateInLastColumn: boolean;\n  isDateInSelectionStartWeek: boolean;\n  isDateInSelectionEndWeek: boolean;\n\n  isFocusedDate: boolean;\n  isDateEnabled?: DateRangePickerProps.IsDateEnabledFunction;\n  todayAriaLabel: string;\n  onSelectDate: (date: Date) => void;\n  onFocusDate: (date: Date) => void;\n  isInRange: boolean;\n  isSelected: boolean;\n\n  // these only exist for the test-utils\n  isStartDate: boolean;\n  isEndDate: boolean;\n  // used for refresh styles\n  onlyOneSelected: boolean;\n  isRangeStartDate: boolean;\n  isRangeEndDate: boolean;\n}\n\nfunction propsAreEqual(prevProps: GridDayProps, nextProps: GridDayProps): boolean {\n  return (\n    prevProps.locale === nextProps.locale &&\n    prevProps.baseDate.getTime() === nextProps.baseDate.getTime() &&\n    prevProps.date.getTime() === nextProps.date.getTime() &&\n    prevProps.isDateInFirstRow === nextProps.isDateInFirstRow &&\n    prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn &&\n    prevProps.isDateInLastColumn === nextProps.isDateInLastColumn &&\n    prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek &&\n    prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek &&\n    prevProps.isFocusedDate === nextProps.isFocusedDate &&\n    prevProps.isDateEnabled === nextProps.isDateEnabled &&\n    prevProps.todayAriaLabel === nextProps.todayAriaLabel &&\n    prevProps.onSelectDate === nextProps.onSelectDate &&\n    prevProps.onFocusDate === nextProps.onFocusDate &&\n    prevProps.isInRange === nextProps.isInRange &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.isStartDate === nextProps.isStartDate &&\n    prevProps.isEndDate === nextProps.isEndDate &&\n    prevProps.onlyOneSelected === nextProps.onlyOneSelected &&\n    prevProps.isRangeStartDate === nextProps.isRangeStartDate &&\n    prevProps.isRangeEndDate === nextProps.isRangeEndDate\n  );\n}\n\nconst GridDay = React.memo(\n  React.forwardRef<HTMLDivElement, GridDayProps>(\n    (\n      {\n        locale,\n        baseDate,\n        date,\n        isSelected,\n        isStartDate,\n        isEndDate,\n        onlyOneSelected,\n        isRangeStartDate,\n        isRangeEndDate,\n        isFocusedDate,\n        isDateEnabled,\n        todayAriaLabel,\n        onSelectDate,\n        onFocusDate,\n        isDateInFirstRow,\n        isDateInFirstColumn,\n        isDateInLastColumn,\n        isDateInSelectionStartWeek,\n        isDateInSelectionEndWeek,\n        isInRange,\n      }: GridDayProps,\n      ref\n    ) => {\n      const dayLabel = getDateLabel(locale, date);\n\n      const labels = [dayLabel];\n\n      const isEnabled = !isDateEnabled || isDateEnabled(date);\n      const isFocusable = isFocusedDate && isEnabled;\n      const isToday = isTodayFn(date);\n      const computedAttributes: React.HTMLAttributes<HTMLDivElement> = {};\n\n      const focusVisible = useFocusVisible();\n\n      const baseClasses = {\n        [styles['in-first-row']]: isDateInFirstRow,\n        [styles['in-first-column']]: isDateInFirstColumn,\n      };\n\n      if (!isSameMonth(date, baseDate)) {\n        const classNames = clsx(styles.day, baseClasses, {\n          [styles['in-previous-month']]: isBefore(date, baseDate),\n          [styles['last-day-of-month']]: isLastDayOfMonth(date),\n          [styles['in-next-month']]: isAfter(date, baseDate),\n        });\n        return <div className={classNames} ref={ref}></div>;\n      }\n\n      const classNames = clsx(styles.day, baseClasses, {\n        [styles['in-current-month']]: isSameMonth(date, baseDate),\n        [styles.enabled]: isEnabled,\n        [styles.selected]: isSelected,\n        [styles['start-date']]: isStartDate,\n        [styles['end-date']]: isEndDate,\n        [styles['range-start-date']]: isRangeStartDate,\n        [styles['range-end-date']]: isRangeEndDate,\n        [styles['no-range']]: isSelected && onlyOneSelected,\n        [styles['in-range']]: isInRange,\n        [styles['in-range-border-top']]: isDateInSelectionStartWeek || date.getDate() <= 7,\n        [styles['in-range-border-bottom']]: isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n        [styles['in-range-border-left']]: isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate,\n        [styles['in-range-border-right']]: isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate,\n        [styles.today]: isToday,\n      });\n\n      computedAttributes['aria-pressed'] = isSelected || isInRange;\n\n      if (isToday) {\n        labels.push(todayAriaLabel);\n        computedAttributes['aria-current'] = 'date';\n      }\n\n      if (isEnabled) {\n        computedAttributes.onClick = () => onSelectDate(date);\n        computedAttributes.onFocus = () => onFocusDate(date);\n        computedAttributes.tabIndex = -1;\n      }\n\n      if (isFocusable) {\n        computedAttributes.tabIndex = 0;\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.keyCode === KeyCode.space) {\n          event.preventDefault();\n          onSelectDate(date);\n        }\n      };\n\n      return (\n        <div\n          className={classNames}\n          aria-label={labels.join('. ')}\n          data-date={formatDate(date)}\n          role=\"button\"\n          {...computedAttributes}\n          ref={ref}\n          onKeyDown={onKeyDown}\n          {...focusVisible}\n        >\n          <span className={styles['day-inner']}>{date.getDate()}</span>\n        </div>\n      );\n    }\n  ),\n  propsAreEqual\n);\n\nexport default GridDay;\n"]}