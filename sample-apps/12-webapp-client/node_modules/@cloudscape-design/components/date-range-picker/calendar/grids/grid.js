// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useMemo } from 'react';
import styles from '../../styles.css.js';
import GridDay from './day';
import { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays } from 'date-fns';
import { getCalendarMonth } from 'mnth';
import rotateDayIndexes from '../../../date-picker/calendar/utils/rotate-day-indexes';
import { renderDayName } from '../../../date-picker/calendar/utils/intl';
import clsx from 'clsx';
export function Grid(_a) {
    var baseDate = _a.baseDate, selectedStartDate = _a.selectedStartDate, selectedEndDate = _a.selectedEndDate, rangeStartDate = _a.rangeStartDate, rangeEndDate = _a.rangeEndDate, focusedDate = _a.focusedDate, focusedDateRef = _a.focusedDateRef, onSelectDate = _a.onSelectDate, onGridKeyDownHandler = _a.onGridKeyDownHandler, onFocusedDateChange = _a.onFocusedDateChange, isDateEnabled = _a.isDateEnabled, locale = _a.locale, startOfWeek = _a.startOfWeek, todayAriaLabel = _a.todayAriaLabel, className = _a.className;
    var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();
    // `baseDateTime` is used as a more stable replacement for baseDate
    var weeks = useMemo(function () { return getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }); }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [baseDateTime, startOfWeek]);
    return (React.createElement("div", { className: clsx(styles.grid, className) },
        React.createElement("div", { className: styles['calendar-day-names'] }, rotateDayIndexes(startOfWeek).map(function (i) { return (React.createElement("div", { key: "day-name-".concat(i), className: styles['calendar-day-name'] }, renderDayName(locale, i))); })),
        React.createElement("div", { className: styles['calendar-dates'], onKeyDown: onGridKeyDownHandler }, weeks.map(function (week, weekIndex) {
            return (React.createElement("div", { key: "week-".concat(weekIndex), className: styles['calendar-week'] }, week.map(function (date, dateIndex) {
                var isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);
                var isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);
                var isSelected = isStartDate || isEndDate;
                var isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);
                var isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);
                var isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);
                var dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);
                var inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));
                var inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));
                var onlyOneSelected = !!rangeStartDate && !!rangeEndDate
                    ? isSameDay(rangeStartDate, rangeEndDate)
                    : !selectedStartDate || !selectedEndDate;
                return (React.createElement(GridDay, { key: "date-".concat(weekIndex, "-").concat(dateIndex), locale: locale, baseDate: baseDate, isSelected: isSelected, isStartDate: isStartDate, isEndDate: isEndDate, onlyOneSelected: onlyOneSelected, isRangeStartDate: isRangeStartDate, isRangeEndDate: isRangeEndDate, date: date, isFocusedDate: isFocused, ref: isFocused ? focusedDateRef : undefined, todayAriaLabel: todayAriaLabel, onSelectDate: onSelectDate, onFocusDate: onFocusedDateChange, isInRange: dateIsInRange, isDateEnabled: isDateEnabled, isDateInFirstRow: weekIndex === 0, isDateInFirstColumn: dateIndex === 0, isDateInLastColumn: dateIndex === week.length - 1, isDateInSelectionStartWeek: !!inRangeStartWeek, isDateInSelectionEndWeek: !!inRangeEndWeek }));
            })));
        }))));
}
function isInRange(date, dateOne, dateTwo) {
    if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {
        return false;
    }
    var inRange = (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));
    return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);
}
//# sourceMappingURL=grid.js.map