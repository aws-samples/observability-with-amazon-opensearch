import { __assign } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useState } from 'react';
import { setTimeOffset } from './time-offset';
/**
 * This function fills in a start and end time if they are missing.
 */
function fillMissingTime(value) {
    if (!value) {
        return value;
    }
    var _a = value.startDate.split('T'), startDate = _a[0], startTime = _a[1];
    var _b = value.endDate.split('T'), endDate = _b[0], endTime = _b[1];
    return __assign(__assign({}, value), { startDate: startTime ? value.startDate : "".concat(startDate, "T00:00:00"), endDate: endTime ? value.endDate : "".concat(endDate, "T23:59:59") });
}
export function formatValue(value, _a) {
    var timeOffset = _a.timeOffset, dateOnly = _a.dateOnly;
    if (!value || value.type === 'relative') {
        return value;
    }
    if (dateOnly) {
        return {
            type: 'absolute',
            startDate: value.startDate.split('T')[0],
            endDate: value.endDate.split('T')[0]
        };
    }
    return setTimeOffset(value, timeOffset);
}
function getDefaultMode(value, relativeOptions, rangeSelectorMode) {
    if (value && value.type) {
        return value.type;
    }
    if (rangeSelectorMode === 'relative-only') {
        return 'relative';
    }
    if (rangeSelectorMode === 'absolute-only') {
        return 'absolute';
    }
    return relativeOptions.length > 0 ? 'relative' : 'absolute';
}
export function useDateRangePicker(_a) {
    var value = _a.value, relativeOptions = _a.relativeOptions, rangeSelectorMode = _a.rangeSelectorMode;
    var _b = useState(getDefaultMode(value, relativeOptions, rangeSelectorMode)), rangeSelectionMode = _b[0], setRangeSelectionMode = _b[1];
    var _c = useState((value === null || value === void 0 ? void 0 : value.type) === 'absolute' ? value : null), selectedAbsoluteRange = _c[0], setSelectedAbsoluteRange = _c[1];
    var _d = useState((value === null || value === void 0 ? void 0 : value.type) === 'relative' ? value : null), selectedRelativeRange = _d[0], setSelectedRelativeRange = _d[1];
    return {
        fillMissingTime: fillMissingTime,
        rangeSelectionMode: rangeSelectionMode,
        setRangeSelectionMode: setRangeSelectionMode,
        selectedAbsoluteRange: selectedAbsoluteRange,
        setSelectedAbsoluteRange: setSelectedAbsoluteRange,
        selectedRelativeRange: selectedRelativeRange,
        setSelectedRelativeRange: setSelectedRelativeRange
    };
}
//# sourceMappingURL=use-date-range-picker.js.map