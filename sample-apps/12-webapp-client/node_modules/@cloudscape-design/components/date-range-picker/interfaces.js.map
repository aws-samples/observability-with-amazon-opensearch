{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/date-range-picker/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { TimeInputProps } from '../time-input/interfaces';\nimport { ExpandToViewport } from '../internal/components/dropdown/interfaces';\n\nexport interface DateRangePickerProps extends BaseComponentProps, FormFieldValidationControlProps, ExpandToViewport {\n  /**\n   * The current date range value. Can be either an absolute time range\n   * or a relative time range.\n   */\n  value: null | DateRangePickerProps.Value;\n\n  /**\n   * A list of relative time ranges that are shown as suggestions.\n   */\n  relativeOptions: ReadonlyArray<DateRangePickerProps.RelativeOption>;\n\n  /**\n   * Specifies the placeholder text that is rendered when the value is empty.\n   */\n  placeholder?: string;\n\n  /**\n   * A function that defines whether a particular date should be enabled\n   * in the calendar or not. Note that disabling a date in the calendar\n   * still allows users to enter this date via keyboard. We therefore\n   * recommend that you also validate these constraints client- and\n   * server-side, in the same way as for other form elements.\n   */\n  isDateEnabled?: DateRangePickerProps.IsDateEnabledFunction;\n\n  /**\n   * The locale to be used for rendering month names and defining the\n   * starting date of the week. If not provided, it will be determined\n   * from the page and browser locales. Supported values and formats\n   * are as-per the [JavaScript Intl API specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n   */\n  locale?: string;\n\n  /**\n   * Starting day of the week. [0-6] maps to [Sunday-Saturday].\n   * By default the starting day of the week is defined by the locale,\n   * but you can override it using this property.\n   */\n  startOfWeek?: number;\n\n  /**\n   * Specifies that the component is disabled, preventing the user from\n   * modifying the value. A disabled component cannot receive focus.\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies that the component is read-only, preventing the user from\n   * modifying the value. A read-only component can receive focus.\n   */\n  readOnly?: boolean;\n\n  /**\n   * Fired when keyboard focus is set onto the UI control.\n   */\n  onFocus?: NonCancelableEventHandler<null>;\n\n  /**\n   * Fired when keyboard focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler<null>;\n\n  /**\n   * Fired whenever a user changes the component's value.\n   * The event `detail` contains the current value of the field.\n   */\n  onChange?: NonCancelableEventHandler<DateRangePickerProps.ChangeDetail>;\n\n  /**\n   * A function that defines whether a particular range is valid or not.\n   *\n   * Ensure that your function checks for missing fields in the value.\n   */\n  isValidRange: DateRangePickerProps.ValidationFunction;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings: DateRangePickerProps.I18nStrings;\n\n  /**\n   * Specifies whether the component should show a button that\n   * allows the user to clear the selected value.\n   */\n  showClearButton?: boolean;\n\n  /**\n   * Hides time inputs and changes the input format to date-only, e.g. 2021-04-06.\n   *\n   * Do not use `dateOnly` flag conditionally. The component does not trigger the value update\n   * when the flag changes which means the value format can become inconsistent.\n   *\n   * Default: `false`.\n   */\n  dateOnly?: boolean;\n\n  /**\n   * Determines the range selector mode as follows:\n   * * `default` for combined absolute/relative range selector.\n   * * `absolute-only` for absolute-only range selector.\n   * * `relative-only` for relative-only range selector.\n   *\n   * By default, the range selector mode is `default`.\n   */\n  rangeSelectorMode?: DateRangePickerProps.RangeSelectorMode;\n\n  /**\n   * The time offset from UTC in minutes that should be used to\n   * display and produce values.\n   *\n   * Has no effect when `dateOnly` is true.\n   *\n   * Default: the user's current time offset as provided by the browser.\n   */\n  timeOffset?: number;\n\n  /**\n   * Specifies the format of the time input for absolute ranges.\n   *\n   * Use to restrict the granularity of time that the user can enter.\n   *\n   * Has no effect when `dateOnly` is true.\n   */\n  timeInputFormat?: TimeInputProps.Format;\n}\n\nexport namespace DateRangePickerProps {\n  export type Value = AbsoluteValue | RelativeValue;\n  export interface AbsoluteValue {\n    /**\n     * In ISO8601 format, e.g.: 2021-04-06T17:23:50+02:00 (or 2021-04-06 when `dateOnly` is true)\n     */\n    startDate: string;\n    /**\n     * In ISO8601 format, e.g.: 2021-04-06T17:23:50+02:00 (or 2021-04-06 when `dateOnly` is true)\n     */\n    endDate: string;\n    type: 'absolute';\n  }\n\n  export interface RelativeValue {\n    /**\n     * If provided, used to match this value\n     * to a provided relative option.\n     */\n    key?: string;\n    amount: number;\n    unit: TimeUnit;\n    type: 'relative';\n  }\n  export interface RelativeOption {\n    /**\n     * Used to uniquely identify this relative option.\n     */\n    key: string;\n    amount: number;\n    unit: TimeUnit;\n    type: 'relative';\n  }\n\n  export type TimeUnit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n\n  export type ValidationFunction = (value: Value | null) => ValidationResult;\n\n  export type ValidationResult = ValidRangeResult | InvalidRangeResult;\n\n  export interface ValidRangeResult {\n    valid: true;\n  }\n\n  export interface InvalidRangeResult {\n    valid: false;\n    errorMessage: string;\n  }\n\n  export interface ChangeDetail {\n    /**\n     * The newly selected range of this date range picker.\n     */\n    value: null | Value;\n  }\n\n  export interface IsDateEnabledFunction {\n    (date: Date): boolean;\n  }\n\n  export type RangeSelectorMode = 'default' | 'absolute-only' | 'relative-only';\n\n  export interface Ref {\n    /**\n     * Sets the browser focus on the UI control\n     */\n    focus(): void;\n  }\n\n  export interface I18nStrings {\n    /**\n     * Adds `aria-label` to the trigger and dropdown.\n     */\n    ariaLabel?: string;\n\n    /**\n     * Adds `aria-labelledby` to the trigger and dropdown.\n     */\n    ariaLabelledby?: string;\n\n    /**\n     * Adds `aria-describedby` to the trigger and dropdown.\n     */\n    ariaDescribedby?: string;\n\n    /**\n     * Segment title of the relative range selection mode\n     */\n    relativeModeTitle: string;\n\n    /**\n     * Segment title of the absolute range selection mode\n     */\n    absoluteModeTitle: string;\n\n    /**\n     * Heading for the relative range selection area\n     */\n    relativeRangeSelectionHeading: string;\n\n    /**\n     * Visible label of the Cancel button\n     */\n    cancelButtonLabel: string;\n    /**\n     * Visible label of the Clear and dismiss button\n     */\n    clearButtonLabel: string;\n    /**\n     * Visible label of the Apply button\n     */\n    applyButtonLabel: string;\n\n    /**\n     * Formatting function for relative ranges.\n     * This function must convert a relative range to a human-readable string.\n     */\n    formatRelativeRange: (value: RelativeValue) => string;\n\n    /**\n     * Formatting function for time units.\n     *\n     * This function must return a localized form of the unit that fits the provided time value.\n     */\n    formatUnit: (unit: TimeUnit, value: number) => string;\n\n    /**\n     * Visible label for the option for selecting\n     * a custom relative range.\n     */\n    customRelativeRangeOptionLabel: string;\n\n    /**\n     * Visible description for the option for selecting\n     * a custom relative range.\n     */\n    customRelativeRangeOptionDescription: string;\n\n    /**\n     * Visible label for the duration selector for\n     * the custom relative range.\n     */\n    customRelativeRangeDurationLabel: string;\n    /**\n     * Placeholder for the duration selector for\n     * the custom relative range.\n     */\n    customRelativeRangeDurationPlaceholder: string;\n    /**\n     * Visible label for the unit selector for the\n     * custom relative range.\n     */\n    customRelativeRangeUnitLabel: string;\n\n    /**\n     * Used as part of the aria label for today's date in the calendar.\n     */\n    todayAriaLabel: string;\n\n    /**\n     * An aria label for the 'next month' button.\n     */\n    nextMonthAriaLabel: string;\n\n    /**\n     * An aria label for the 'previous month' button.\n     */\n    previousMonthAriaLabel: string;\n\n    /**\n     * Visible label for the Start Date input for the\n     * absolute range.\n     */\n    startDateLabel: string;\n    /**\n     * Visible label for the Start Time input for the\n     * absolute range.\n     */\n    startTimeLabel: string;\n    /**\n     * Visible label for the End Date input for the\n     * absolute range.\n     */\n    endDateLabel: string;\n    /**\n     * Visible label for the End Time input for the\n     * absolute range.\n     */\n    endTimeLabel: string;\n\n    /**\n     * Constraint text for the input fields for the\n     * absolute range.\n     */\n    dateTimeConstraintText?: string;\n\n    /**\n     * When the property is set, screen readers announce the selected range when the absolute range gets selected.\n     */\n    renderSelectedAbsoluteRangeAriaLive?: (startDate: string, endDate: string) => string;\n  }\n}\n\nexport interface Focusable {\n  focus(): void;\n}\n"]}