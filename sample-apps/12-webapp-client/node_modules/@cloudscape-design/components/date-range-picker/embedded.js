// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useRef } from 'react';
import Calendar from './calendar';
import InternalBox from '../box/internal';
import SpaceBetween from '../space-between/index.js';
import RelativeRangePicker from './relative-range';
import ModeSwitcher from './mode-switcher';
import { useDateRangePicker } from './use-date-range-picker';
import { fireNonCancelableEvent } from '../internal/events/index.js';
import { formatValue } from './use-date-range-picker.js';
import { useMobile } from '../internal/hooks/use-mobile';
export function DateRangePickerEmbedded(_a) {
    var value = _a.value, _b = _a.locale, locale = _b === void 0 ? '' : _b, startOfWeek = _a.startOfWeek, _c = _a.isDateEnabled, isDateEnabled = _c === void 0 ? function () { return true; } : _c, relativeOptions = _a.relativeOptions, i18nStrings = _a.i18nStrings, _d = _a.dateOnly, dateOnly = _d === void 0 ? false : _d, _e = _a.timeInputFormat, timeInputFormat = _e === void 0 ? 'hh:mm:ss' : _e, _f = _a.rangeSelectorMode, rangeSelectorMode = _f === void 0 ? 'default' : _f, onChange = _a.onChange, timeOffset = _a.timeOffset;
    var _g = useDateRangePicker({
        value: value,
        relativeOptions: relativeOptions,
        rangeSelectorMode: rangeSelectorMode
    }), fillMissingTime = _g.fillMissingTime, rangeSelectionMode = _g.rangeSelectionMode, setRangeSelectionMode = _g.setRangeSelectionMode, selectedAbsoluteRange = _g.selectedAbsoluteRange, setSelectedAbsoluteRange = _g.setSelectedAbsoluteRange, selectedRelativeRange = _g.selectedRelativeRange, setSelectedRelativeRange = _g.setSelectedRelativeRange;
    var isSingleGrid = useMobile();
    function updateRange(value) {
        var newValue = value.type === 'relative' ? value : fillMissingTime(value);
        fireNonCancelableEvent(onChange, { value: formatValue(newValue, { dateOnly: dateOnly, timeOffset: timeOffset }) });
    }
    var focusRefs = {
        "default": useRef(null),
        'absolute-only': useRef(null),
        'relative-only': useRef(null)
    };
    return (React.createElement(SpaceBetween, { size: "l" },
        React.createElement(InternalBox, { padding: { top: 'm', horizontal: 'l' } },
            React.createElement(SpaceBetween, { direction: "vertical", size: "s" },
                rangeSelectorMode === 'default' && (React.createElement(ModeSwitcher, { ref: focusRefs["default"], mode: rangeSelectionMode, onChange: function (mode) {
                        setRangeSelectionMode(mode);
                    }, i18nStrings: i18nStrings })),
                rangeSelectionMode === 'absolute' && (React.createElement(Calendar, { ref: focusRefs['absolute-only'], isSingleGrid: isSingleGrid, initialEndDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.endDate, initialStartDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.startDate, locale: locale, startOfWeek: startOfWeek, isDateEnabled: isDateEnabled, i18nStrings: i18nStrings, onSelectDateRange: function (range) {
                        setSelectedAbsoluteRange(range);
                        updateRange(range);
                    }, dateOnly: dateOnly, timeInputFormat: timeInputFormat })),
                rangeSelectionMode === 'relative' && (React.createElement(RelativeRangePicker, { ref: focusRefs['relative-only'], isSingleGrid: isSingleGrid, options: relativeOptions, dateOnly: dateOnly, initialSelection: selectedRelativeRange, onChange: function (range) {
                        setSelectedRelativeRange(range);
                        updateRange(range);
                    }, i18nStrings: i18nStrings }))))));
}
//# sourceMappingURL=embedded.js.map