{"version":3,"file":"mode-switcher.js","sourceRoot":"","sources":["../../../src/date-range-picker/mode-switcher.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAEvE,OAAO,wBAAwB,MAAM,+BAA+B,CAAC;AAErE,OAAO,sBAAsB,MAAM,oCAAoC,CAAC;AACxE,OAAO,mBAAmB,MAAM,qDAAqD,CAAC;AACtF,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAOrC,eAAe,UAAU,CAAC,YAAY,CAAC,CAAC;AAExC,SAAS,YAAY,CAAC,EAAkD,EAAE,GAAyB;QAA3E,WAAW,iBAAA,EAAE,IAAI,UAAA,EAAE,QAAQ,cAAA;IACjD,IAAM,UAAU,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAEhD,mBAAmB,CAAC,GAAG,EAAE,cAAM,OAAA,CAAC;QAC9B,KAAK,EAAL;YACE,IAAI,UAAU,CAAC,OAAO,EAAE;gBACrB,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAuB,CAAC,KAAK,EAAE,CAAC;gBAE7G,IAAM,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAEhG,KAAqB,UAAkC,EAAlC,KAAA,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAlC,cAAkC,EAAlC,IAAkC,EAAE;oBAApD,IAAM,MAAM,SAAA;oBACf,MAAM,CAAC,KAAK,EAAE,CAAC;iBAChB;aACF;QACH,CAAC;KACF,CAAC,EAZ6B,CAY7B,CAAC,CAAC;IAEJ,OAAO,CACL,6BAAK,GAAG,EAAE,UAAU;QAClB,oBAAC,wBAAwB,IACvB,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,EAChC,UAAU,EAAE,IAAI,EAChB,OAAO,EAAE;gBACP,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,WAAW,CAAC,iBAAiB,EAAE;gBACvD,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,WAAW,CAAC,iBAAiB,EAAE;aACxD,EACD,QAAQ,EAAE,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,UAAqC,CAAC,EAAxD,CAAwD,GACvE,CACE,CACP,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { DateRangePickerProps, Focusable } from './interfaces';\nimport InternalSegmentedControl from '../segmented-control/internal';\n\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface ModeSwitcherProps extends Pick<Required<DateRangePickerProps>, 'i18nStrings'> {\n  mode: 'absolute' | 'relative';\n  onChange: (mode: 'absolute' | 'relative') => void;\n}\n\nexport default forwardRef(ModeSwitcher);\n\nfunction ModeSwitcher({ i18nStrings, mode, onChange }: ModeSwitcherProps, ref: React.Ref<Focusable>) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (elementRef.current) {\n        (elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0] as HTMLButtonElement).focus();\n\n        const select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n\n        for (const button of Array.prototype.slice.call(select)) {\n          button.focus();\n        }\n      }\n    },\n  }));\n\n  return (\n    <div ref={elementRef}>\n      <InternalSegmentedControl\n        className={styles['mode-switch']}\n        selectedId={mode}\n        options={[\n          { id: 'relative', text: i18nStrings.relativeModeTitle },\n          { id: 'absolute', text: i18nStrings.absoluteModeTitle },\n        ]}\n        onChange={e => onChange(e.detail.selectedId as 'absolute' | 'relative')}\n      />\n    </div>\n  );\n}\n"]}