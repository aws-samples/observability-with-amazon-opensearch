{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/table/interfaces.tsx"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler, CancelableEventHandler } from '../internal/events';\n\n/*\n * HACK: Cast the component to a named parametrized interface.\n *\n * This lets us use React.forwardRef and still let the component have type\n * parameters, and the naming convention lets the documenter know that this is\n * a forwardRef-wrapped component.\n *\n * We don't need to expose this type to customers because it's just a simple\n * function type.\n */\nexport interface TableForwardRefType {\n  <T>(props: TableProps<T> & { ref?: React.Ref<TableProps.Ref> }): JSX.Element;\n}\nexport interface TableProps<T = any> extends BaseComponentProps {\n  /**\n   * Heading element of the table container. Use the [header component](/components/header/).\n   */\n  header?: React.ReactNode;\n\n  /**\n   * Footer of the table container.\n   */\n  footer?: React.ReactNode;\n\n  /**\n   * Displayed when the `items` property is an empty array. Use it to render an empty or no-match state.\n   */\n  empty?: React.ReactNode;\n\n  /**\n   * Specifies the data that's displayed in the table rows. Each item contains the data for one row. The display of a row is handled\n   * by the `cell` property of each column definition in the `columnDefinitions` property.\n   */\n  items: ReadonlyArray<T>;\n\n  /**\n   * Renders the table in a loading state. We recommend that you also set a `loadingText`.\n   */\n  loading?: boolean;\n\n  /**\n   * Specifies the text that's displayed when the table is in a loading state.\n   */\n  loadingText?: string;\n\n  /**\n   * Specifies a property that uniquely identifies an individual item.\n   * When it's set, it's used to provide [keys for React](https://reactjs.org/docs/lists-and-keys.html#keys)\n   * for performance optimizations.\n   *\n   * It's also used to connect `items` and `selectedItems` values when they reference different objects.\n   */\n  trackBy?: TableProps.TrackBy<T>;\n\n  /**\n   * The columns configuration object\n   * * `id` (string) - Specifies a unique column identifier. The property is used 1) as a [keys](https://reactjs.org/docs/lists-and-keys.html#keys) source for React rendering,\n   *   and 2) to match entries in the `visibleColumns` property, if defined.\n   * * `header` (ReactNode) - Determines the display of the column header.\n   * * `cell` ((item) => ReactNode) - Determines the display of a cell's content. You receive the current table row\n   *   item as an argument.\n   * * `width` (string | number) - Specifies the column width. Corresponds to the `width` css-property. If the width is not set,\n   *   the browser automatically adjusts the column width based on the content. When `resizableColumns` property is\n   *   set to `true`, additional constraints apply: 1) string values are not allowed, and 2) the last visible column always\n   *   fills the remaining space of the table so the specified width is ignored.\n   * * `minWidth` (string | number) - Specifies the minimum column width. Corresponds to the `min-width` css-property. When\n   *   `resizableColumns` property is set to `true`, additional constraints apply: 1) string values are not allowed,\n   *   and 2) the column can't resize below than the specified width (defaults to \"120px\").\n   * * `maxWidth` (string | number) - Specifies the maximum column width. Corresponds to the `max-width` css-property.\n   *   Note that when the `resizableColumns` property is set to `true` this property is ignored.\n   * * `ariaLabel` (LabelData => string) - An optional function that's called to provide an `aria-label` for the cell header.\n   *   It receives the current sorting state of this column, the direction it's sorted in, and an indication of\n   *   whether the sorting is disabled, as three Boolean values: `sorted`, `descending` and `disabled`.\n   *   We recommend that you use this for sortable columns to provide more meaningful labels based on the\n   *   current sorting direction.\n   * * `sortingField` (string) - Enables default column sorting. The value is used in [collection hooks](/get-started/dev-guides/collection-hooks/)\n   *   to reorder the items. Provide the name of the property within each item that should be used for sorting by this column.\n   *   For more complex sorting use `sortingComparator` instead.\n   * * `sortingComparator` ((T, T) => number) - Enables custom column sorting. The value is used in [collection hooks](/get-started/dev-guides/collection-hooks/)\n   *   to reorder the items. This property accepts a custom comparator that is used to compare two items.\n   *   The comparator must implement ascending ordering, and the output is inverted automatically in case of descending order.\n   *   If present, the `sortingField` property is ignored.\n   *\n   */\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<T>>;\n  /**\n   * Specifies the selection type (`'single' | 'multi'`).\n   */\n  selectionType?: TableProps.SelectionType;\n  /**\n   * List of selected items.\n   */\n  selectedItems?: ReadonlyArray<T>;\n\n  /**\n   * Use this slot to add filtering controls to the table.\n   */\n  filter?: React.ReactNode;\n\n  /**\n   * Use this slot to add the [pagination component](/components/pagination/) to the table.\n   */\n  pagination?: React.ReactNode;\n\n  /**\n   * Use this slot to add [collection preferences](/components/collection-preferences/) to the table.\n   */\n  preferences?: React.ReactNode;\n\n  /**\n   * Determines whether a given item is disabled. If an item is disabled, the user can't select it.\n   */\n  isItemDisabled?: TableProps.IsItemDisabled<T>;\n\n  /**\n   * Specifies if text wraps within table cells. If set to `true`, long text within cells may wrap onto\n   * multiple lines instead of being truncated with an ellipsis.\n   */\n  wrapLines?: boolean;\n\n  /**\n   * Specifies if columns can be resized. If set to `true`, users can resize the columns in the table.\n   */\n  resizableColumns?: boolean;\n\n  /**\n   * Specifies label text for the selection components (checkboxes and radio buttons) as follows:\n   * * Individual items: `itemSelectionLabel` [`(SelectionState, Item) => string`]\n   * * Column header: `allItemsSelectionLabel` [`(SelectionState) => string`]\n   * * Group label: `selectionGroupLabel` [`string`]\n   *\n   * You can use the first argument of type `SelectionState` to access the current selection\n   * state of the component (for example, the `selectedItems` list). The label function for individual\n   * items also receives the corresponding  `Item` object. You can use the group label to\n   * add a meaningful description to the whole selection.\n   *\n   * In addition, you can use `tableLabel` to provide a label for the table. If you use a\n   * header for this table, you may reuse the string to provide a caption-like description.\n   * For example, tableLabel=Instances will be announced as 'Instances table'.\n   *\n   * Example:\n   * ```\n   * {\n   *   selectionGroupLabel: 'Items selection',\n   *   allItemsSelectionLabel: ({ selectedItems }) =>\n   *     `${selectedItems.length} ${selectedItems.length === 1 ? 'item' : 'items'} selected`,\n   *   itemSelectionLabel: ({ selectedItems }, item) => {\n   *     isItemSelected = selectedItems.filter(i => i.id === item.id).length;\n   *     return `${item.name} is ${isItemSelected ? '' : 'not'} selected`,\n   *   tableLabel: \"Items\"\n   *  }\n   * }\n   * ```\n   */\n  ariaLabels?: TableProps.AriaLabels<T>;\n\n  /**\n   * Specifies the definition object of the currently sorted column. Make sure you pass an object that's\n   * present in the `columnDefinitions` array.\n   */\n  sortingColumn?: TableProps.SortingColumn<T>;\n  /**\n   * Specifies whether to use a descending sort order.\n   */\n  sortingDescending?: boolean;\n  /**\n   * Specifies if sorting buttons are disabled. For example, use this property\n   * to prevent the user from sorting before items are fully loaded.\n   */\n  sortingDisabled?: boolean;\n\n  /**\n   * Specifies an array containing the `id`s of visible columns. If not set, all columns are displayed.\n   *\n   * Use it in conjunction with the visible content preference of the [collection preferences](/components/collection-preferences/) component.\n   *\n   * The order of ids doesn't influence the order in which columns are displayed - this is dictated by the `columnDefinitions` property\n   */\n  visibleColumns?: ReadonlyArray<string>;\n\n  /**\n   * Fired when the user resizes a table column. The event detail contains an array of column widths in pixels,\n   * including the hidden via preferences columns. Use this event to persist the column widths.\n   */\n  onColumnWidthsChange?: NonCancelableEventHandler<TableProps.ColumnWidthsChangeDetail>;\n\n  /**\n   * Called when either the column to sort by or the direction of sorting changes upon user interaction.\n   * The event detail contains the current sortingColumn and isDescending.\n   */\n  onSortingChange?: NonCancelableEventHandler<TableProps.SortingState<T>>;\n\n  /**\n   * Fired when a user interaction triggers a change in the list of selected items.\n   * The event `detail` contains the current list of `selectedItems`.\n   */\n  onSelectionChange?: NonCancelableEventHandler<TableProps.SelectionChangeDetail<T>>;\n\n  /**\n   * Note: This feature is provided for backwards compatibility. Its use is not recommended,\n   * and it may be deprecated in the future.\n   *\n   * Called when the user clicked at a table row. The event detail contains the index of the\n   * clicked row and the row object itself. Use this event to define a row click behavior.\n   */\n  onRowClick?: NonCancelableEventHandler<TableProps.OnRowClickDetail<T>>;\n\n  /**\n   * Note: This feature is provided for backwards compatibility. Its use is not recommended,\n   * and it may be deprecated in the future.\n   *\n   * Called when the user clicked at a table row with the right mouse click. The event detail\n   * contains the index of the clicked row and the row object itself. Use this event to override\n   * the default browser context menu behavior.\n   */\n  onRowContextMenu?: CancelableEventHandler<TableProps.OnRowContextMenuDetail<T>>;\n\n  /**\n   * If set to `true`, the table header remains visible when the user scrolls down.\n   */\n  stickyHeader?: boolean;\n\n  /**\n   * Specifies a vertical offset (in pixels) for the sticky header. For example, use this if you\n   * need to position the sticky header below other fixed position elements on the page.\n   */\n  stickyHeaderVerticalOffset?: number;\n\n  /**\n   * Specify a table variant with one of the following:\n   * * `container` - Use this variant to have the table displayed within a container.\n   * * `embedded` - Use this variant within a parent container (such as a modal, expandable\n   *                section, container or split panel).\n   * * `stacked` - Use this variant adjacent to other stacked containers (such as a container,\n   *               table).\n   * * `full-page` – Use this variant when table is the primary element on the page.\n   * @visualrefresh `embedded`, `stacked`, and `full-page` variants\n   */\n  variant?: TableProps.Variant;\n}\n\nexport namespace TableProps {\n  export type TrackBy<T> = string | ((item: T) => string);\n\n  export type ColumnDefinition<T> = {\n    id?: string;\n    header: React.ReactNode;\n    cell(item: T): React.ReactNode;\n    ariaLabel?(data: LabelData): string;\n    width?: number | string;\n    minWidth?: number | string;\n    maxWidth?: number | string;\n  } & SortingColumn<T>;\n\n  export type SelectionType = 'single' | 'multi';\n  export type Variant = 'container' | 'embedded' | 'stacked' | 'full-page';\n  export interface SelectionState<T> {\n    selectedItems: ReadonlyArray<T>;\n  }\n  export interface SelectionChangeDetail<T> {\n    selectedItems: T[];\n  }\n  export type IsItemDisabled<T> = (item: T) => boolean;\n  export interface AriaLabels<T> {\n    allItemsSelectionLabel?: (data: TableProps.SelectionState<T>) => string;\n    itemSelectionLabel?: (data: TableProps.SelectionState<T>, row: T) => string;\n    selectionGroupLabel?: string;\n    tableLabel?: string;\n  }\n  export interface SortingState<T> {\n    isDescending?: boolean;\n    sortingColumn: SortingColumn<T>;\n  }\n  export interface SortingColumn<T> {\n    sortingField?: string;\n    sortingComparator?: (a: T, b: T) => number;\n  }\n  export interface LabelData {\n    sorted: boolean;\n    descending: boolean;\n    disabled: boolean;\n  }\n  export interface OnRowClickDetail<T> {\n    rowIndex: number;\n    item: T;\n  }\n  export interface OnRowContextMenuDetail<T> {\n    rowIndex: number;\n    item: T;\n    clientX: number;\n    clientY: number;\n  }\n\n  export interface ColumnWidthsChangeDetail {\n    widths: ReadonlyArray<number>;\n  }\n\n  export interface Ref {\n    /**\n     * When the sticky header is enabled and you call this function, the table\n     * scroll parent scrolls to reveal the first row of the table.\n     */\n    scrollToTop(): void;\n  }\n}\n"]}