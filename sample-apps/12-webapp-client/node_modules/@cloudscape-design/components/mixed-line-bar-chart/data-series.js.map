{"version":3,"file":"data-series.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/data-series.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACvC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9D,OAAO,UAAU,MAAM,eAAe,CAAC;AACvC,OAAO,SAAS,MAAM,cAAc,CAAC;AAGrC,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAkB,MAAM,SAAS,CAAC;AAmB9D,MAAM,CAAC,OAAO,UAAU,UAAU,CAA2B,EAWxC;QAVnB,IAAI,UAAA,EACJ,UAAU,gBAAA,EACV,SAAS,eAAA,EACT,qBAAqB,2BAAA,EACrB,iBAAiB,uBAAA,EACjB,WAAW,iBAAA,EACX,iBAAiB,uBAAA,EACjB,aAAa,mBAAA,EACb,MAAM,YAAA,EACN,MAAM,YAAA;IAEN,IAAM,iBAAiB,GAAG,WAAW,CAAC,yCAAyC,CAAC,CAAC;IAEjF,IAAM,oBAAoB,GAAqB,OAAO,CAAC;QACrD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,EAAE,CAAC;SACX;QAED,IAAM,OAAO,GAAmE,EAAE,CAAC;QACnF,aAAa,CAAC,OAAO,CAAC,UAAC,EAAU;gBAAR,MAAM,YAAA;YAC7B,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;gBACzB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;IAEjC,OAAO,CACL;QACE,6CAAkB,MAAM;YACtB,kCAAU,EAAE,EAAE,iBAAiB;gBAC7B,8BAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,GAAI,CACjD,CACN;QACP,0CAAgB,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,EAAC,OAAO,IAC/D,aAAa,CAAC,GAAG,CAAC,UAAC,EAAiB,EAAE,KAAK;;gBAAtB,MAAM,YAAA,EAAE,KAAK,WAAA;YACjC,IAAM,aAAa,GAAG,MAAM,KAAK,iBAAiB,CAAC;YACnD,IAAM,QAAQ,GAAG,CAAC,CAAC,iBAAiB,IAAI,CAAC,aAAa,CAAC;YAEvD,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACnB,KAAK,MAAM,CAAC;gBACZ,KAAK,WAAW,CAAC,CAAC;oBAChB,OAAO,CACL,2BACE,GAAG,EAAE,KAAK,EACV,IAAI,EAAC,OAAO,gBACA,MAAM,CAAC,KAAK,EACxB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,kBAAW,MAAM,CAAC,IAAI,CAAE,CAAC;4BAC7D,GAAC,MAAM,CAAC,qBAAqB,CAAC,IAAG,aAAa;4BAC9C,GAAC,MAAM,CAAC,gBAAgB,CAAC,IAAG,QAAQ;gCACpC;wBAEF,oBAAC,UAAU,IACT,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,MAAM,EACd,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,iBAAiB,EAAE,iBAAiB,GACpC,CACA,CACL,CAAC;iBACH;gBAED,KAAK,KAAK;oBACR,OAAO,CACL,oBAAC,SAAS,IACR,GAAG,EAAE,KAAK,EACV,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,MAAM,EACd,KAAK,EAAE,KAAK,EACZ,gBAAgB,EAAE,aAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,EAAvB,CAAuB,CAAC,CAAC,MAAM,EAC3E,WAAW,EAAE,KAAK,EAClB,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,EAC/C,WAAW,EAAE,aAAa,EAC1B,MAAM,EAAE,QAAQ,EAChB,iBAAiB,EAAE,iBAAiB,EACpC,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAC9C,qBAAqB,EAAE,qBAAqB,GAC5C,CACH,CAAC;aACL;QACH,CAAC,CAAC,CACA,CACH,CACJ,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps, StackedOffsets } from './utils';\n\nexport interface DataSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  plotHeight: number;\n  plotWidth: number;\n\n  highlightedSeries: MixedLineBarChartProps.ChartSeries<T> | null;\n  highlightedGroupIndex: number | null;\n\n  stackedBars: boolean;\n  isGroupNavigation: boolean;\n\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n}\n\nexport default function DataSeries<T extends ChartDataTypes>({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n}: DataSeriesProps<T>) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n\n  const stackedBarOffsetMaps: StackedOffsets[] = useMemo(() => {\n    if (!stackedBars) {\n      return [];\n    }\n\n    const barData: Array<readonly MixedLineBarChartProps.Datum<ChartDataTypes>[]> = [];\n    visibleSeries.forEach(({ series }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={plotWidth} height={plotHeight} />\n        </clipPath>\n      </defs>\n      <g aria-hidden={isGroupNavigation ? true : undefined} role=\"group\">\n        {visibleSeries.map(({ series, color }, index) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          switch (series.type) {\n            case 'line':\n            case 'threshold': {\n              return (\n                <g\n                  key={index}\n                  role=\"group\"\n                  aria-label={series.title}\n                  className={clsx(styles.series, styles[`series--${series.type}`], {\n                    [styles['series--highlighted']]: isHighlighted,\n                    [styles['series--dimmed']]: isDimmed,\n                  })}\n                >\n                  <LineSeries\n                    axis={axis}\n                    series={series}\n                    color={color}\n                    xScale={xScale}\n                    yScale={yScale}\n                    chartAreaClipPath={chartAreaClipPath}\n                  />\n                </g>\n              );\n            }\n\n            case 'bar':\n              return (\n                <BarSeries\n                  key={index}\n                  axis={axis}\n                  series={series}\n                  color={color}\n                  totalSeriesCount={visibleSeries.filter(s => s.series.type === 'bar').length}\n                  seriesIndex={index}\n                  xScale={xScale}\n                  yScale={yScale}\n                  plotSize={axis === 'y' ? plotWidth : plotHeight}\n                  highlighted={isHighlighted}\n                  dimmed={isDimmed}\n                  chartAreaClipPath={chartAreaClipPath}\n                  stackedBarOffsets={stackedBarOffsetMaps[index]}\n                  highlightedGroupIndex={highlightedGroupIndex}\n                />\n              );\n          }\n        })}\n      </g>\n    </>\n  );\n}\n"]}