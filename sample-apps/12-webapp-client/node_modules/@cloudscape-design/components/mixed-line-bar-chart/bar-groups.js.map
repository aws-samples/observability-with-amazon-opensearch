{"version":3,"file":"bar-groups.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/bar-groups.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAK1B,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAErC,IAAM,eAAe,GAAG,CAAC,CAAC;AAW1B;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,SAAS,CAA2B,EAO7C;QANb,SAAS,eAAA,EACT,SAAS,eAAA,EACT,eAAe,qBAAA,EACf,SAAS,eAAA,EACT,qBAAqB,2BAAA,EACrB,mBAAmB,yBAAA;IAEnB,OAAO,CACL,2BAAG,IAAI,EAAC,OAAO,iBAAa,MAAM,IAC/B,SAAS,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,CAC/B,8BACE,GAAG,EAAE,KAAK,EACV,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,EAClD,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,EAClD,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,eAAe,EACjD,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,eAAe,EACnD,GAAG,EAAE,KAAK,KAAK,qBAAqB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,EACtE,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACrB,IAAI,EAAC,QAAQ,gBACD,SAAS,mBACN,IAAI,mBACJ,eAAe,EAC9B,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,GAC9B,CACH,EAhBgC,CAgBhC,CAAC,CACA,CACL,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { ChartDataTypes } from './interfaces';\n\nimport { ScaledBarGroup } from './make-scaled-bar-groups';\nimport styles from './styles.css.js';\n\nconst OUTLINE_PADDING = 2;\n\nexport interface BarGroups<T extends ChartDataTypes> {\n  ariaLabel: string;\n  isRefresh: boolean;\n  isPopoverPinned: boolean;\n  barGroups: ScaledBarGroup<T>[];\n  highlightedGroupIndex: null | number;\n  highlightedGroupRef: React.RefObject<SVGRectElement>;\n}\n\n/**\n * The component renders empty SVG rectangles corresponding to the bar group slots.\n * The highlighted group rectangle is used for the pseudo-focus and therefore requires ARIA attributes.\n * Other rectangles are only needed for the \"findBarGroups\" test-utils selector.\n */\nexport default function BarGroups<T extends ChartDataTypes>({\n  ariaLabel,\n  isRefresh,\n  isPopoverPinned,\n  barGroups,\n  highlightedGroupIndex,\n  highlightedGroupRef,\n}: BarGroups<T>) {\n  return (\n    <g role=\"group\" aria-hidden=\"true\">\n      {barGroups.map((group, index) => (\n        <rect\n          key={index}\n          x={Math.max(0, group.position.x - OUTLINE_PADDING)}\n          y={Math.max(0, group.position.y - OUTLINE_PADDING)}\n          width={group.position.width + 2 * OUTLINE_PADDING}\n          height={group.position.height + 2 * OUTLINE_PADDING}\n          ref={index === highlightedGroupIndex ? highlightedGroupRef : undefined}\n          rx={isRefresh ? 4 : 2}\n          role=\"button\"\n          aria-label={ariaLabel}\n          aria-haspopup={true}\n          aria-expanded={isPopoverPinned}\n          fill=\"none\"\n          className={styles['bar-group']}\n        />\n      ))}\n    </g>\n  );\n}\n"]}