// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useState } from 'react';
import { nodeContains } from '../../internal/utils/dom';
import styles from '../styles.css.js';
var MAX_HOVER_MARGIN = 6;
export function useMouseHover(_a) {
    var plotRef = _a.plotRef, scaledSeries = _a.scaledSeries, barGroups = _a.barGroups, highlightSeries = _a.highlightSeries, highlightPoint = _a.highlightPoint, highlightGroup = _a.highlightGroup, clearHighlightedSeries = _a.clearHighlightedSeries, isGroupNavigation = _a.isGroupNavigation, isHandlersDisabled = _a.isHandlersDisabled;
    var _b = useState(null), verticalMarkerLeft = _b[0], setVerticalMarkerLeft = _b[1];
    var onSeriesMouseMove = function (event) {
        var svgRect = event.target.getBoundingClientRect();
        var offsetX = event.clientX - svgRect.left;
        var offsetY = event.clientY - svgRect.top;
        var closestX = scaledSeries
            .map(function (v) { return v.x; })
            .reduce(function (prev, curr) { return (Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev); }, -Infinity);
        var closestY = scaledSeries
            .filter(function (v) { return v.x === closestX || v.series.type === 'threshold'; })
            .map(function (v) { return v.y; })
            .reduce(function (prev, curr) { return (Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev); }, -Infinity);
        if (isFinite(closestX)) {
            setVerticalMarkerLeft(closestX);
            if (isFinite(closestY) &&
                Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN &&
                Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN) {
                var _a = scaledSeries.filter(function (s) { return (s.x === closestX || s.series.type === 'threshold') && s.y === closestY; })[0], color = _a.color, datum = _a.datum, series = _a.series;
                highlightSeries(series);
                highlightPoint({ x: closestX, y: closestY, color: color, datum: datum, series: series });
            }
            else {
                highlightSeries(null);
                highlightPoint(null);
            }
        }
    };
    var onGroupMouseMove = function (event) {
        var svgRect = event.target.getBoundingClientRect();
        var offsetX = event.clientX - svgRect.left;
        var offsetY = event.clientY - svgRect.top;
        // If hovering over some group - highlight it.
        for (var groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {
            var _a = barGroups[groupIndex].position, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {
                highlightGroup(groupIndex);
                return;
            }
        }
        // Otherwise - clear the highlight.
        clearHighlightedSeries();
    };
    var onSVGMouseMove = function (event) {
        if (event.target === plotRef.current.svg && !isHandlersDisabled) {
            if (isGroupNavigation) {
                onGroupMouseMove(event);
            }
            else if (scaledSeries.length > 0) {
                onSeriesMouseMove(event);
            }
        }
    };
    var onSVGMouseOut = function (event) {
        if (isHandlersDisabled) {
            return;
        }
        if (!nodeContains(plotRef.current.svg, event.relatedTarget) ||
            // `classList` is not supported on IE11 for SVG elements
            ((event.relatedTarget && event.relatedTarget.getAttribute('class')) || '')
                .split(' ')
                .indexOf(styles.series) > -1) {
            setVerticalMarkerLeft(null);
            clearHighlightedSeries();
        }
    };
    return { verticalMarkerLeft: verticalMarkerLeft, onSVGMouseMove: onSVGMouseMove, onSVGMouseOut: onSVGMouseOut };
}
//# sourceMappingURL=use-mouse-hover.js.map