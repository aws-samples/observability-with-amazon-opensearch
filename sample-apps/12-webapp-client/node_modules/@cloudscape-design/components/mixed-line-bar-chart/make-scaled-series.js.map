{"version":3,"file":"make-scaled-series.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/make-scaled-series.ts"],"names":[],"mappings":"AAaA;;GAEG;AACH,MAAM,CAAC,OAAO,UAAU,gBAAgB,CACtC,MAA6C,EAC7C,MAAkB,EAClB,MAAyB;IAEzB,IAAM,OAAO,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,IAAM,MAAM,GAAG,UAAC,CAAI,IAAK,OAAA,CAAC,MAAM,CAAC,OAAO,CAAC,CAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,EAAzC,CAAyC,CAAC;IACnE,IAAM,MAAM,GAAG,UAAC,CAAS,IAAK,OAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAtB,CAAsB,CAAC;IACrD,IAAM,UAAU,GAAG,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEjD,gCAAgC;IAChC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACtB;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAAiB;YAAf,MAAM,YAAA,EAAE,KAAK,WAAA;QACxC,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;YAC1B,KAAoB,UAAgD,EAAhD,KAAA,MAAM,CAAC,IAAyC,EAAhD,cAAgD,EAAhD,IAAgD,EAAE;gBAAjE,IAAM,KAAK,SAAA;gBACd,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aAC5E;SACF;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE;YACtC,KAAgB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;gBAAvB,IAAM,CAAC,mBAAA;gBACV,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aACrD;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAsB,CAAC,CAAC;AAC7B,CAAC;AAED;;GAEG;AACH,SAAS,aAAa,CAAI,MAA6C,EAAE,MAAwB;IAC/F,IAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;IACtC,KAA4B,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;QAAvB,IAAQ,CAAC,sBAAA;QACpB,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,EAAE;YAC1B,KAAgB,UAAM,EAAN,KAAA,CAAC,CAAC,IAAI,EAAN,cAAM,EAAN,IAAM,EAAE;gBAAnB,IAAM,CAAC,SAAA;gBACV,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9B;SACF;KACF;IACD,IAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,WAAW,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAE3C,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\n\nexport interface ScaledPoint<T> {\n  x: number;\n  y: number;\n  color: string;\n  datum?: MixedLineBarChartProps.Datum<T> | undefined;\n  series: MixedLineBarChartProps.ChartSeries<T>;\n}\n\n/**\n * Combine all line series into an array of scaled data points with the given scales.\n */\nexport default function makeScaledSeries<T extends ChartDataTypes>(\n  series: ReadonlyArray<InternalChartSeries<T>>,\n  xScale: ChartScale,\n  yScale: NumericChartScale\n): readonly ScaledPoint<T>[] {\n  const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n  const scaleX = (x: T) => (xScale.d3Scale(x as any) || 0) + xOffset;\n  const scaleY = (y: number) => yScale.d3Scale(y) || 0;\n  const allScaledX = getAllScaledX(series, scaleX);\n\n  // Support threshold-only setup.\n  if (allScaledX.length === 0) {\n    allScaledX.push(NaN);\n  }\n\n  return series.reduce((acc, { series, color }) => {\n    if (series.type === 'line') {\n      for (const datum of series.data as MixedLineBarChartProps.Datum<T>[]) {\n        acc.push({ x: scaleX(datum.x), y: scaleY(datum.y), datum, series, color });\n      }\n    } else if (series.type === 'threshold') {\n      for (const x of allScaledX) {\n        acc.push({ x, y: scaleY(series.y), series, color });\n      }\n    }\n    return acc;\n  }, [] as ScaledPoint<T>[]);\n}\n\n/**\n * Collect unique x values from all data series.\n */\nfunction getAllScaledX<T>(series: ReadonlyArray<InternalChartSeries<T>>, scaleX: (x: T) => number) {\n  const addDataXSet = new Set<number>();\n  for (const { series: s } of series) {\n    if (s.type !== 'threshold') {\n      for (const d of s.data) {\n        addDataXSet.add(scaleX(d.x));\n      }\n    }\n  }\n  const allDataX: number[] = [];\n  addDataXSet.forEach(x => allDataX.push(x));\n\n  return allDataX;\n}\n"]}