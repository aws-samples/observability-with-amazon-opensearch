{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\n\nexport type ChartDataTypes = number | string | Date;\n\nexport type SeriesType = 'line' | 'bar';\nexport type ScaleType = 'linear' | 'log' | 'time' | 'categorical';\nexport type ScaleRange = [number, number];\n\nexport interface InternalChartSeries<T> {\n  index: number;\n  color: string;\n  series: MixedLineBarChartProps.ChartSeries<T>;\n}\n\nexport interface MixedLineBarChartProps<T extends ChartDataTypes>\n  extends CartesianChartProps<T, MixedLineBarChartProps.ChartSeries<T>> {\n  /**\n   * Array that represents the source of data for the displayed chart.\n   * Each element can represent a line series, bar series, or a threshold, and can have the following properties:\n   *\n   * * `title` (string): A human-readable title for this series\n   * * `type` (string): Series type (`\"line\"`, `\"bar\"`, or `\"threshold\"`)\n   * * `data` (Array): An array of data points, represented as objects with `x` and `y` properties\n   * * `color` (string): (Optional) A color hex value for this series. When assigned, it takes priority over the automatically assigned color\n   * * `valueFormatter` (Function): (Optional) A function that formats data values before rendering in the UI, For example, in the details popover.\n   */\n  series: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>;\n\n  /**\n   * When set to `true`, bars in the same data point are stacked instead of grouped next to each other.\n   */\n  stackedBars?: boolean;\n\n  /**\n   * When set to `true`, the x and y axes are flipped, which causes any bars to be rendered horizontally instead of vertically.\n   * This can only be used when the chart consists exclusively of bar series.\n   */\n  horizontalBars?: boolean;\n\n  /**\n   * When set to `true`, adds a visual emphasis on the zero baseline axis.\n   * See the usage guidelines for more details.\n   */\n  emphasizeBaselineAxis?: boolean;\n}\n\nexport namespace MixedLineBarChartProps {\n  export interface Datum<T> {\n    x: T;\n    y: number;\n  }\n\n  interface IDataSeries<T> {\n    type: 'line' | 'bar' | 'threshold';\n    title: string;\n    color?: string;\n\n    // This makes sure that the element type of the array is reduced to just one type,\n    // even if `T` is a union type, e.g. `number | string`.\n    data: T extends unknown ? ReadonlyArray<Datum<T>> : ReadonlyArray<Datum<T>>;\n    valueFormatter?: T extends unknown\n      ? CartesianChartProps.ValueFormatter<number, T>\n      : CartesianChartProps.ValueFormatter<number, T>;\n  }\n\n  export interface BarDataSeries<T> extends IDataSeries<T> {\n    type: 'bar';\n  }\n\n  export interface LineDataSeries<T> extends IDataSeries<T> {\n    type: 'line';\n  }\n\n  export interface ThresholdSeries extends Omit<IDataSeries<never>, 'data' | 'valueFormatter'> {\n    type: 'threshold';\n    y: number;\n    valueFormatter?: CartesianChartProps.TickFormatter<number>;\n  }\n\n  export type DataSeries<T> = LineDataSeries<T> | BarDataSeries<T>;\n\n  export type ChartSeries<T> = DataSeries<T> | ThresholdSeries;\n\n  export type FilterChangeDetail<T> = CartesianChartProps.FilterChangeDetail<ChartSeries<T>>;\n\n  export type HighlightChangeDetail<T> = CartesianChartProps.HighlightChangeDetail<ChartSeries<T>>;\n\n  export type TickFormatter<T> = CartesianChartProps.TickFormatter<T>;\n\n  export type ValueFormatter<YType, XType = null> = CartesianChartProps.ValueFormatter<YType, XType>;\n\n  export type I18nStrings<T> = CartesianChartProps.I18nStrings<T>;\n}\n"]}