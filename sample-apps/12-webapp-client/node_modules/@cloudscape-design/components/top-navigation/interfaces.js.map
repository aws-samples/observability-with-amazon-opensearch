{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/top-navigation/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CancelableEventHandler } from '../internal/events';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { IconProps } from '../icon/interfaces';\nimport { ButtonDropdownProps } from '../button-dropdown/interfaces';\n\nexport interface TopNavigationProps extends BaseComponentProps {\n  /**\n   * Properties describing the product identity. They are as follows:\n   *\n   * * `title` (string) - Specifies the title text.\n   * * `logo` ({ src: string, alt: string }) - Specifies the logo for the product.\n   * * `href` (string) - Specifies the `href` that the header links to.\n   * * `onFollow` (() => void) - Specifies the event handler called when the identity is clicked without any modifier keys.\n   */\n  identity: TopNavigationProps.Identity;\n\n  /**\n   * Use with an input or autosuggest control for a global search query.\n   */\n  search?: React.ReactNode;\n\n  /**\n   * A list of utility navigation elements.\n   * The supported utility types are: `button` and `menu-dropdown`.\n   *\n   * The following properties are supported across all utility types:\n   *\n   * * `type` (string) - The type of the utility. Can be `button` or `menu-dropdown`.\n   * * `text` (string) - Specifies the text shown in the top navigation or the title inside the dropdown if no explicit `title` property is set.\n   * * `title` (string) - The title displayed inside the dropdown.\n   * * `iconName` (string) - The name of an existing icon to display next to the utility.\n   * * `iconUrl` (string) - Specifies the URL of a custom icon. Use this property if the icon you want isn't available.\n   * * `iconAlt` (string) - Specifies alternate text for a custom icon provided using `iconUrl`. We recommend that you provide this for accessibility.\n   * * `iconSvg` (string) - Specifies the SVG of a custom icon.\n   * * `ariaLabel` (string) - Adds `aria-label` to the button or dropdown trigger. This is recommended for accessibility if a text is not provided.\n   * * `badge` (boolean) - Adds a badge to the corner of the icon to indicate a state change. For example: Unread notifications.\n   * * `disableTextCollapse` (boolean) - Prevents the utility text from being hidden on smaller screens.\n   * * `disableUtilityCollapse` (boolean) - Prevents the utility from being moved to an overflow menu on smaller screens.\n   *\n   * ### button\n   *\n   * * `variant` ('primary-button' | 'link') - The visual appearance of the button. The default value is 'link'.\n   * * `href` (string) - Specifies the `href` for a link styled as a button.\n   * * `external` (boolean) - Marks the link as external by adding an icon after the text. When clicked, the link opens in a new tab.\n   * * `externalIconAriaLabel` (string) - Adds an `aria-label` for the external icon.\n   * * `onClick` (() => void) - Specifies the event handler called when the utility is clicked.\n   *\n   * ### menu-dropdown\n   *\n   * * `description` (string) - The description displayed inside the dropdown.\n   * * `items` (ButtonDropdownProps.Items) - An array of dropdown items. This follows the same structure as the `items` property of the [button dropdown component](/components/button-dropdown).\n   * * `onItemClick` (NonCancelableEventHandler<ButtonDropdownProps.ItemClickDetails>) - Specifies the event handler called when a dropdown item is selected.\n   */\n  utilities?: ReadonlyArray<TopNavigationProps.Utility>;\n\n  /**\n   * An object containing all the localized strings required by the component.\n   */\n  i18nStrings: TopNavigationProps.I18nStrings;\n}\n\nexport namespace TopNavigationProps {\n  export interface Identity {\n    title?: string;\n    logo?: Logo;\n    href: string;\n    onFollow?: CancelableEventHandler;\n  }\n\n  export interface Logo {\n    src: string;\n    alt?: string;\n  }\n\n  interface BaseUtility {\n    text?: string;\n    title?: string;\n    iconName?: IconProps.Name;\n    iconUrl?: string;\n    iconAlt?: string;\n    iconSvg?: React.ReactNode;\n    ariaLabel?: string;\n\n    badge?: boolean;\n    disableUtilityCollapse?: boolean;\n    disableTextCollapse?: boolean;\n  }\n\n  export interface MenuDropdownUtility extends BaseUtility {\n    type: 'menu-dropdown';\n    description?: string;\n    items: ButtonDropdownProps.Items;\n    onItemClick?: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  }\n\n  export interface ButtonUtility extends BaseUtility {\n    type: 'button';\n    variant?: 'primary-button' | 'link';\n    onClick?: CancelableEventHandler;\n    href?: string;\n    external?: boolean;\n    externalIconAriaLabel?: string;\n  }\n\n  export type Utility = MenuDropdownUtility | ButtonUtility;\n\n  export interface I18nStrings {\n    searchIconAriaLabel?: string;\n    searchDismissIconAriaLabel?: string;\n    overflowMenuDismissIconAriaLabel?: string;\n    overflowMenuBackIconAriaLabel?: string;\n    overflowMenuTriggerText: string;\n    overflowMenuTitleText: string;\n  }\n}\n"]}