{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../src/top-navigation/parts/overflow-menu/router.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,aAAa,EAA4B,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAsB7F,IAAM,UAAU,GAAiB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,cAAO,CAAC,EAAE,CAAC;AAClG,MAAM,CAAC,IAAM,WAAW,GAAG,aAAa,CAAe,UAAU,CAAC,CAAC;AAEnE,MAAM,CAAC,IAAM,WAAW,GAAG;IACjB,IAAA,QAAQ,GAAK,UAAU,CAAC,WAAW,CAAC,SAA5B,CAA6B;IAE7C,IAAM,QAAQ,GAAG,UAAC,IAAU,EAAE,IAAS;QACrC,QAAQ,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAOF,MAAM,CAAC,IAAM,KAAK,GAAG,UAAC,EAA6B;QAA3B,IAAI,UAAA,EAAE,OAAO,aAAA;IAC3B,IAAA,KAAK,GAAK,UAAU,CAAC,WAAW,CAAC,MAA5B,CAA6B;IAE1C,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;QACvB,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YACjC,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC5B;QAED,OAAO,0CAAG,OAAO,CAAI,CAAC;KACvB;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAMF,IAAM,MAAM,GAAG,UAAC,EAAyB;QAAvB,QAAQ,cAAA;IAClB,IAAA,KAAoB,QAAQ,CAAa,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAA1E,KAAK,QAAA,EAAE,QAAQ,QAA2D,CAAC;IAClF,OAAO,oBAAC,WAAW,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,IAAG,QAAQ,CAAwB,CAAC;AAC7F,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { createContext, Dispatch, SetStateAction, useContext, useState } from 'react';\n\ntype View = 'utilities' | 'dropdown-menu';\n\ninterface RouteData {\n  headerText?: string;\n  headerSecondaryText?: string;\n  definition?: any;\n\n  utilityIndex?: number;\n}\n\ninterface RouteState {\n  view: View;\n  data: RouteData | null;\n}\n\ninterface IViewContext {\n  state: RouteState;\n  setState: Dispatch<SetStateAction<RouteState>>;\n}\n\nconst defaultCtx: IViewContext = { state: { view: 'utilities', data: null }, setState: () => {} };\nexport const ViewContext = createContext<IViewContext>(defaultCtx);\n\nexport const useNavigate = () => {\n  const { setState } = useContext(ViewContext);\n\n  const navigate = (view: View, data: any) => {\n    setState({ view, data });\n  };\n\n  return navigate;\n};\n\ninterface RouteProps {\n  view: View;\n  element?: React.ReactNode | ((data: RouteData | null) => React.ReactElement);\n}\n\nexport const Route = ({ view, element }: RouteProps) => {\n  const { state } = useContext(ViewContext);\n\n  if (view === state.view) {\n    if (typeof element === 'function') {\n      return element(state.data);\n    }\n\n    return <>{element}</>;\n  }\n\n  return null;\n};\n\ninterface RouterProps {\n  children?: React.ReactNode;\n}\n\nconst Router = ({ children }: RouterProps) => {\n  const [state, setState] = useState<RouteState>({ view: 'utilities', data: null });\n  return <ViewContext.Provider value={{ state, setState }}>{children}</ViewContext.Provider>;\n};\n\nexport default Router;\n"]}