{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/side-navigation/interfaces.tsx"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { BaseNavigationDetail, CancelableEventHandler, NonCancelableEventHandler } from '../internal/events';\n\nexport interface SideNavigationProps extends BaseComponentProps {\n  /**\n   * Controls the header that appears at the top of the navigation component.\n   *\n   * It contains the following:\n   * - `text` (string) - Specifies the header text.\n   * - `href` (string) - Specifies the `href` that the header links to.\n   * - `logo` (object) - Specifies a logo image.\n   */\n  header?: SideNavigationProps.Header;\n\n  /**\n   * Specifies the `href` of the currently active link.\n   * All items within the navigation with a matching `href` are highlighted.\n   *\n   * `Sections` and `Expandable Page Groups` that contain a highlighted item\n   * are automatically expanded, unless their definitions have the `defaultExpanded`\n   * property explicitly set to `false`.\n   */\n  activeHref?: string;\n\n  /**\n   * Specifies the items to be displayed in the navigation.\n   * Allowed objects are: `Link`, `Divider`, `Section`, `LinkGroup` and `ExpandableLinkGroup`.\n   *\n   * You can inject extra properties (for example, an ID)\n   * in order to identify the item when it's used in an event `detail`\n   * (for more information, see the events section below).\n   *\n   * #### Link\n   * Object that represents an anchor in the navigation.\n   * Links are rendered as `<a>` tags.\n   * - `type` - `'link'`.\n   * - `text` (string) - Specifies the link text.\n   * - `href` (string) - Specifies the `href` of the link.\n   * - `external` (boolean) - Determines whether to display an external link icon next to the link.\n   *      If set to `true`, an external link icon appears next to the link.\n   *      The anchor also has the attributes `target=\"_blank\"` and `rel=\"noopener\"`.\n   *      Additionally, the `activeHref` property won't be modified when a user chooses the link.\n   * - `externalIconAriaLabel` (string) - Adds an aria-label to the external icon.\n   * - `info` (ReactNode) - Enables you to display content next to the link. Although it is technically possible to insert any content,\n   *     our UX guidelines allow only to add a Badge and/or a \"New\" label.\n   *\n   * #### Divider\n   * Object that represents a horizontal divider between navigation content.\n   * It contains `type`: `'divider'` only.\n   *\n   * #### Section\n   * Object that represents a section within the navigation.\n   * - `type`: `'section'`.\n   * - `text` (string) - Specifies the text to display as a title of the section.\n   * - `defaultExpanded` (boolean) - Determines whether the section should be expanded by default. Default value is `true`.\n   * - `items` (array) - Specifies the content of the section. You can use any valid item from this list.\n   *     Although there is no technical limitation to the nesting level,\n   *     our UX recommendation is to use only one level.\n   *\n   * #### LinkGroup\n   * Object that represents a group of links.\n   * - `type`: `'link-group'`.\n   * - `text` (string) - Specifies the text of the group link.\n   * - `href` (string) - Specifies the `href` of the group link.\n   * - `items` (array) - Specifies the content of the section. You can use any valid item from this list.\n   *     Although there is no technical limitation to the nesting level,\n   *     our UX recommendation is to use only one level.\n   *\n   * #### ExpandableLinkGroup\n   *\n   * Object that represents an expandable group of links.\n   * - `type`: `'expandable-link-group'`.\n   * - `text` (string) - Specifies the text of the group link.\n   * - `href` (string) - Specifies the `href` of the group link.\n   * - `defaultExpanded` (boolean) - Specifies whether the group should be expanded by default.\n   *    If not explicitly set, the group is collapsed by default, unless one of the nested links is active.\n   * - `items` (array) - Specifies the content of the section. You can use any valid item from this list.\n   *     Although there is no technical limitation to the nesting level,\n   *     our UX recommendation is to use only one level.\n   */\n  items?: ReadonlyArray<SideNavigationProps.Item>;\n\n  /**\n   * Fired when an anchor is clicked without any modifier (that is, CTRL, ALT, SHIFT).\n   * The event `detail` contains a definition of the clicked item.\n   * Use this event to prevent default browser navigation (by calling `preventDefault` method)\n   * and branch your own routing.\n   *\n   * If the event is prevented the `activeHref` property won't be automatically set\n   * to the href of the clicked item so you'll have to do it yourself.\n   */\n  onFollow?: CancelableEventHandler<SideNavigationProps.FollowDetail>;\n\n  /**\n   * Fired when the expansion state of `Section` or `ExpandablePageGroup` items changes\n   * as a result of a user interaction. The event `detail` contains an object with information about the changed item.\n   *\n   * - `item` (object) - Specifies the item that was changed.\n   * - `expanded` (boolean) - Specifies whether the item is expanded or not.\n   * - `expandableParents` (array) - A list of parent items that have a type of `Section`\n   *     or `ExpandablePageGroup`. Use this `expandableParents` array to set their expanded\n   *     state to `true` if you want your data model to keep track of the current state\n   *     of the navigation items.\n   *\n   * Note: If the expansion is a result of the activation of a nested link\n   * upon changing the `activeHref` property, this event isn't raised.\n   */\n  onChange?: NonCancelableEventHandler<SideNavigationProps.ChangeDetail>;\n}\n\nexport namespace SideNavigationProps {\n  export interface Logo {\n    src: string;\n    alt?: string;\n  }\n  export interface Header {\n    text?: string;\n    href: string;\n    logo?: Logo;\n  }\n\n  export interface Divider {\n    type: 'divider';\n  }\n\n  export interface Link {\n    type: 'link';\n    text: string;\n    href: string;\n    external?: boolean;\n    externalIconAriaLabel?: string;\n    info?: React.ReactNode;\n  }\n\n  export interface Section {\n    type: 'section';\n    text: string;\n    items: ReadonlyArray<Item>;\n    defaultExpanded?: boolean;\n  }\n\n  export interface LinkGroup {\n    type: 'link-group';\n    text: string;\n    href: string;\n    items: ReadonlyArray<Item>;\n  }\n\n  export interface ExpandableLinkGroup {\n    type: 'expandable-link-group';\n    text: string;\n    href: string;\n    items: ReadonlyArray<Item>;\n    defaultExpanded?: boolean;\n  }\n\n  export type Item = Divider | Link | Section | LinkGroup | ExpandableLinkGroup;\n\n  export interface ChangeDetail {\n    item: Section | ExpandableLinkGroup;\n    expanded: boolean;\n    expandableParents: ReadonlyArray<Section | ExpandableLinkGroup>;\n  }\n\n  export interface FollowDetail extends BaseNavigationDetail {\n    text?: string;\n    href: string;\n    type?: 'link' | 'link-group' | 'expandable-link-group';\n    info?: React.ReactNode;\n  }\n}\n"]}