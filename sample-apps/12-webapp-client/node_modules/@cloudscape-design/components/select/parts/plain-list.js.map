{"version":3,"file":"plain-list.js","sourceRoot":"","sources":["../../../../src/select/parts/plain-list.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,WAAW,MAAM,wCAAwC,CAAC;AACjE,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,OAAO,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD,OAAO,EAAE,kBAAkB,EAAE,MAAM,4CAA4C,CAAC;AAEhF,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAmBrC,IAAM,SAAS,GAAG,UAChB,EAWkB,EAClB,GAA6C;QAX3C,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,eAAe,qBAAA,EACf,cAAc,oBAAA,EACd,UAAU,gBAAA,EACV,UAAU,gBAAA,EACV,iBAAiB,uBAAA,EACjB,UAAU,gBAAA,EACV,oBAAoB,0BAAA,EACpB,mBAAmB,yBAAA;IAIrB,IAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC;IAC9B,mBAAmB,CACjB,GAAG,EACH,cAAM,OAAA,UAAC,KAAa;;QAClB,IAAM,IAAI,GAAG,MAAA,OAAO,CAAC,OAAO,0CAAE,aAAa,CAAC,+BAAuB,KAAK,QAAI,CAAC,CAAC;QAC9E,IAAI,UAAU,IAAI,IAAI,EAAE;YACtB,kBAAkB,CAAC,IAAmB,CAAC,CAAC;SACzC;IACH,CAAC,EALK,CAKL,EACD,CAAC,UAAU,EAAE,OAAO,CAAC,CACtB,CAAC;IAEF,OAAO,CACL,oBAAC,WAAW,eAAK,SAAS;QACvB,aAAa,CAAC;YACb,OAAO,EAAE,eAAe;YACxB,cAAc,gBAAA;YACd,cAAc,gBAAA;YACd,UAAU,YAAA;YACV,UAAU,YAAA;YACV,iBAAiB,mBAAA;YACjB,oBAAoB,sBAAA;YACpB,mBAAmB,qBAAA;SACpB,CAAC;QACD,UAAU,CAAC,CAAC,CAAC,CACZ,4BAAI,IAAI,EAAC,QAAQ,EAAC,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,IAC/C,UAAU,CACR,CACN,CAAC,CAAC,CAAC,IAAI,CACI,CACf,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,UAAU,CAAC,SAAS,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport OptionsList from '../../internal/components/options-list';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { renderOptions } from '../utils/render-options';\nimport { MenuProps, GetOptionProps } from '../utils/use-select';\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport { scrollUntilVisible } from '../../internal/utils/scrollable-containers';\n\nimport styles from './styles.css.js';\n\nexport interface SelectListProps {\n  menuProps: MenuProps;\n  getOptionProps: GetOptionProps;\n  filteredOptions: ReadonlyArray<DropdownOption>;\n  filteringValue: string;\n  isKeyboard: boolean;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  listBottom?: React.ReactNode;\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n}\n\nexport namespace SelectListProps {\n  export type SelectListRef = (index: number) => void;\n}\n\nconst PlainList = (\n  {\n    menuProps,\n    getOptionProps,\n    filteredOptions,\n    filteringValue,\n    isKeyboard,\n    checkboxes,\n    hasDropdownStatus,\n    listBottom,\n    useInteractiveGroups,\n    screenReaderContent,\n  }: SelectListProps,\n  ref: React.Ref<SelectListProps.SelectListRef>\n) => {\n  const menuRef = menuProps.ref;\n  useImperativeHandle(\n    ref,\n    () => (index: number) => {\n      const item = menuRef.current?.querySelector(`[data-mouse-target=\"${index}\"]`);\n      if (isKeyboard && item) {\n        scrollUntilVisible(item as HTMLElement);\n      }\n    },\n    [isKeyboard, menuRef]\n  );\n\n  return (\n    <OptionsList {...menuProps}>\n      {renderOptions({\n        options: filteredOptions,\n        getOptionProps,\n        filteringValue,\n        isKeyboard,\n        checkboxes,\n        hasDropdownStatus,\n        useInteractiveGroups,\n        screenReaderContent,\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default forwardRef(PlainList);\n"]}