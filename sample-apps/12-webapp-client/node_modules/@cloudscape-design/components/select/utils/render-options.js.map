{"version":3,"file":"render-options.js","sourceRoot":"","sources":["../../../../src/select/utils/render-options.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,IAAI,MAAM,eAAe,CAAC;AACjC,OAAO,eAAe,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAgBhD,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,EAWV;QAVlB,OAAO,aAAA,EACP,cAAc,oBAAA,EACd,cAAc,oBAAA,EACd,aAAa,mBAAA,EACb,kBAAkB,EAAlB,UAAU,mBAAG,KAAK,KAAA,EAClB,iBAAiB,uBAAA,EACjB,YAAY,kBAAA,EACZ,oBAAoB,0BAAA,EACpB,mBAAmB,yBAAA,EACnB,WAAW,iBAAA;IAEX,OAAO,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;QAC/B,IAAM,WAAW,GAAG,YAAY,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QACxD,IAAM,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5D,IAAM,KAAK,GAAG,YAAY,CAAC;YACzB,MAAM,QAAA;YACN,KAAK,EAAE,WAAW;YAClB,cAAc,gBAAA;YACd,cAAc,gBAAA;YACd,UAAU,YAAA;SACX,CAAC,CAAC;QAEH,IAAM,UAAU,GAAG,KAAK,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAChD,IAAM,SAAS,GAAG,CAAC,iBAAiB,IAAI,UAAU,CAAC;QACnD,IAAM,QAAQ,GAAG,oBAAoB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;QAE/D,OAAO,CACL,oBAAC,QAAQ,aACP,GAAG,EAAE,WAAW,IACZ,KAAK,IACT,eAAe,EAAE,WAAW,IAAI,WAAW,CAAC,KAAK,EACjD,GAAG,EAAE,WAAW,IAAI,WAAW,CAAC,UAAU,EAC1C,SAAS,EAAE,SAAS,EACpB,mBAAmB,EAAE,mBAAmB,EACxC,YAAY,EAAE,WAAW,GAAG,CAAC,EAC7B,WAAW,EAAE,WAAW,EACxB,aAAa,EAAE,aAAa,IAC5B,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { VirtualItem } from 'react-virtual';\nimport Item from '../parts/item';\nimport MutliselectItem from '../parts/multiselect-item';\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport { getItemProps } from './get-item-props';\nimport { HighlightType } from '../../internal/components/options-list/utils/use-highlight-option';\n\nexport interface RenderOptionProps {\n  options: ReadonlyArray<DropdownOption>;\n  getOptionProps: any;\n  filteringValue: string;\n  highlightType: HighlightType;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  virtualItems?: VirtualItem[];\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n}\n\nexport const renderOptions = ({\n  options,\n  getOptionProps,\n  filteringValue,\n  highlightType,\n  checkboxes = false,\n  hasDropdownStatus,\n  virtualItems,\n  useInteractiveGroups,\n  screenReaderContent,\n  ariaSetsize,\n}: RenderOptionProps) => {\n  return options.map((option, index) => {\n    const virtualItem = virtualItems && virtualItems[index];\n    const globalIndex = virtualItem ? virtualItem.index : index;\n    const props = getItemProps({\n      option,\n      index: globalIndex,\n      getOptionProps,\n      filteringValue,\n      checkboxes,\n    });\n\n    const isLastItem = index === options.length - 1;\n    const padBottom = !hasDropdownStatus && isLastItem;\n    const ListItem = useInteractiveGroups ? MutliselectItem : Item;\n\n    return (\n      <ListItem\n        key={globalIndex}\n        {...props}\n        virtualPosition={virtualItem && virtualItem.start}\n        ref={virtualItem && virtualItem.measureRef}\n        padBottom={padBottom}\n        screenReaderContent={screenReaderContent}\n        ariaPosinset={globalIndex + 1}\n        ariaSetsize={ariaSetsize}\n        highlightType={highlightType}\n      />\n    );\n  });\n};\n"]}