{"version":3,"file":"use-load-items.js","sourceRoot":"","sources":["../../../../src/select/utils/use-load-items.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AAW/D,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,EAAuD;QAArD,WAAW,iBAAA,EAAE,OAAO,aAAA,EAAE,UAAU,gBAAA;IAC7D,IAAM,iBAAiB,GAAG,MAAM,CAAqB,SAAS,CAAC,CAAC;IAEhE,IAAM,aAAa,GAAG,UAAC,aAAqB;QAC1C,IAAI,iBAAiB,CAAC,OAAO,KAAK,aAAa,EAAE;YAC/C,OAAO;SACR;QACD,iBAAiB,CAAC,OAAO,GAAG,aAAa,CAAC;QAC1C,sBAAsB,CAAC,WAAW,EAAE,EAAE,aAAa,eAAA,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3F,CAAC,CAAC;IAEF,IAAM,cAAc,GAAG;QACrB,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;QACvC,UAAU,KAAK,SAAS;YACtB,sBAAsB,CAAC,WAAW,EAAE;gBAClC,SAAS,WAAA;gBACT,QAAQ,EAAE,KAAK;gBACf,aAAa,EAAE,iBAAiB,CAAC,OAAO,IAAI,EAAE;aAC/C,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,IAAM,mBAAmB,GAAG;QAC1B,OAAA,sBAAsB,CAAC,WAAW,EAAE;YAClC,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,IAAI;YACd,aAAa,EAAE,iBAAiB,CAAC,OAAO,IAAI,EAAE;SAC/C,CAAC;IAJF,CAIE,CAAC;IAEL,OAAO;QACL,aAAa,eAAA;QACb,cAAc,gBAAA;QACd,mBAAmB,qBAAA;KACpB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { SelectProps } from '../interfaces';\nimport { OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { DropdownStatusProps } from '../../internal/components/dropdown-status';\n\ninterface UseLoadItemsProps {\n  onLoadItems: SelectProps['onLoadItems'];\n  options: ReadonlyArray<OptionDefinition | OptionGroup>;\n  statusType: DropdownStatusProps.StatusType;\n}\n\nexport const useLoadItems = ({ onLoadItems, options, statusType }: UseLoadItemsProps) => {\n  const prevFilteringText = useRef<string | undefined>(undefined);\n\n  const fireLoadItems = (filteringText: string) => {\n    if (prevFilteringText.current === filteringText) {\n      return;\n    }\n    prevFilteringText.current = filteringText;\n    fireNonCancelableEvent(onLoadItems, { filteringText, firstPage: true, samePage: false });\n  };\n\n  const handleLoadMore = () => {\n    const firstPage = options.length === 0;\n    statusType === 'pending' &&\n      fireNonCancelableEvent(onLoadItems, {\n        firstPage,\n        samePage: false,\n        filteringText: prevFilteringText.current || '',\n      });\n  };\n\n  const handleRecoveryClick = () =>\n    fireNonCancelableEvent(onLoadItems, {\n      firstPage: false,\n      samePage: true,\n      filteringText: prevFilteringText.current || '',\n    });\n\n  return {\n    fireLoadItems,\n    handleLoadMore,\n    handleRecoveryClick,\n  };\n};\n"]}