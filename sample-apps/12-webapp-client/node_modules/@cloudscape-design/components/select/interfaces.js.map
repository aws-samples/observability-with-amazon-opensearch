{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/select/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { OptionDefinition, OptionGroup as OptionGroupDefinition } from '../internal/components/option/interfaces';\nimport { DropdownStatusProps } from '../internal/components/dropdown-status/interfaces';\nimport {\n  BaseDropdownHostProps,\n  OptionsFilteringType,\n  OptionsLoadItemsDetail,\n} from '../internal/components/dropdown/interfaces';\n\nexport interface BaseSelectProps\n  extends BaseDropdownHostProps,\n    BaseComponentProps,\n    FormFieldValidationControlProps,\n    DropdownStatusProps {\n  /**\n   * Specifies an array of options that are displayed to the user as a dropdown list.\n   * The options can be grouped using `OptionGroup` objects.\n   *\n   * #### Option\n   * - `value` (string) - The returned value of the option when selected.\n   * - `label` (string) - (Optional) Option text displayed to the user.\n   * - `description` (string) - (Optional) Further information about the option that appears below the label.\n   * - `disabled` (boolean) - (Optional) Determines whether the option is disabled.\n   * - `labelTag` (string) - (Optional) A label tag that provides additional guidance, shown next to the label.\n   * - `tags` [string[]] - (Optional) A list of tags giving further guidance about the option.\n   * - `filteringTags` [string[]] - (Optional) A list of additional tags used for automatic filtering.\n   * - `iconName` (string) - (Optional) Specifies the name of an [icon](/components/icon/) to display in the option.\n   * - `iconAlt` (string) - (Optional) Specifies alternate text for a custom icon, for use with `iconUrl`.\n   * - `iconUrl` (string) - (Optional) URL of a custom icon.\n   * - `iconSvg` (ReactNode) - (Optional) Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n   *\n   * #### OptionGroup\n   * - `label` (string) - Option group text displayed to the user.\n   * - `disabled` (boolean) - (Optional) Determines whether the option group is disabled.\n   * - `options` (Option[]) - (Optional) The options under this group.\n   *\n   * Note: Only one level of option nesting is supported.\n   *\n   * If you want to use the built-in filtering capabilities of this component, provide\n   * a list of all valid options here and they will be automatically filtered based on the user's filtering input.\n   *\n   * Alternatively, you can listen to the `onChange` or `onLoadItems` event and set new options\n   * on your own.\n   **/\n  options?: SelectProps.Options;\n  /**\n   * Determines how filtering is applied to the list of `options`:\n   * * `auto` - The component will automatically filter options based on user input.\n   * * `manual` - You will set up `onChange` or `onLoadItems` event listeners and filter options on your side or request\n   * them from server.\n   *\n   * By default the component will filter the provided `options` based on the value of the filtering input field.\n   * Only options that have a `value` or `label` that contains the input value as a substring\n   * are displayed in the list of options.\n   *\n   * If you set this property to `manual`, this default filtering mechanism is disabled and all provided `options` are\n   * displayed in the dropdown list. In that case make sure that you use the `onChange` or `onLoadItems` events in order\n   * to set the `options` property to the options that are relevant for the user, given the filtering input value.\n   *\n   * Note: Manual filtering doesn't disable match highlighting.\n   **/\n  filteringType?: OptionsFilteringType;\n\n  /**\n   * Determines whether the whole select component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Specifies the placeholder to display in the filtering input if filtering is enabled.\n   */\n  filteringPlaceholder?: string;\n  /**\n   * Adds an `aria-label` on the built-in filtering input if filtering is enabled.\n   */\n  filteringAriaLabel?: string;\n  /**\n   * Deprecated, has no effect.\n   * @deprecated\n   */\n  name?: string;\n  /**\n   * Specifies the hint text that's displayed in the field when no option has been selected.\n   */\n  placeholder?: string;\n  /**\n   * Specifies the ID for the trigger component. It uses an automatically generated ID by default.\n   */\n  controlId?: string;\n  /**\n   * Adds `aria-required` to the native input element.\n   */\n  ariaRequired?: boolean;\n  /**\n   * Adds `aria-label` to the select element.\n   */\n  ariaLabel?: string;\n  /**\n   * Specifies the localized string that describes an option as being selected.\n   * This is required to provide a good screen reader experience. For more information, see the\n   * [accessibility guidelines](/components/select/?tabId=usage#accessibility-guidelines).\n   */\n  selectedAriaLabel?: string;\n  /**\n   * Overrides the element that is announced to screen readers\n   * when the highlighted option changes. By default, this announces\n   * the option's name and properties, and its selected state if\n   * the `selectedLabel` property is defined.\n   * The highlighted option is provided, and its group (if groups\n   * are used and it differs from the group of the previously highlighted option).\n   *\n   * For more information, see the\n   * [accessibility guidelines](/components/select/?tabId=usage#accessibility-guidelines).\n   */\n  renderHighlightedAriaLive?: SelectProps.ContainingOptionAndGroupString;\n  /**\n   * Displayed for `filteringType=\"auto\"` when there are no matches for the filtering.\n   */\n  noMatch?: React.ReactNode;\n  /**\n   * Called when input focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler;\n  /**\n   * Called when input focus is set onto the UI control.\n   */\n  onFocus?: NonCancelableEventHandler;\n}\n\nexport interface SelectProps extends BaseSelectProps {\n  /**\n   * Defines the variant of the trigger. You can use a simple label or the entire option (`label | option`)\n   */\n  triggerVariant?: SelectProps.TriggerVariant;\n  /**\n   * Specifies the currently selected option.\n   * If you want to clear the selection, use `null`.\n   */\n  selectedOption: SelectProps.Option | null;\n  /**\n   * Called when the user selects an option.\n   * The event `detail` contains the current `selectedOption`.\n   */\n  onChange?: NonCancelableEventHandler<SelectProps.ChangeDetail>;\n}\n\nexport namespace SelectProps {\n  export type FilteringType = OptionsFilteringType;\n  export type TriggerVariant = 'label' | 'option';\n\n  export type Option = OptionDefinition;\n  export type OptionGroup = OptionGroupDefinition;\n  export type Options = ReadonlyArray<Option | OptionGroup>;\n\n  export type LoadItemsDetail = OptionsLoadItemsDetail;\n\n  export interface ChangeDetail {\n    selectedOption: Option;\n  }\n\n  export interface ContainingOptionAndGroupString {\n    (option: Option, group?: OptionGroup): string;\n  }\n\n  export interface Ref {\n    /**\n     * Sets focus on the element without opening the dropdown or showing a visual focus indicator.\n     */\n    focus(): void;\n  }\n}\n"]}