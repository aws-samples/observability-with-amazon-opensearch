{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/pagination/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface PaginationProps {\n  /**\n   * Index of the current page. The first page has an index of 1.\n   */\n  currentPageIndex: number;\n\n  /**\n   * Sets the total number of pages. Only positive integers are allowed.\n   */\n  pagesCount: number;\n\n  /**\n   * Sets the pagination variant. It can be either default (when setting it to `false`) or open ended (when setting it\n   * to `true`). Default pagination navigates you through the items list. The open-end variant enables you\n   * to lazy-load your items because it always displays three dots before the next page icon. The next page button is\n   * never disabled. When the user clicks on it but there are no more items to show, the\n   * `onNextPageClick` handler is called with `requestedPageAvailable: false` in the event detail.\n   */\n  openEnd?: boolean;\n\n  /**\n   * If set to `true`, the pagination links will be disabled. Use it, for example, if you want to prevent the user\n   * from changing page before items are loaded.\n   */\n  disabled?: boolean;\n\n  /**\n   * Adds aria-labels to the pagination buttons:\n   * * `previousPageLabel` (string) - Previous page button.\n   * * `pageLabel` (number => string) - Individual page button, this function is called for every page number that's rendered.\n   * * `nextPageLabel` (string) - Next page button\n   *\n   * Example:\n   * ```\n   * {\n   *   nextPageLabel: 'Next page',\n   *   previousPageLabel: 'Previous page',\n   *   pageLabel: pageNumber => `Page ${pageNumber}`\n   * }\n   * ```\n   */\n  ariaLabels?: PaginationProps.Labels;\n\n  /**\n   * Called when a user interaction causes a pagination change. The event `detail` contains the new `currentPageIndex`.\n   */\n  onChange?: NonCancelableEventHandler<PaginationProps.ChangeDetail>;\n\n  /**\n   * Called when the previous page arrow is clicked. The event `detail` contains the following:\n   * * `requestedPageAvailable` (boolean) - Always set to `true`.\n   * * `requestedPageIndex` (integer) - The index of the requested page.\n   */\n  onPreviousPageClick?: NonCancelableEventHandler<PaginationProps.PageClickDetail>;\n\n  /**\n   * Called when the next page arrow is clicked. The event `detail` contains the following:\n   * * `requestedPageAvailable` (boolean) - Indicates whether the requested page is available for display.\n   *   The value can be `false` when the `openEnd` property is set to `true`.\n   * * `requestedPageIndex` (integer) - The index of the requested page.\n   */\n  onNextPageClick?: NonCancelableEventHandler<PaginationProps.PageClickDetail>;\n}\n\nexport namespace PaginationProps {\n  export interface Labels {\n    nextPageLabel?: string;\n    previousPageLabel?: string;\n    pageLabel?: (pageNumber: number) => string;\n  }\n\n  export interface PageClickDetail {\n    requestedPageAvailable: boolean;\n    requestedPageIndex: number;\n  }\n\n  export interface ChangeDetail {\n    currentPageIndex: number;\n  }\n}\n"]}