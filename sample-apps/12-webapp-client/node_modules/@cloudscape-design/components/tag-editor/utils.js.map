{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/tag-editor/utils.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C;;GAEG;AACH,MAAM,UAAU,SAAS,CAAI,KAAuB,EAAE,SAA4B;IAChF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;YACvB,OAAO,CAAC,CAAC;SACV;KACF;IACD,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC;AAED,SAAS,iBAAiB,CACxB,IAAsB,EACtB,IAAsB,EACtB,OAAsC;IAEtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;QAC3D,sDAAsD;QACtD,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;YACrB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACzB;QACD,6DAA6D;QAC7D,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;YACrB,uCAAW,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,SAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAE;SAChD;QACD,kDAAkD;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAC9B,qDAAW,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,UAAE,IAAI,CAAC,CAAC,CAAC,WAAK,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,QAAE;SAC5G;KACF;IAED,kDAAkD;IAClD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAI,KAAuB,EAAE,OAAsC;IACjG,IAAM,GAAG,GAAG,MAAM,CAAmB,KAAK,CAAC,CAAC;IAC5C,IAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC/D,SAAS,CAAC;QACR,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACd,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\n\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex<T>(array: ReadonlyArray<T>, condition: (t: T) => unknown): number {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction makeMemoizedArray<T>(\n  prev: ReadonlyArray<T>,\n  next: ReadonlyArray<T>,\n  isEqual: (prev: T, next: T) => boolean\n): ReadonlyArray<T> {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n\n  // All the references match. Return the old array.\n  return prev;\n}\n\nexport function useMemoizedArray<T>(array: ReadonlyArray<T>, isEqual: (prev: T, next: T) => boolean): ReadonlyArray<T> {\n  const ref = useRef<ReadonlyArray<T>>(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}\n"]}