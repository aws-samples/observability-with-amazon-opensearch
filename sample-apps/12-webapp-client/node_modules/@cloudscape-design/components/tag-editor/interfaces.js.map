{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/tag-editor/interfaces.tsx"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface TagEditorProps extends BaseComponentProps {\n  /**\n   * Specifies an array of tags that are displayed to the user. Each tag item has the following properties:\n   * - `key` (string) - The key of the tag that's displayed in the corresponding key field.\n   * - `value` (string) - The value of the tag that's displayed in the corresponding value field.\n   * - `existing` (boolean) - Specifies if this is an existing tag for the resource.\n   *      When set to `true`, if the tag is deleted its `markedForRemoval` property is to `true`.\n   *      When set to `false`, deletion of the tag removes the tag from the `tags` list.\n   * - `markedForRemoval` (boolean) - Specifies if this tag has been marked for removal.\n   *      This property is set to `true` by the component when a user removes an existing tag.\n   *      The item will remain in the `tags` list. When set to `true`, the user is presented with the option to undo the removal operation.\n   * - `valueSuggestionOptions` (Array<AutosuggestProps.Option>) - An array of autosuggest suggestion options associated with the specified tag key.\n   */\n  tags?: ReadonlyArray<TagEditorProps.Tag>;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings: TagEditorProps.I18nStrings;\n\n  /**\n   * Renders the component in a loading state.\n   */\n  loading?: boolean;\n\n  /**\n   * Specifies the maximum number of tags that a customer can add.\n   */\n  tagLimit?: number;\n\n  /**\n   * Specifies a regular expression string that overrides the default acceptable\n   * character validation. You should use this property only when absolutely necessary.\n   */\n  allowedCharacterPattern?: string;\n\n  /**\n   * Specifies a function that returns all the keys for a resource.\n   * The expected return type of the function should be a promise that\n   * resolves to a list of strings of all the keys (for example, `['key1', 'key2']`).\n   */\n  keysRequest?: (key: string) => Promise<ReadonlyArray<string>>;\n\n  /**\n   * Specifies a function that returns all the values for a specified key\n   * of a resource. The expected return type of the function should be a promise\n   * that resolves to a list of strings of all the values (for example, `['value1', 'value2']`).\n   *\n   * You should return a rejected promise when the `key` parameter is an empty string.\n   */\n  valuesRequest?: (key: string, value: string) => Promise<ReadonlyArray<string>>;\n\n  /**\n   * Called when any tag operation occurs.\n   * The event `detail` object contains the full updated state of `tags`,\n   * and whether the component is in a `valid` state.\n   */\n  onChange?: NonCancelableEventHandler<TagEditorProps.ChangeDetail>;\n}\n\nexport namespace TagEditorProps {\n  export interface Tag {\n    /**\n     * The key of the tag that will be displayed in the corresponding key field.\n     */\n    key: string;\n\n    /**\n     * The value of the tag that will be displayed in the corresponding value field.\n     */\n    value: string;\n\n    /**\n     * Whether this is an existing tag for the resource. If set to `true`, deletion of the tag will set the `markedForRemoval` property to `true`. If set to `false`, deletion of the tag will remove the tag from the `tags` list.\n     */\n    existing: boolean;\n\n    /**\n     * Whether this tag has been marked for removal. This property will be set to `true` by the component when a user tries to remove an existing tag. The item will remain in the `tags` list. When set to `true`, the user will be presented with the option to undo the removal operation.\n     */\n    markedForRemoval?: boolean;\n\n    /**\n     * An array of suggested values for the specified tag key.\n     */\n    valueSuggestionOptions?: ReadonlyArray<AutosuggestProps.Option>;\n  }\n\n  export interface I18nStrings {\n    keyPlaceholder: string;\n    valuePlaceholder: string;\n    addButton: string;\n    removeButton: string;\n    undoButton: string;\n    undoPrompt: string;\n    loading: string;\n    keyHeader: string;\n    valueHeader: string;\n    optional: string;\n    keySuggestion: string;\n    valueSuggestion: string;\n    tooManyKeysSuggestion: string;\n    tooManyValuesSuggestion: string;\n    emptyTags: string;\n    keysSuggestionLoading: string;\n    keysSuggestionError: string;\n    valuesSuggestionError: string;\n    valuesSuggestionLoading: string;\n    emptyKeyError: string;\n    maxKeyCharLengthError: string;\n    maxValueCharLengthError: string;\n    duplicateKeyError: string;\n    invalidKeyError: string;\n    invalidValueError: string;\n    awsPrefixError: string;\n    tagLimit: (availableTags: number, tagLimit: number) => string;\n    tagLimitReached: (tagLimit: number) => string;\n    tagLimitExceeded: (tagLimit: number) => string;\n    enteredKeyLabel: (enteredText: string) => string;\n    enteredValueLabel: (enteredText: string) => string;\n  }\n\n  export interface ChangeDetail {\n    tags: ReadonlyArray<TagEditorProps.Tag>;\n    valid: boolean;\n  }\n\n  export interface Ref {\n    /**\n     * Focuses the first error within the component.\n     * If no error is present, no element is focused.\n     */\n    focus(): void;\n  }\n}\n"]}