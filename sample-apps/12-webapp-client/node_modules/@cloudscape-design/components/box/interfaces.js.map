{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/box/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\n\nexport interface BoxProps extends BaseComponentProps {\n  /**\n   * Defines the style of element to display.\n   *\n   * - If you set it to `'div'`, `'span'`, `'h1'`, `'h2'`, `'h3'`, `'h4'`, `'h5'`, `'p'`, `'strong'`, `'small'`, `'code'`, `'pre'`, or `'samp'`, the variant is also used as the HTML tag name.\n   * - If you set it to `awsui-key-label`, the component will display as a `div`.\n   * - If you set it to `awsui-value-large`, the component will display as a `span`.\n   *\n   * Override the HTML tag by using property `tagOverride`.\n   */\n  variant?: BoxProps.Variant;\n  /**\n   * Overrides the default HTML tag provided by the variant.\n   */\n  tagOverride?: string;\n  /**\n   * Overrides the display of the element. You can set it to the following values:\n   *\n   * - `block` - Specifies block display.\n   * - `inline` - Specifies inline display.\n   * - `inline-block` - Specifies inline-block display.\n   * - `none` - Hides the box.\n   *\n   * Note: If you don't set it, the display depends on the variant.\n   */\n  display?: BoxProps.Display;\n  /**\n   * Adds margins to the element. It can be the following:\n   *\n   * - A single string with a size. This applies the same margin to all sides (that is, top, right, bottom, left).\n   * - An object specifying the size of the margin per side. The object has the following format:\n   * ```\n   * {\n   *   top: \"size of top margin\",\n   *   right: \"size of right margin\",\n   *   bottom: \"size of bottom margin\",\n   *   left: \"size of left margin\",\n   *   horizontal: \"size of left and right margin\",\n   *   vertical: \"size of top and bottom margin\",\n   * }\n   * ```\n   *\n   * The size can be `n`, `xxxs`, `xxs`, `xs`, `s`, `m`, `l`, `xl`, `xxl`, `xxxl`, where `n` stands for none.\n   * Sizes are automatically scaled down in compact mode.\n   *\n   *  For example, `margin=\"s\"` adds a small margin to all sides.\n   * `margin={{ right: \"l\", bottom: \"s\" }}` adds a small margin to the bottom and a large margin to the right.\n   */\n  margin?: BoxProps.SpacingSize | BoxProps.Spacing;\n  /**\n   * Adds padding to the element. It can be the following:\n   *\n   * - A single string with a size. This applies the same padding to all sides (that is, top, right, bottom, left).\n   * - An object specifying the size of padding per side. The object has the following format:\n   * ```\n   * {\n   *   top: \"size of top padding\",\n   *   right: \"size of right padding\",\n   *   bottom: \"size of bottom padding\",\n   *   left: \"size of left padding\",\n   *   horizontal: \"size of left and right padding\",\n   *   vertical: \"size of top and bottom padding\",\n   * }\n   * ```\n   *\n   * The size can be `n`, `xxxs`, `xxs`, `xs`, `s`, `m`, `l`, `xl`, `xxl`, `xxxl`, where `n` stands for none.\n   * Sizes are automatically scaled down in compact mode.\n   *\n   *  For example, `padding=\"s\"` adds small padding to all sides.\n   * `padding={{ right: \"l\", bottom: \"s\" }}` adds small padding to the bottom and large padding to the right.\n   */\n  padding?: BoxProps.SpacingSize | BoxProps.Spacing;\n  /**\n   * Defines the text alignment within the element. You can set it to `left`, `center`, or `right`.\n   */\n  textAlign?: BoxProps.TextAlign;\n  /**\n   * Defines the floating behavior. You can set it to `left` or `right`.\n   */\n  float?: BoxProps.Float;\n  /**\n   * Overrides the font size and line height. If not set, the font size and line height depend on the variant.\n   */\n  fontSize?: BoxProps.FontSize;\n  /**\n   * Overrides the font weight. If not set, the value depends on the variant.\n   * @visualrefresh 'heavy'\n   */\n  fontWeight?: BoxProps.FontWeight;\n  /**\n   * Overrides the text color. You can set it to the following values:\n   *\n   * - `inherit` - Inherits the color from the parent element. For example, use this to style content\n   *      in Flashbars and to style the `empty` and `noMatch` slots of the Table and Cards components.\n   * - `text-label` - Specifies the text color for non-form labels. For example, use it for the key in key/value pairs.\n   * - `text-body-secondary` - Specifies the color for secondary text.\n   * - `text-status-error` - Specifies the color for error text and icons.\n   * - `text-status-success` - Specifies the color for success text and icons.\n   * - `text-status-info` - Specifies the color for info text and icon.\n   * - `text-status-inactive` - Specifies the color for inactive and loading text and icons.\n   *\n   * Note: If you don't set it, the text color depends on the variant.\n   */\n  color?: BoxProps.Color;\n  /**\n   * Content of the box.\n   * @displayname content\n   */\n  children?: React.ReactNode;\n}\n\nexport namespace BoxProps {\n  export type Variant =\n    | 'div'\n    | 'span'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'p'\n    | 'strong'\n    | 'small'\n    | 'code'\n    | 'pre'\n    | 'samp'\n    | 'awsui-key-label'\n    | 'awsui-value-large';\n\n  export type Display = 'block' | 'inline' | 'inline-block' | 'none';\n  export type TextAlign = 'left' | 'center' | 'right';\n  export type Float = 'left' | 'right';\n  export type FontSize =\n    | 'body-s'\n    | 'body-m'\n    | 'heading-xs'\n    | 'heading-s'\n    | 'heading-m'\n    | 'heading-l'\n    | 'heading-xl'\n    | 'display-l';\n  export type FontWeight = 'light' | 'normal' | 'bold' | 'heavy';\n  export type Color =\n    | 'inherit'\n    | 'text-label'\n    | 'text-body-secondary'\n    | 'text-status-error'\n    | 'text-status-success'\n    | 'text-status-info'\n    | 'text-status-inactive';\n  export type SpacingSize = 'n' | 'xxxs' | 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl';\n  export interface Spacing {\n    top?: BoxProps.SpacingSize;\n    right?: BoxProps.SpacingSize;\n    bottom?: BoxProps.SpacingSize;\n    left?: BoxProps.SpacingSize;\n    horizontal?: BoxProps.SpacingSize;\n    vertical?: BoxProps.SpacingSize;\n  }\n}\n"]}