{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/box/internal.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { BoxProps } from './interfaces';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalBoxProps = BoxProps & InternalBaseComponentProps;\n\nexport default function InternalBox({\n  variant = 'div',\n  tagOverride,\n  margin = {},\n  padding = {},\n  display,\n  textAlign,\n  float,\n  fontSize,\n  fontWeight,\n  color,\n  children,\n  __internalRootRef = null,\n  ...props\n}: InternalBoxProps) {\n  const baseProps = getBaseProps(props);\n  const marginsClassNamesSuffices = getClassNamesSuffixes(margin);\n  const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);\n  // This can be any arbitrary string if passed into tagOverride.\n  // We appease the compiler with an incorrect type.\n  const Tag = getTag(variant, tagOverride) as 'div';\n\n  const className = clsx(\n    baseProps.className,\n    styles.root,\n    styles.box,\n    styles[`${variant.replace(/^awsui-/, '')}-variant`],\n    marginsClassNamesSuffices.map(suffix => styles[`m-${suffix}`]),\n    paddingsClassNamesSuffices.map(suffix => styles[`p-${suffix}`]),\n    styles[`d-${display}`],\n    styles[`f-${float}`],\n    styles[`color-${color || 'default'}`],\n    styles[`font-size-${fontSize || 'default'}`],\n    styles[`font-weight-${fontWeight || 'default'}`],\n    styles[`t-${textAlign}`]\n  );\n\n  return (\n    <Tag {...baseProps} className={className} ref={__internalRootRef}>\n      {children}\n    </Tag>\n  );\n}\n\nconst getClassNamesSuffixes = (value: BoxProps.SpacingSize | BoxProps.Spacing) => {\n  if (typeof value === 'string') {\n    return [value];\n  }\n  const sides = ['top', 'right', 'bottom', 'left', 'horizontal', 'vertical'] as const;\n  return sides.filter(side => !!value[side]).map(side => `${side}-${value[side]}`);\n};\n\nconst getTag = (variant: BoxProps.Variant, tagOverride: BoxProps['tagOverride']) => {\n  if (tagOverride) {\n    return tagOverride;\n  }\n\n  if (variant === 'awsui-value-large') {\n    return 'span';\n  }\n\n  if (variant === 'awsui-key-label') {\n    return 'div';\n  }\n\n  return variant;\n};\n"]}