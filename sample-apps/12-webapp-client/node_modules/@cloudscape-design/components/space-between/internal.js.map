{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/space-between/internal.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,eAAe,MAAM,8BAA8B,CAAC;AAM3D,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAAC,EAMjB;IAL1B,IAAA,iBAAsB,EAAtB,SAAS,mBAAG,UAAU,KAAA,EACtB,IAAI,UAAA,EACJ,QAAQ,cAAA,EACR,iBAAiB,uBAAA,EACd,KAAK,cALmC,sDAM5C,CADS;IAER,IAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;IAEtC;;OAEG;IACH,IAAM,iBAAiB,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;IAEpD,OAAO,CACL,wCACM,SAAS,IACb,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,UAAG,SAAS,cAAI,IAAI,CAAE,CAAC,CAAC,EACpG,GAAG,EAAE,iBAAiB,KAErB,iBAAiB,CAAC,GAAG,CAAC,UAAA,KAAK;QAC1B,sEAAsE;QACtE,8DAA8D;QAC9D,IAAM,GAAG,GAAI,KAAa,CAAC,GAAG,CAAC;QAE/B,OAAO,CACL,6BAAK,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,gBAAS,SAAS,cAAI,IAAI,CAAE,CAAC,CAAC,IAC/E,KAAK,CACF,CACP,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { SpaceBetweenProps } from './interfaces';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalSpaceBetweenProps = SpaceBetweenProps & InternalBaseComponentProps;\n\nexport default function InternalSpaceBetween({\n  direction = 'vertical',\n  size,\n  children,\n  __internalRootRef,\n  ...props\n}: InternalSpaceBetweenProps) {\n  const baseProps = getBaseProps(props);\n\n  /*\n   Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n   */\n  const flattenedChildren = flattenChildren(children);\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles[direction], styles[`${direction}-${size}`])}\n      ref={__internalRootRef}\n    >\n      {flattenedChildren.map(child => {\n        // If this react child is a primitive value, the key will be undefined\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const key = (child as any).key;\n\n        return (\n          <div key={key} className={clsx(styles.child, styles[`child-${direction}-${size}`])}>\n            {child}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]}