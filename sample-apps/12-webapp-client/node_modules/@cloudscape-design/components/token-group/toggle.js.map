{"version":3,"file":"toggle.js","sourceRoot":"","sources":["../../../src/token-group/toggle.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAC3C,OAAO,YAAY,MAAM,kBAAkB,CAAC;AAC5C,OAAO,eAAe,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAA6B,sBAAsB,EAAE,MAAM,oBAAoB,CAAC;AAGvF,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAUrC,IAAM,YAAY,GAAG,UAAC,EAOF;QANlB,SAAS,eAAA,EACT,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,qBAAqB,2BAAA,EACrB,OAAO,aAAA,EACP,mBAAgB,EAAhB,WAAW,mBAAG,EAAE,KAAA;IAEhB,IAAM,YAAY,GAAG,eAAe,EAAE,CAAC;IACvC,IAAM,yBAAyB,GAAG,SAAS,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,WAAI,qBAAqB,CAAE,CAAC;IAClG,IAAM,WAAW,GAAG,QAAQ;QAC1B,CAAC,CAAC,WAAW,CAAC,cAAc;QAC5B,CAAC,CAAC,UAAG,WAAW,CAAC,aAAa,IAAI,EAAE,eAAK,yBAAyB,MAAG,CAAC;IAExE,IAAM,WAAW,GAAG,WAAW,CAAC;QAC9B,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,OAAO,CACL,yCACE,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,MAAM,CAAC,MAAM,EACxB,OAAO,EAAE,WAAW,mBACL,SAAS,mBACT,QAAQ,IACnB,YAAY;QAEhB,oBAAC,YAAY,IAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,iBAAiB,GAAI;QAC1E,8BAAM,SAAS,EAAE,MAAM,CAAC,WAAW,IAAG,WAAW,CAAQ,CAClD,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport InternalIcon from '../icon/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../internal/events';\n\nimport { TokenGroupProps } from './interfaces';\nimport styles from './styles.css.js';\nexport interface SelectToggleProps {\n  controlId: string;\n  allHidden: boolean;\n  expanded: boolean;\n  numberOfHiddenOptions: number;\n  onClick?: NonCancelableEventHandler<null>;\n  i18nStrings?: Pick<TokenGroupProps.I18nStrings, 'limitShowFewer' | 'limitShowMore'>;\n}\n\nconst SelectToggle = ({\n  controlId,\n  allHidden,\n  expanded,\n  numberOfHiddenOptions,\n  onClick,\n  i18nStrings = {},\n}: SelectToggleProps) => {\n  const focusVisible = useFocusVisible();\n  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;\n  const description = expanded\n    ? i18nStrings.limitShowFewer\n    : `${i18nStrings.limitShowMore || ''} (${numberOfHiddenOptionLabel})`;\n\n  const handleClick = useCallback(() => {\n    fireNonCancelableEvent(onClick, null);\n  }, [onClick]);\n\n  return (\n    <button\n      type=\"button\"\n      className={styles.toggle}\n      onClick={handleClick}\n      aria-controls={controlId}\n      aria-expanded={expanded}\n      {...focusVisible}\n    >\n      <InternalIcon name={expanded ? 'treeview-collapse' : 'treeview-expand'} />\n      <span className={styles.description}>{description}</span>\n    </button>\n  );\n};\n\nexport default SelectToggle;\n"]}