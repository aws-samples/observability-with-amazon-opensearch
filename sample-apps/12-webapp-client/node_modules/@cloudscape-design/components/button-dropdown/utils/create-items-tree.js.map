{"version":3,"file":"create-items-tree.js","sourceRoot":"","sources":["../../../../src/button-dropdown/utils/create-items-tree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isItemGroup } from './utils';\nimport { ButtonDropdownProps } from '../interfaces';\n\n// The function turns a tree of items into a structure optimized for lookup of\n// items and corresponding indices as well as iteration on indices in the given order.\n\n// As trees are multidimensional, the index is represented as an array\nexport type TreeIndex = number[];\n\ninterface ItemsTreeApi {\n  // Returns an item for the given tree index or null if not found\n  getItem: (index: TreeIndex) => ButtonDropdownProps.ItemOrGroup | null;\n  // Returns the tree index of the given item. The item must be present\n  // in the tree (referential comparison), or an error will be thrown\n  getItemIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex;\n  // Returns the index of next or previous sequential node or null if out of bounds\n  getSequentialIndex: (index: TreeIndex, direction: -1 | 1) => TreeIndex | null;\n  // Returns parent tree index of a given item or null if no parent is present\n  getParentIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex | null;\n}\n\nexport default function createItemsTree(items: ButtonDropdownProps.Items): ItemsTreeApi {\n  const itemToIndex = new Map<ButtonDropdownProps.ItemOrGroup, string>();\n  const indexToItem = new Map<string, ButtonDropdownProps.ItemOrGroup>();\n  const flatIndices: string[] = [];\n\n  traverseItems(items, (item, index) => {\n    const indexKey = stringifyIndex(index);\n    itemToIndex.set(item, indexKey);\n    indexToItem.set(indexKey, item);\n    flatIndices.push(indexKey);\n  });\n\n  return {\n    getItem: (index: TreeIndex): ButtonDropdownProps.ItemOrGroup | null => {\n      const indexKey = stringifyIndex(index);\n\n      return indexToItem.get(indexKey) || null;\n    },\n    getItemIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      return parseIndex(indexKey);\n    },\n    getSequentialIndex: (index: TreeIndex, direction: -1 | 1): TreeIndex | null => {\n      const indexKey = stringifyIndex(index);\n      const position = flatIndices.indexOf(indexKey);\n\n      const nextIndexKey = flatIndices[position + direction];\n\n      if (!nextIndexKey) {\n        return null;\n      }\n\n      return parseIndex(nextIndexKey);\n    },\n    getParentIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex | null => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      const index = parseIndex(indexKey);\n\n      // No parent\n      if (index.length === 1) {\n        return null;\n      }\n\n      return index.slice(0, index.length - 1);\n    },\n  };\n}\n\nfunction traverseItems(\n  items: ButtonDropdownProps.Items,\n  act: (item: ButtonDropdownProps.ItemOrGroup, index: TreeIndex) => void,\n  parentIndex: TreeIndex = []\n) {\n  items.forEach((item, index) => {\n    const itemIndex = [...parentIndex, index];\n    act(item, itemIndex);\n\n    if (isItemGroup(item)) {\n      traverseItems(item.items, act, itemIndex);\n    }\n  });\n}\n\nfunction stringifyIndex(index: TreeIndex): string {\n  return index.join('-');\n}\n\nfunction parseIndex(index: string): TreeIndex {\n  return index.split('-').map(it => parseInt(it));\n}\n"]}