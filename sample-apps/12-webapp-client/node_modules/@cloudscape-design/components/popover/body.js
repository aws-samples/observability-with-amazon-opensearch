// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useCallback } from 'react';
import clsx from 'clsx';
import FocusLock from 'react-focus-lock';
import { KeyCode } from '../internal/keycode';
import { useUniqueId } from '../internal/hooks/use-unique-id';
import { InternalButton } from '../button/internal';
import styles from './styles.css.js';
export default function PopoverBody(_a) {
    var _b, _c;
    var size = _a.size, fixedWidth = _a.fixedWidth, showDismissButton = _a.dismissButton, dismissAriaLabel = _a.dismissAriaLabel, header = _a.header, children = _a.children, onDismiss = _a.onDismiss, variant = _a.variant, _d = _a.returnFocus, returnFocus = _d === void 0 ? true : _d, overflowVisible = _a.overflowVisible, dismissButtonRef = _a.dismissButtonRef, className = _a.className;
    var labelledById = useUniqueId('awsui-popover-');
    var onKeyDown = useCallback(function (event) {
        if (event.keyCode === KeyCode.escape) {
            onDismiss();
        }
    }, [onDismiss]);
    var dismissButton = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && (React.createElement("div", { className: styles.dismiss },
        React.createElement(InternalButton, { variant: "icon", formAction: "none", iconName: "close", className: styles['dismiss-control'], ariaLabel: dismissAriaLabel, onClick: function () { return onDismiss(); }, ref: dismissButtonRef })));
    return (React.createElement("div", { className: clsx(styles.body, className, styles["body-size-".concat(size)], (_b = {},
            _b[styles['fixed-width']] = fixedWidth,
            _b[styles["variant-".concat(variant)]] = variant,
            _b[styles['body-overflow-visible']] = overflowVisible === 'both',
            _b)), role: header ? 'dialog' : undefined, onKeyDown: onKeyDown, "aria-modal": showDismissButton && variant !== 'annotation' ? true : undefined, "aria-labelledby": header ? labelledById : undefined },
        React.createElement(FocusLock, { disabled: variant === 'annotation' || !showDismissButton, autoFocus: true, returnFocus: returnFocus },
            header && (React.createElement("div", { className: clsx(styles['header-row'], showDismissButton && styles['has-dismiss']) },
                dismissButton,
                React.createElement("div", { className: styles.header, id: labelledById },
                    React.createElement("h2", null, header)))),
            React.createElement("div", { className: !header && showDismissButton ? styles['has-dismiss'] : undefined },
                !header && dismissButton,
                React.createElement("div", { className: clsx(styles.content, (_c = {}, _c[styles['content-overflow-visible']] = !!overflowVisible, _c)) }, children)))));
}
//# sourceMappingURL=body.js.map