{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/popover/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\n\nexport interface PopoverProps extends BaseComponentProps {\n  /**\n   * Determines where the popover is displayed when opened, relative to the trigger.\n   * If the popover doesn't have enough space to open in this direction, it\n   * automatically chooses a better direction based on available space.\n   */\n  position?: PopoverProps.Position;\n\n  /**\n   * Determines the maximum width for the popover.\n   */\n  size?: PopoverProps.Size;\n\n  /**\n   * Expands the popover body to its maximum width regardless of content.\n   * For example, use it when you need to place a column layout in the popover content.\n   */\n  fixedWidth?: boolean;\n\n  /**\n   * Specifies the type of content inside the trigger region. The following types are available:\n   * - `text` - Use for inline text triggers.\n   * - `custom` - Use for the [button](/components/button/) component.\n   */\n  triggerType?: PopoverProps.TriggerType;\n\n  /**\n   * Element that triggers the popover when selected by the user.\n   * @displayname trigger\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Specifies optional header text for the popover.\n   */\n  header?: string;\n\n  /**\n   * Content of the popover.\n   */\n  content?: React.ReactNode;\n\n  /**\n   * Determines whether the dismiss button is shown in the popover body.\n   */\n  dismissButton?: boolean;\n\n  /**\n   * Adds an `aria-label` to the dismiss button for accessibility.\n   */\n  dismissAriaLabel?: string;\n\n  /**\n   * By default, the popover is constrained to fit inside its parent\n   * [stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context).\n   * Enabling this property will allow the popover to be rendered in the root stack context using\n   * [React Portals](https://reactjs.org/docs/portals.html).\n   * Enable this setting if you need the popover to ignore its parent stacking context, such as in side navigation.\n   *\n   * Note: Using popover rendered with portal within a Modal is not supported.\n   */\n  renderWithPortal?: boolean;\n}\n\n/**\n * The position the popover is actually in, given space constraints.\n */\nexport type InternalPosition =\n  | 'right-top'\n  | 'right-bottom'\n  | 'left-top'\n  | 'left-bottom'\n  | 'top-center'\n  | 'top-right'\n  | 'top-left'\n  | 'bottom-center'\n  | 'bottom-right'\n  | 'bottom-left';\n\nexport interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface BoundingBox {\n  width: number;\n  height: number;\n}\n\nexport type BoundingOffset = BoundingBox & Offset;\n\nexport namespace PopoverProps {\n  export type Position = 'top' | 'right' | 'bottom' | 'left';\n  export type Size = 'small' | 'medium' | 'large';\n  export type TriggerType = 'text' | 'custom';\n}\n"]}