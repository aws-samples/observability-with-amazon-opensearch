{"version":3,"file":"create-series-decorator.js","sourceRoot":"","sources":["../../../../src/area-chart/model/create-series-decorator.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,wBAAwB,MAAM,kDAAkD,CAAC;AAIxF,MAAM,CAAC,OAAO,UAAU,qBAAqB,CAC3C,cAAmD;IAEnD,IAAM,UAAU,GAAG,wBAAwB,CACzC,cAAc,EACd,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,WAAW,EAAtB,CAAsB,EAC3B,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,IAAI,IAAI,EAAf,CAAe,CACrB,CAAC;IAEF,IAAM,cAAc,GAAG,UAAC,CAA2B,EAAE,KAAa;QAChE,IAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;QACtB,IAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAChC,IAAM,UAAU,GAAG,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC;QACrE,IAAM,WAAW,GACf,CAAC,CAAC,IAAI,KAAK,WAAW;YACpB,CAAC,CAAC,cAAM,OAAA,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAhD,CAAgD;YACxD,CAAC,CAAC,UAAC,CAAS,EAAE,CAAI,IAAK,OAAA,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAA/C,CAA+C,CAAC;QAE3E,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,UAAU,YAAA,EAAE,WAAW,aAAA,EAAE,CAAC;IAC9D,CAAC,CAAC;IAEF,wCAAwC;IACxC,IAAM,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM,EAAE,KAAK;QACvD,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,IAAI,GAAG,EAA0D,CAAC,CAAC;IAEtE,+DAA+D;IAC/D,iFAAiF;IACjF,IAAM,eAAe,GAAG,UAAC,MAAgC;QACvD,OAAA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC;IAApE,CAAoE,CAAC;IAEvE,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport createCategoryColorScale from '../../internal/utils/create-category-color-scale';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from './index';\n\nexport default function createSeriesDecorator<T extends AreaChartProps.DataTypes>(\n  externalSeries: readonly AreaChartProps.Series<T>[]\n) {\n  const colorScale = createCategoryColorScale(\n    externalSeries,\n    s => s.type === 'threshold',\n    s => s.color || null\n  );\n\n  const decorateSeries = (s: AreaChartProps.Series<T>, index: number): ChartModel.InternalSeries<T> => {\n    const title = s.title;\n    const color = colorScale[index];\n    const markerType = s.type === 'area' ? 'hollow-rectangle' : 'dashed';\n    const formatValue =\n      s.type === 'threshold'\n        ? () => (s.valueFormatter ? s.valueFormatter(s.y) : s.y)\n        : (y: number, x: T) => (s.valueFormatter ? s.valueFormatter(y, x) : y);\n\n    return { series: s, title, color, markerType, formatValue };\n  };\n\n  // Map external series to internal ones.\n  const mapping = externalSeries.reduce((map, series, index) => {\n    map.set(series, decorateSeries(series, index));\n    return map;\n  }, new Map<AreaChartProps.Series<T>, ChartModel.InternalSeries<T>>());\n\n  // It is inconvenient to use internal series everywhere, that's\n  // why we also provide a decorator function to get the internal series on demand.\n  const seriesDecorator = (series: AreaChartProps.Series<T>): ChartModel.InternalSeries<T> =>\n    mapping.get(series) || decorateSeries(series, externalSeries.length);\n\n  return seriesDecorator;\n}\n"]}