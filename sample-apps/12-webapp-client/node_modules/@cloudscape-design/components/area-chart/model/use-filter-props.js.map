{"version":3,"file":"use-filter-props.js","sourceRoot":"","sources":["../../../../src/area-chart/model/use-filter-props.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC/C,OAAO,EAAE,sBAAsB,EAA6B,MAAM,uBAAuB,CAAC;AAC1F,OAAO,EAAE,eAAe,EAAE,MAAM,uCAAuC,CAAC;AAKxE,oEAAoE;AACpE,MAAM,CAAC,OAAO,UAAU,cAAc,CACpC,MAA2C,EAC3C,uBAA6D,EAC7D,yBAA2F;IAErF,IAAA,KAA8C,eAAe,CACjE,uBAAuB,EACvB,yBAAyB,EACzB,MAAM,EACN;QACE,aAAa,EAAE,WAAW;QAC1B,cAAc,EAAE,eAAe;QAC/B,aAAa,EAAE,gBAAgB;KAChC,CACF,EATM,UAAkB,EAAlB,aAAa,mBAAG,EAAE,KAAA,EAAE,qBAAqB,QAS/C,CAAC;IAEF,IAAM,gBAAgB,GAAG,WAAW,CAClC,UAAC,cAAmD;QAClD,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACtC,sBAAsB,CAAC,yBAAyB,EAAE,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC;IACvF,CAAC,EACD,CAAC,yBAAyB,EAAE,qBAAqB,CAAC,CACnD,CAAC;IAEF,iCAAiC;IACjC,SAAS,CAAC;QACR,IAAM,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAE7E,IAAI,gBAAgB,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACpD,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;SACpC;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAE9C,OAAO,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect } from 'react';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { AreaChartProps } from '../interfaces';\n\ntype FilterProps<T> = [readonly AreaChartProps.Series<T>[], (series: readonly AreaChartProps.Series<T>[]) => void];\n\n// Provides controlled or uncontrolled props to filter chart series.\nexport default function useFilterProps<T>(\n  series: readonly AreaChartProps.Series<T>[],\n  controlledVisibleSeries?: readonly AreaChartProps.Series<T>[],\n  controlledOnVisibleChange?: NonCancelableEventHandler<AreaChartProps.FilterChangeDetail<T>>\n): FilterProps<T> {\n  const [visibleSeries = [], setVisibleSeriesState] = useControllable(\n    controlledVisibleSeries,\n    controlledOnVisibleChange,\n    series,\n    {\n      componentName: 'AreaChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  const setVisibleSeries = useCallback(\n    (selectedSeries: readonly AreaChartProps.Series<T>[]) => {\n      setVisibleSeriesState(selectedSeries);\n      fireNonCancelableEvent(controlledOnVisibleChange, { visibleSeries: selectedSeries });\n    },\n    [controlledOnVisibleChange, setVisibleSeriesState]\n  );\n\n  // Reset filter if series change.\n  useEffect(() => {\n    const newVisibleSeries = visibleSeries.filter(s => series.indexOf(s) !== -1);\n\n    if (newVisibleSeries.length !== visibleSeries.length) {\n      setVisibleSeries(newVisibleSeries);\n    }\n  }, [series, visibleSeries, setVisibleSeries]);\n\n  return [visibleSeries, setVisibleSeries];\n}\n"]}