{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/area-chart/model/index.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { ChartSeriesMarkerType } from '../../internal/components/chart-series-marker';\nimport { ChartScale, NumericChartScale } from '../../internal/components/cartesian-chart/scales';\nimport { XDomain, YDomain } from '../../internal/components/cartesian-chart/interfaces';\nimport { ReadonlyAsyncStore } from './async-store';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartPlotRef } from '../../internal/components/chart-plot';\n\nexport interface ChartModel<T extends AreaChartProps.DataTypes> {\n  height: number;\n  width: number;\n  series: readonly AreaChartProps.Series<T>[];\n  allSeries: readonly AreaChartProps.Series<T>[];\n  getInternalSeries(series: AreaChartProps.Series<T>): ChartModel.InternalSeries<T>;\n  computed: ChartModel.ComputedProps<T>;\n  handlers: {\n    onSVGMouseMove: (event: React.MouseEvent<SVGElement, MouseEvent>) => void;\n    onSVGMouseOut: (event: React.MouseEvent<SVGElement, MouseEvent>) => void;\n    onSVGMouseDown: (event: React.MouseEvent<SVGSVGElement>) => void;\n    onSVGKeyDown: (event: React.KeyboardEvent) => void;\n    onSVGFocus: (event: React.FocusEvent<Element>, trigger: 'mouse' | 'keyboard') => void;\n    onSVGBlur: (event: React.FocusEvent<Element>) => void;\n    onFilterSeries: (series: readonly AreaChartProps.Series<T>[]) => void;\n    onLegendHighlight: (series: null | AreaChartProps.Series<T>) => void;\n    onPopoverDismiss: (outsideClick?: boolean) => void;\n    onContainerBlur: () => void;\n  };\n  interactions: ReadonlyAsyncStore<ChartModel.InteractionsState<T>>;\n  refs: {\n    plot: React.RefObject<ChartPlotRef>;\n    container: React.RefObject<HTMLDivElement>;\n    verticalMarker: React.RefObject<SVGLineElement>;\n  };\n}\n\nexport namespace ChartModel {\n  export interface ComputedProps<T extends AreaChartProps.DataTypes> {\n    xDomain: XDomain<T>;\n    yDomain: YDomain;\n    xScale: ChartScale;\n    yScale: NumericChartScale;\n    xTicks: AreaChartProps.DataTypes[];\n    yTicks: number[];\n    plot: {\n      xy: readonly PlotPoint<T>[][];\n      xs: readonly PlotPoint<T>[][];\n      sx: readonly PlotPoint<T>[][];\n    };\n  }\n\n  export interface InteractionsState<T> {\n    highlightedX: null | readonly PlotPoint<T>[];\n    highlightedPoint: null | PlotPoint<T>;\n    highlightedSeries: null | AreaChartProps.Series<T>;\n    legendSeries: null | AreaChartProps.Series<T>;\n    isPopoverPinned: boolean;\n  }\n\n  export interface InternalSeries<T> {\n    series: AreaChartProps.Series<T>;\n    title: string;\n    color: string;\n    markerType: ChartSeriesMarkerType;\n    formatValue: (y: number, x: T) => string | number;\n  }\n\n  export interface PlotPoint<T> {\n    x: T;\n    y0: number;\n    y1: number;\n    scaled: { x: number; y0: number; y1: number };\n    index: { x: number; y: number; s: number };\n    value: number;\n  }\n}\n"]}