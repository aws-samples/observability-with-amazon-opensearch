{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/area-chart/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CartesianChartProps, ChartDataTypes } from '../internal/components/cartesian-chart/interfaces';\n\nexport interface AreaChartProps<T extends AreaChartProps.DataTypes>\n  extends CartesianChartProps<T, AreaChartProps.Series<T>> {\n  /**\n   * Array that represents the source of data for the displayed chart.\n   * Each element can represent an area series, or a threshold, and can have the following properties:\n   *\n   * * `title` (string): A human-readable title for this series\n   * * `type` (string): Series type (`\"area\"`, or `\"threshold\"`)\n   * * `data` (Array): An array of data points, represented as objects with `x` and `y` properties. The `x` values must be consistent across all series\n   * * `color` (string): (Optional) A color hex value for this series. When assigned, it takes priority over the automatically assigned color\n   * * `valueFormatter` (Function): (Optional) A function that formats data values before rendering in the UI, For example, in the details popover.\n   */\n  series: ReadonlyArray<AreaChartProps.Series<T>>;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings?: AreaChartProps.I18nStrings<T>;\n}\n\nexport namespace AreaChartProps {\n  export type DataTypes = ChartDataTypes;\n\n  export interface Datum<T> {\n    x: T;\n    y: number;\n  }\n\n  export type Series<T> = AreaSeries<T> | ThresholdSeries;\n\n  export interface AreaSeries<T> {\n    type: 'area';\n    title: string;\n    color?: string;\n    data: T extends unknown ? ReadonlyArray<Datum<T>> : ReadonlyArray<Datum<T>>;\n    valueFormatter?: ValueFormatter<number, T>;\n  }\n\n  export interface ThresholdSeries {\n    type: 'threshold';\n    title: string;\n    color?: string;\n    y: number;\n    valueFormatter?: TickFormatter<number>;\n  }\n\n  export type FilterChangeDetail<T> = CartesianChartProps.FilterChangeDetail<Series<T>>;\n\n  export type HighlightChangeDetail<T> = CartesianChartProps.HighlightChangeDetail<Series<T>>;\n\n  export type TickFormatter<T> = CartesianChartProps.TickFormatter<T>;\n\n  export type ValueFormatter<YType, XType = null> = CartesianChartProps.ValueFormatter<YType, XType>;\n\n  export interface I18nStrings<T> extends CartesianChartProps.I18nStrings<T> {\n    /** The title of the values total in the popover. */\n    detailTotalLabel?: string;\n    /** Function to format the displayed values total. */\n    detailTotalFormatter?: TickFormatter<number>;\n  }\n}\n"]}