{"version":3,"file":"highlighted-point.js","sourceRoot":"","sources":["../../../../src/area-chart/elements/highlighted-point.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAEhD,OAAO,gBAAgB,MAAM,6DAA6D,CAAC;AAG3F,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEnD,eAAe,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAEtD,SAAS,oBAAoB,CAC3B,EAMC,EACD,GAA2B;QANzB,KAAK,WAAA,EACL,SAAS,eAAA;IAOX,IAAM,gBAAgB,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,gBAAgB,EAAtB,CAAsB,CAAC,CAAC;IAC1F,IAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,eAAe,EAArB,CAAqB,CAAC,CAAC;IAExF,IAAM,KAAK,GAAG,gBAAgB;QAC5B,CAAC,CAAC;YACE,GAAG,EAAE,UAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,cAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAE;YAC9D,CAAC,EAAE,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC,EAAE,gBAAgB,CAAC,MAAM,CAAC,EAAE;YAC7B,KAAK,EAAE,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;SAC7E;QACH,CAAC,CAAC,IAAI,CAAC;IAET,OAAO,CACL,oBAAC,gBAAgB,IACf,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,IAAI,EAClB,YAAY,EAAE,eAAe,GAC7B,CACH,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, memo } from 'react';\n\nimport HighlightedPoint from '../../internal/components/cartesian-chart/highlighted-point';\n\nimport { ChartModel } from '../model';\nimport { useSelector } from '../model/async-store';\n\nexport default memo(forwardRef(AreaHighlightedPoint));\n\nfunction AreaHighlightedPoint(\n  {\n    model,\n    ariaLabel,\n  }: {\n    model: ChartModel<any>;\n    ariaLabel?: string;\n  },\n  ref: React.Ref<SVGGElement>\n) {\n  const highlightedPoint = useSelector(model.interactions, state => state.highlightedPoint);\n  const isPopoverPinned = useSelector(model.interactions, state => state.isPopoverPinned);\n\n  const point = highlightedPoint\n    ? {\n        key: `${highlightedPoint.index.x}:${highlightedPoint.index.s}`,\n        x: highlightedPoint.scaled.x,\n        y: highlightedPoint.scaled.y1,\n        color: model.getInternalSeries(model.series[highlightedPoint.index.s]).color,\n      }\n    : null;\n\n  return (\n    <HighlightedPoint\n      ref={ref}\n      point={point}\n      role=\"button\"\n      ariaLabel={ariaLabel}\n      ariaHasPopup={true}\n      ariaExpanded={isPopoverPinned}\n    />\n  );\n}\n"]}