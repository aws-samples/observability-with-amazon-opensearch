{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/button/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { IconProps } from '../icon/interfaces';\nimport React from 'react';\nimport { CancelableEventHandler, ClickDetail as _ClickDetail } from '../internal/events';\n\nexport interface ButtonProps extends BaseComponentProps {\n  /**\n   * Renders the button as disabled and prevents clicks.\n   */\n  disabled?: boolean;\n  /**\n   * Renders the button as being in a loading state. It takes precedence over the `disabled` if both are set to `true`.\n   * It prevents users from clicking the button.\n   */\n  loading?: boolean;\n  /**\n   * Displays an icon next to the text. You can use the `iconAlign` property to position the icon.\n   */\n  iconName?: IconProps.Name;\n  /**\n   * Specifies the alignment of the icon.\n   */\n  iconAlign?: ButtonProps.IconAlign;\n  /**\n   * Specifies the URL of a custom icon. Use this property if the icon you want isn't available.\n   *\n   * If you set both `iconUrl` and `iconSvg`, `iconSvg` will take precedence.\n   */\n  iconUrl?: string;\n  /**\n   * Specifies the SVG of a custom icon.\n   *\n   * Use this property if you want your custom icon to inherit colors dictated by variant or hover states.\n   * When this property is set, the component will be decorated with `aria-hidden=\"true\"`. Ensure that the `svg` element:\n   * - has attribute `focusable=\"false\"`.\n   * - has `viewBox=\"0 0 16 16\"`.\n   *\n   * If you set the `svg` element as the root node of the slot, the component will automatically\n   * - set `stroke=\"currentColor\"`, `fill=\"none\"`, and `vertical-align=\"top\"`.\n   * - set the stroke width based on the size of the icon.\n   * - set the width and height of the SVG element based on the size of the icon.\n   *\n   * If you don't want these styles to be automatically set, wrap the `svg` element into a `span`.\n   * You can still set the stroke to `currentColor` to inherit the color of the surrounding elements.\n   *\n   * If you set both `iconUrl` and `iconSvg`, `iconSvg` will take precedence.\n   *\n   * *Note:* Remember to remove any additional elements (for example: `defs`) and related CSS classes from SVG files exported from design software.\n   * In most cases, they aren't needed, as the `svg` element inherits styles from the icon component.\n   */\n  iconSvg?: React.ReactNode;\n  /**\n   * Specifies alternate text for a custom icon. We recommend that you provide this for accessibility.\n   * This property is ignored if you use a predefined icon or if you set your custom icon using the `iconSvg` slot.\n   */\n  iconAlt?: string;\n  /**\n   * The form action that is performed by a button click.\n   */\n  formAction?: ButtonProps.FormAction;\n  /**\n   * Adds `aria-label` to the button element. It should be used in buttons that don't have text in order to make\n   * them accessible.\n   */\n  ariaLabel?: string;\n  /**\n   * Applies button styling to a link. Use this property if you need a link styled as a button (`variant=link`).\n   * For example, if you have a 'help' button that links to a documentation page.\n   */\n  href?: string;\n\n  /**\n   * Specifies where to open the linked URL (for example, to open in a new browser window or tab use `_blank`).\n   * This property only applies when an `href` is provided.\n   */\n  target?: string;\n\n  /**\n   * Specifies whether the linked URL, when selected, will prompt the user to download instead of navigate.\n   * You can specify a string value that will be suggested as the name of the downloaded file.\n   * This property only applies when an `href` is provided.\n   **/\n  download?: boolean | string;\n\n  /**\n   * Specifies if the `text` content wraps. If you set it to `false`, it prevents the text from wrapping.\n   */\n  wrapText?: boolean;\n\n  /** Determines the general styling of the button as follows:\n   * * `primary` for primary buttons.\n   * * `normal` for secondary buttons.\n   * * `link` for tertiary buttons.\n   * * `icon` to display an icon only (no text).\n   * * `inline-icon` to display an icon-only (no text) button within a text context.\n   */\n  variant?: ButtonProps.Variant;\n\n  /**\n   * Text displayed in the button element.\n   * @displayname text\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Called when the user clicks on the button and the button is not disabled or in loading state.\n   */\n  onClick?: CancelableEventHandler<ButtonProps.ClickDetail>;\n\n  /**\n   * Called when the user clicks on the button with the left mouse button without pressing\n   * modifier keys (that is, CTRL, ALT, SHIFT, META), and the button has an `href` set.\n   */\n  onFollow?: CancelableEventHandler<null>;\n\n  /**\n   *  Adds aria-expanded to the button element. Use when the button controls an expandable element.\n   */\n\n  ariaExpanded?: boolean;\n}\n\nexport namespace ButtonProps {\n  export type Variant = 'normal' | 'primary' | 'link' | 'icon' | 'inline-icon';\n  export type ClickDetail = _ClickDetail;\n\n  export type FormAction = 'submit' | 'none';\n\n  export type IconAlign = 'left' | 'right';\n\n  export interface Ref {\n    /**\n     * Focuses the underlying native button.\n     */\n    focus(options?: FocusOptions): void;\n  }\n}\n"]}