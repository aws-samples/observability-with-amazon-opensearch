{"version":3,"file":"icon-helper.js","sourceRoot":"","sources":["../../../src/button/icon-helper.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,YAAY,MAAM,kBAAkB,CAAC;AAC5C,OAAO,eAAe,MAAM,qBAAqB,CAAC;AAElD,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAcrC,SAAS,YAAY,CAAC,KAAsB;IAC1C,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,aAAa,CAAC;IAE/E,OAAO,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;AAC/C,CAAC;AAED,SAAS,WAAW,CAAC,EAA4E;IAA1E,IAAA,QAAQ,cAAA,EAAE,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAK,KAAK,cAAzD,yDAA2D,CAAF;IAC5E,IAAI,CAAC,QAAQ,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;QACrC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,YAAY,IACX,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,eAAQ,YAAY,CAAC,KAAK,CAAC,CAAE,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,EACpF,IAAI,EAAE,QAAQ,EACd,GAAG,EAAE,OAAO,EACZ,GAAG,EAAE,OAAO,EACZ,GAAG,EAAE,OAAO,EACZ,IAAI,EAAE,QAAQ,GACd,CACH,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAsB;IAC7C,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,OAAO,oBAAC,eAAe,IAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAI,CAAC;KAC/E;SAAM,IAAI,YAAY,CAAC,KAAK,CAAC,KAAK,MAAM,EAAE;QACzC,OAAO,oBAAC,WAAW,eAAK,KAAK,EAAI,CAAC;KACnC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAsB;IAC9C,IAAI,YAAY,CAAC,KAAK,CAAC,KAAK,OAAO,EAAE;QACnC,OAAO,oBAAC,WAAW,eAAK,KAAK,EAAI,CAAC;KACnC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport { ButtonProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport interface ButtonIconProps {\n  loading?: boolean;\n  iconName?: ButtonProps['iconName'];\n  iconAlign?: ButtonProps['iconAlign'];\n  iconUrl?: string;\n  iconSvg?: React.ReactNode;\n  iconAlt?: string;\n  iconSize?: IconProps.Size;\n  variant?: string;\n  iconClass?: string;\n}\n\nfunction getIconAlign(props: ButtonIconProps) {\n  const standalone = props.variant === 'icon' || props.variant === 'inline-icon';\n\n  return standalone ? 'left' : props.iconAlign;\n}\n\nfunction IconWrapper({ iconName, iconUrl, iconAlt, iconSvg, iconSize, ...props }: ButtonIconProps) {\n  if (!iconName && !iconUrl && !iconSvg) {\n    return null;\n  }\n\n  return (\n    <InternalIcon\n      className={clsx(styles.icon, styles[`icon-${getIconAlign(props)}`], props.iconClass)}\n      name={iconName}\n      url={iconUrl}\n      svg={iconSvg}\n      alt={iconAlt}\n      size={iconSize}\n    />\n  );\n}\n\nexport function LeftIcon(props: ButtonIconProps) {\n  if (props.loading) {\n    return <InternalSpinner className={clsx(styles.icon, styles['icon-left'])} />;\n  } else if (getIconAlign(props) === 'left') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n\nexport function RightIcon(props: ButtonIconProps) {\n  if (getIconAlign(props) === 'right') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n"]}