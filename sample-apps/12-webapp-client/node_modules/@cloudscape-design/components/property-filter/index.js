import { __assign, __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import clsx from 'clsx';
import React, { useRef, useState, useMemo } from 'react';
import InternalSpaceBetween from '../space-between/internal';
import InternalAutosuggest from '../autosuggest/internal';
import { InternalButton } from '../button/internal';
import { getBaseProps } from '../internal/base-component';
import useForwardFocus from '../internal/hooks/forward-focus';
import { applyDisplayName } from '../internal/utils/apply-display-name';
import { KeyCode } from '../internal/keycode';
import SelectToggle from '../token-group/toggle';
import { generateUniqueId } from '../internal/hooks/use-unique-id/index';
import { fireNonCancelableEvent } from '../internal/events';
import { Token } from './token';
import { getQueryActions, parseText, getAutosuggestOptions } from './controller';
import { useLoadItems } from './use-load-items';
import styles from './styles.css.js';
import useBaseComponent from '../internal/hooks/use-base-component';
var PropertyFilter = React.forwardRef(function (_a, ref) {
    var disabled = _a.disabled, i18nStrings = _a.i18nStrings, countText = _a.countText, query = _a.query, hideOperations = _a.hideOperations, onChange = _a.onChange, filteringProperties = _a.filteringProperties, filteringOptions = _a.filteringOptions, customGroupsText = _a.customGroupsText, _b = _a.disableFreeTextFiltering, disableFreeTextFiltering = _b === void 0 ? false : _b, onLoadItems = _a.onLoadItems, virtualScroll = _a.virtualScroll, customControl = _a.customControl, filteringEmpty = _a.filteringEmpty, filteringLoadingText = _a.filteringLoadingText, filteringFinishedText = _a.filteringFinishedText, filteringErrorText = _a.filteringErrorText, filteringRecoveryText = _a.filteringRecoveryText, filteringStatusType = _a.filteringStatusType, asyncProperties = _a.asyncProperties, tokenLimit = _a.tokenLimit, expandToViewport = _a.expandToViewport, rest = __rest(_a, ["disabled", "i18nStrings", "countText", "query", "hideOperations", "onChange", "filteringProperties", "filteringOptions", "customGroupsText", "disableFreeTextFiltering", "onLoadItems", "virtualScroll", "customControl", "filteringEmpty", "filteringLoadingText", "filteringFinishedText", "filteringErrorText", "filteringRecoveryText", "filteringStatusType", "asyncProperties", "tokenLimit", "expandToViewport"]);
    var __internalRootRef = useBaseComponent('PropertyFilter').__internalRootRef;
    var inputRef = useRef(null);
    var preventFocus = useRef(false);
    var baseProps = getBaseProps(rest);
    useForwardFocus(ref, inputRef);
    var tokens = query.tokens, operation = query.operation;
    var showResults = (tokens === null || tokens === void 0 ? void 0 : tokens.length) && !disabled;
    var _c = getQueryActions(query, onChange, inputRef, preventFocus), addToken = _c.addToken, removeToken = _c.removeToken, setToken = _c.setToken, setOperation = _c.setOperation, removeAllTokens = _c.removeAllTokens;
    var _d = useState(''), filteringText = _d[0], setFilteringText = _d[1];
    var parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);
    var autosuggestOptions = getAutosuggestOptions(parsedText, filteringOptions, filteringProperties, customGroupsText, i18nStrings);
    var createToken = function (currentText) {
        var parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);
        var newToken;
        switch (parsedText.step) {
            case 'property': {
                newToken = {
                    propertyKey: parsedText.property.key,
                    operator: parsedText.operator,
                    value: parsedText.value
                };
                break;
            }
            case 'free-text': {
                newToken = {
                    operator: parsedText.operator || ':',
                    value: parsedText.value
                };
                break;
            }
            case 'operator': {
                newToken = {
                    operator: ':',
                    value: currentText
                };
                break;
            }
        }
        if (disableFreeTextFiltering && !('propertyKey' in newToken)) {
            return;
        }
        addToken(newToken);
        setFilteringText('');
    };
    var ignoreKeyDown = useRef(false);
    var handleKeyDown = function (event) {
        if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {
            createToken(filteringText);
        }
    };
    var getLoadMoreDetail = function (parsedText, filteringText) {
        var loadMoreDetail = {
            filteringProperty: undefined,
            filteringText: filteringText,
            filteringOperator: undefined
        };
        if (parsedText.step === 'property') {
            loadMoreDetail.filteringProperty = parsedText.property;
            loadMoreDetail.filteringText = parsedText.value;
            loadMoreDetail.filteringOperator = parsedText.operator;
        }
        return loadMoreDetail;
    };
    var loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);
    var inputLoadItemsHandlers = useLoadItems(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);
    var asyncProps = {
        empty: filteringEmpty,
        loadingText: filteringLoadingText,
        finishedText: filteringFinishedText,
        errorText: filteringErrorText,
        recoveryText: filteringRecoveryText,
        statusType: filteringStatusType
    };
    var asyncAutosuggestProps = !!filteringText.length || asyncProperties
        ? __assign(__assign({}, inputLoadItemsHandlers), asyncProps) : {};
    var handleSelected = function (event) {
        // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,
        // when an item is selected from the list using "enter" key.
        ignoreKeyDown.current = true;
        setTimeout(function () {
            ignoreKeyDown.current = false;
        }, 0);
        var option = event.detail;
        var value = option.value || '';
        if ('tokenValue' in option) {
            createToken(option.tokenValue);
            return;
        }
        // create a token from the 'use' option
        if (!('keepOpenOnSelect' in option)) {
            createToken(value);
            return;
        }
        // stop dropdown from closing
        event.preventDefault();
        var loadMoreDetail = getLoadMoreDetail(parseText(value, filteringProperties, disableFreeTextFiltering), value);
        fireNonCancelableEvent(onLoadItems, __assign(__assign({}, loadMoreDetail), { firstPage: true, samePage: false }));
    };
    var _e = useState(false), tokensExpanded = _e[0], setTokensExpanded = _e[1];
    var toggleExpandedTokens = function () { return setTokensExpanded(!tokensExpanded); };
    var hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;
    var slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;
    var controlId = useMemo(function () { return generateUniqueId(); }, []);
    return (React.createElement("span", __assign({}, baseProps, { className: clsx(baseProps.className, styles.root), ref: __internalRootRef }),
        React.createElement("div", { className: styles['search-field'] },
            customControl && React.createElement("div", { className: styles['custom-control'] }, customControl),
            React.createElement(InternalAutosuggest, __assign({ virtualScroll: virtualScroll, enteredTextLabel: i18nStrings.enteredTextLabel, ref: inputRef, className: styles.input, ariaLabel: i18nStrings.filteringAriaLabel, placeholder: i18nStrings.filteringPlaceholder, value: filteringText, disabled: disabled, onKeyDown: handleKeyDown }, autosuggestOptions, { onChange: function (event) { return setFilteringText(event.detail.value); }, empty: filteringEmpty }, asyncAutosuggestProps, { expandToViewport: expandToViewport, __disableShowAll: true, __dropdownWidth: 300, __onOptionClick: handleSelected, __onOpen: function (e) {
                    if (preventFocus.current) {
                        e.preventDefault();
                        preventFocus.current = false;
                    }
                }, __hideEnteredTextOption: disableFreeTextFiltering && parsedText.step !== 'property' })),
            React.createElement("span", { "aria-live": "polite", "aria-atomic": "true", className: clsx(styles.results, showResults && styles['results-visible']) }, showResults ? countText : '')),
        tokens && tokens.length > 0 && (React.createElement("div", { className: styles.tokens },
            React.createElement(InternalSpaceBetween, { size: "xs", direction: "horizontal", id: controlId },
                slicedTokens.map(function (token, index) { return (React.createElement(Token, { token: token, first: index === 0, operation: operation, key: index, removeToken: function () { return removeToken(index); }, setToken: function (newToken) { return setToken(index, newToken); }, setOperation: setOperation, filteringOptions: filteringOptions, filteringProperties: filteringProperties, asyncProps: asyncProps, onLoadItems: onLoadItems, i18nStrings: i18nStrings, asyncProperties: asyncProperties, hideOperations: hideOperations, customGroupsText: customGroupsText, disableFreeTextFiltering: disableFreeTextFiltering, disabled: disabled, expandToViewport: expandToViewport })); }),
                hasHiddenOptions && (React.createElement("div", { className: styles['toggle-collapsed'] },
                    React.createElement(SelectToggle, { controlId: controlId, allHidden: tokenLimit === 0, expanded: tokensExpanded, numberOfHiddenOptions: tokens.length - slicedTokens.length, i18nStrings: {
                            limitShowFewer: i18nStrings.tokenLimitShowFewer,
                            limitShowMore: i18nStrings.tokenLimitShowMore
                        }, onClick: toggleExpandedTokens }))),
                React.createElement("div", { className: styles.separator }),
                React.createElement(InternalButton, { onClick: removeAllTokens, className: styles['remove-all'], disabled: disabled }, i18nStrings.clearFiltersText))))));
});
applyDisplayName(PropertyFilter, 'PropertyFilter');
export default PropertyFilter;
//# sourceMappingURL=index.js.map