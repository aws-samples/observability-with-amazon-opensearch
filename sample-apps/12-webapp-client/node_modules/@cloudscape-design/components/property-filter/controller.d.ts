import { PropertyFilterProps } from './interfaces';
import { AutosuggestProps } from '../autosuggest/interfaces';
import { InputProps } from '../input/interfaces';
export declare const getQueryActions: (query: PropertyFilterProps['query'], onChange: PropertyFilterProps['onChange'], inputRef: React.RefObject<InputProps.Ref>, preventFocus: React.MutableRefObject<boolean>) => {
    setToken: (index: number, newToken: PropertyFilterProps.Token) => void;
    removeToken: (index: number) => void;
    removeAllTokens: () => void;
    addToken: (newToken: PropertyFilterProps.Token) => void;
    setOperation: (newOperation: PropertyFilterProps.JoinOperation) => void;
};
export declare type ParsedText = {
    step: 'property';
    property: PropertyFilterProps.FilteringProperty;
    operator: PropertyFilterProps.ComparisonOperator;
    value: string;
} | {
    step: 'operator';
    property: PropertyFilterProps.FilteringProperty;
    operatorPrefix: string;
} | {
    step: 'free-text';
    operator?: PropertyFilterProps.ComparisonOperator;
    value: string;
};
export declare const getAllowedOperators: (property: PropertyFilterProps.FilteringProperty) => PropertyFilterProps.ComparisonOperator[];
export declare const parseText: (filteringText: string, filteringProperties: PropertyFilterProps['filteringProperties'], disableFreeTextFiltering: boolean) => ParsedText;
export declare const getPropertyOptions: (filteringProperty: PropertyFilterProps.FilteringProperty, filteringOptions: PropertyFilterProps['filteringOptions']) => PropertyFilterProps.FilteringOption[] | undefined;
interface OptionGroup<T> {
    label: string;
    options: T[];
}
interface ExtendedAutosuggestOption extends AutosuggestProps.Option {
    tokenValue: string;
}
export declare const getAllValueSuggestions: (filteringOptions: PropertyFilterProps['filteringOptions'], filteringProperties: PropertyFilterProps['filteringProperties'], operator: PropertyFilterProps.ComparisonOperator | undefined, i18nStrings: Pick<PropertyFilterProps.I18nStrings, 'groupValuesText'>, customGroupsText: PropertyFilterProps['customGroupsText']) => OptionGroup<ExtendedAutosuggestOption>[];
export declare const getPropertyByKey: (filteringProperties: PropertyFilterProps['filteringProperties'], key: string) => PropertyFilterProps.FilteringProperty | undefined;
export declare function getPropertySuggestions<T>(filteringProperties: PropertyFilterProps['filteringProperties'], customGroupsText: PropertyFilterProps['customGroupsText'], i18nStrings: Pick<PropertyFilterProps['i18nStrings'], 'groupPropertiesText'>, filteringPropertyToOption: (filteringProperty: PropertyFilterProps.FilteringProperty) => T): OptionGroup<T>[];
export declare type OperatorStrings = 'operatorLessText' | 'operatorLessOrEqualText' | 'operatorGreaterText' | 'operatorGreaterOrEqualText' | 'operatorContainsText' | 'operatorDoesNotContainText' | 'operatorEqualsText' | 'operatorDoesNotEqualText';
export declare const getAutosuggestOptions: (parsedText: ParsedText, filteringOptions: PropertyFilterProps['filteringOptions'], filteringProperties: PropertyFilterProps['filteringProperties'], customGroupsText: PropertyFilterProps['customGroupsText'], i18nStrings: Pick<PropertyFilterProps['i18nStrings'], 'groupPropertiesText' | 'groupValuesText' | 'operatorsText' | OperatorStrings>) => {
    __filterText: string;
    options: {
        options: {
            tokenValue: string;
            label: string;
            __labelPrefix: string;
        }[];
        label: string;
    }[];
} | {
    __filterText: string;
    options: (OptionGroup<ExtendedAutosuggestOption> | OptionGroup<{
        value: string;
        keepOpenOnSelect: boolean;
    }>)[];
};
export declare const operatorToDescription: (operator: PropertyFilterProps.ComparisonOperator, i18nStrings: Pick<PropertyFilterProps['i18nStrings'], OperatorStrings>) => string;
export {};
//# sourceMappingURL=controller.d.ts.map