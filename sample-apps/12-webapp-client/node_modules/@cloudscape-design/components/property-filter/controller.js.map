{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../src/property-filter/controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PropertyFilterProps } from './interfaces';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport { InputProps } from '../input/interfaces';\n\nexport const getQueryActions = (\n  query: PropertyFilterProps['query'],\n  onChange: PropertyFilterProps['onChange'],\n  inputRef: React.RefObject<InputProps.Ref>,\n  preventFocus: React.MutableRefObject<boolean>\n) => {\n  const { tokens, operation } = query;\n  const fireOnChange = (tokens: readonly PropertyFilterProps.Token[], operation: PropertyFilterProps.JoinOperation) =>\n    fireNonCancelableEvent(onChange, { tokens, operation });\n  const setToken = (index: number, newToken: PropertyFilterProps.Token) => {\n    const newTokens = [...tokens];\n    if (newTokens && index < newTokens.length) {\n      newTokens[index] = newToken;\n    }\n    fireOnChange(newTokens, operation);\n  };\n  const removeToken = (index: number) => {\n    const newTokens = tokens.filter((_, i) => i !== index);\n    fireOnChange(newTokens, operation);\n    preventFocus.current = true;\n    inputRef.current?.focus();\n  };\n  const removeAllTokens = () => {\n    fireOnChange([], operation);\n    preventFocus.current = true;\n    inputRef.current?.focus();\n  };\n  const addToken = (newToken: PropertyFilterProps.Token) => {\n    const newTokens = [...tokens];\n    newTokens.push(newToken);\n    fireOnChange(newTokens, operation);\n  };\n  const setOperation = (newOperation: PropertyFilterProps.JoinOperation) => {\n    fireOnChange(tokens, newOperation);\n  };\n  return {\n    setToken,\n    removeToken,\n    removeAllTokens,\n    addToken,\n    setOperation,\n  };\n};\n\n// All possible prefixes of the two-character operators\ntype OperatorPrefix = '<' | '>' | '!';\n\nexport type ParsedText =\n  | {\n      step: 'property';\n      property: PropertyFilterProps.FilteringProperty;\n      operator: PropertyFilterProps.ComparisonOperator;\n      value: string;\n    }\n  | { step: 'operator'; property: PropertyFilterProps.FilteringProperty; operatorPrefix: string }\n  | { step: 'free-text'; operator?: PropertyFilterProps.ComparisonOperator; value: string };\n\nexport const getAllowedOperators = (\n  property: PropertyFilterProps.FilteringProperty\n): PropertyFilterProps.ComparisonOperator[] => {\n  const { operators, defaultOperator } = property;\n  const operatorOrder = ['=', '!=', ':', '!:', '>=', '<=', '<', '>'] as const;\n  const operatorSet: { [key: string]: true } = { [defaultOperator ?? '=']: true };\n  operators?.forEach(op => (operatorSet[op] = true));\n  return operatorOrder.filter(op => operatorSet[op]);\n};\n\n/*\n * parses the value of the filtering input to figure out the current step of entering the token:\n * - \"property\": means that a filter on a particular column is being added, with operator already finalized\n * - \"operator\": means that a filter on a particular column is being added, with operator not yet finalized\n * - \"free-text\": means that a \"free text\" token is being added\n */\nexport const parseText = (\n  filteringText: string,\n  filteringProperties: PropertyFilterProps['filteringProperties'],\n  disableFreeTextFiltering: boolean\n): ParsedText => {\n  const negatedGlobalQuery = /^(!:|!)(.*)/.exec(filteringText);\n  if (!disableFreeTextFiltering && negatedGlobalQuery) {\n    return {\n      step: 'free-text',\n      operator: '!:',\n      value: negatedGlobalQuery[2],\n    };\n  }\n  const { property } = filteringProperties?.reduce<{\n    property?: PropertyFilterProps.FilteringProperty;\n    length: number;\n  }>(\n    (acc, property) => {\n      if (filteringText.toLowerCase().indexOf(property.propertyLabel.toLowerCase()) === 0) {\n        // find the longest property whose name matches the filtering text\n        if (property.propertyLabel.length > acc.length) {\n          acc.length = property.propertyLabel.length;\n          acc.property = property;\n        }\n      }\n      return acc;\n    },\n    { length: 0 }\n  );\n  if (!property) {\n    return {\n      step: 'free-text',\n      value: filteringText,\n    };\n  }\n  const allowedOps = getAllowedOperators(property);\n  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);\n  const hasOperator = new RegExp(`^(\\\\s*)(${allowedOps.join('|')})(.*)`).exec(textWithoutProperty);\n  if (hasOperator) {\n    return {\n      step: 'property',\n      property,\n      // regex above can't match anything but an operator in the second capturing group\n      operator: hasOperator[2] as PropertyFilterProps.ComparisonOperator,\n      value: hasOperator[3].charAt(0) === ' ' ? hasOperator[3].slice(1) : hasOperator[3],\n      // We need to remove the first leading space in case the user presses space\n      // after the operator, for example: Owner: admin, will result in value of ` admin`\n      // and we need to remove the first space, if the user added any more spaces only the\n      // first one will be removed.\n    };\n  }\n  const opPrefixesMap = allowedOps.reduce<{ [key in OperatorPrefix]?: true }>((acc, op) => {\n    if (op.length > 1) {\n      const substr = op.substring(0, 1);\n      acc[substr as OperatorPrefix] = true;\n    }\n    return acc;\n  }, {});\n  const opPrefixes = Object.keys(opPrefixesMap) as OperatorPrefix[];\n  const enteringOperator = new RegExp(`^(\\\\s*)([${opPrefixes.join(',')}])?$`).exec(textWithoutProperty);\n  if (enteringOperator) {\n    return { step: 'operator', property, operatorPrefix: enteringOperator[2] || '' };\n  }\n  return {\n    step: 'free-text',\n    value: filteringText,\n  };\n};\n\nexport const getPropertyOptions = (\n  filteringProperty: PropertyFilterProps.FilteringProperty,\n  filteringOptions: PropertyFilterProps['filteringOptions']\n) => {\n  return filteringOptions?.filter(option => option.propertyKey === filteringProperty.key);\n};\n\ninterface OptionGroup<T> {\n  label: string;\n  options: T[];\n}\n\ninterface ExtendedAutosuggestOption extends AutosuggestProps.Option {\n  tokenValue: string;\n}\n\nexport const getAllValueSuggestions = (\n  filteringOptions: PropertyFilterProps['filteringOptions'],\n  filteringProperties: PropertyFilterProps['filteringProperties'],\n  operator: PropertyFilterProps.ComparisonOperator | undefined = '=',\n  i18nStrings: Pick<PropertyFilterProps.I18nStrings, 'groupValuesText'>,\n  customGroupsText: PropertyFilterProps['customGroupsText']\n) => {\n  const defaultGroup: OptionGroup<ExtendedAutosuggestOption> = {\n    label: i18nStrings.groupValuesText,\n    options: [],\n  };\n  const customGroups: { [K in string]: OptionGroup<ExtendedAutosuggestOption> } = {};\n  filteringOptions?.forEach(filteringOption => {\n    const property = getPropertyByKey(filteringProperties, filteringOption.propertyKey);\n    // given option refers to a non-existent filtering property\n    if (!property) {\n      return;\n    }\n    // this option's filtering property does not support current operator\n    if (getAllowedOperators(property).indexOf(operator) === -1) {\n      return;\n    }\n    if (property.group && !customGroups[property.group]) {\n      const label =\n        customGroupsText?.reduce<string>(\n          (acc, customGroup) => (customGroup.group === property.group ? customGroup.values : acc),\n          ''\n        ) || '';\n      customGroups[property.group] = {\n        label,\n        options: [],\n      };\n    }\n    const propertyGroup = property.group ? customGroups[property.group] : defaultGroup;\n    propertyGroup.options.push({\n      tokenValue: property.propertyLabel + (operator || '=') + filteringOption.value,\n      label: filteringOption.value,\n      __labelPrefix: property.propertyLabel + ' ' + (operator || '='),\n    });\n  });\n  return [defaultGroup, ...Object.keys(customGroups).map(group => customGroups[group])];\n};\n\nexport const getPropertyByKey = (filteringProperties: PropertyFilterProps['filteringProperties'], key: string) => {\n  const propertyMap = filteringProperties.reduce<{ [K: string]: PropertyFilterProps.FilteringProperty }>(\n    (acc, property) => {\n      acc[property.key] = property;\n      return acc;\n    },\n    {}\n  );\n  return propertyMap[key] as PropertyFilterProps.FilteringProperty | undefined;\n};\n\nconst filteringPropertyToAutosuggestOption = (filteringProperty: PropertyFilterProps.FilteringProperty) => ({\n  value: filteringProperty.propertyLabel,\n  keepOpenOnSelect: true,\n});\n\nexport function getPropertySuggestions<T>(\n  filteringProperties: PropertyFilterProps['filteringProperties'],\n  customGroupsText: PropertyFilterProps['customGroupsText'],\n  i18nStrings: Pick<PropertyFilterProps['i18nStrings'], 'groupPropertiesText'>,\n  filteringPropertyToOption: (filteringProperty: PropertyFilterProps.FilteringProperty) => T\n) {\n  const defaultGroup: OptionGroup<T> = {\n    label: i18nStrings.groupPropertiesText,\n    options: [],\n  };\n  const customGroups: { [K in string]: OptionGroup<T> } = {};\n\n  filteringProperties.forEach(filteringProperty => {\n    const { group } = filteringProperty;\n    let optionsGroup = defaultGroup;\n    if (group) {\n      if (!customGroups[group]) {\n        const label =\n          customGroupsText?.reduce<string>(\n            (acc, customGroup) => (customGroup.group === group ? customGroup.properties : acc),\n            ''\n          ) || '';\n        customGroups[group] = { options: [], label };\n      }\n      optionsGroup = customGroups[group];\n    }\n    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));\n  });\n  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];\n  const customGroupsArray = Object.keys(customGroups).map(groupKey => customGroups[groupKey]);\n  return [...defaultGroupArray, ...customGroupsArray];\n}\n\nexport type OperatorStrings =\n  | 'operatorLessText'\n  | 'operatorLessOrEqualText'\n  | 'operatorGreaterText'\n  | 'operatorGreaterOrEqualText'\n  | 'operatorContainsText'\n  | 'operatorDoesNotContainText'\n  | 'operatorEqualsText'\n  | 'operatorDoesNotEqualText';\nexport const getAutosuggestOptions = (\n  parsedText: ParsedText,\n  filteringOptions: PropertyFilterProps['filteringOptions'],\n  filteringProperties: PropertyFilterProps['filteringProperties'],\n  customGroupsText: PropertyFilterProps['customGroupsText'],\n  i18nStrings: Pick<\n    PropertyFilterProps['i18nStrings'],\n    'groupPropertiesText' | 'groupValuesText' | 'operatorsText' | OperatorStrings\n  >\n) => {\n  switch (parsedText.step) {\n    case 'property': {\n      const { propertyLabel, groupValuesLabel } = parsedText.property;\n      const options = getPropertyOptions(parsedText.property, filteringOptions);\n      return {\n        __filterText: parsedText.value,\n        options: [\n          {\n            options: (options || []).map(({ value }) => ({\n              tokenValue: propertyLabel + parsedText.operator + value,\n              label: value,\n              __labelPrefix: propertyLabel + ' ' + parsedText.operator,\n            })),\n            label: groupValuesLabel,\n          },\n        ],\n      };\n    }\n    case 'operator': {\n      return {\n        __filterText: parsedText.property.propertyLabel + ' ' + parsedText.operatorPrefix,\n        options: [\n          ...getPropertySuggestions(\n            filteringProperties,\n            customGroupsText,\n            i18nStrings,\n            filteringPropertyToAutosuggestOption\n          ),\n          {\n            options: getAllowedOperators(parsedText.property).map(value => ({\n              value: parsedText.property.propertyLabel + ' ' + value + ' ',\n              label: parsedText.property.propertyLabel + ' ' + value,\n              description: operatorToDescription(value, i18nStrings),\n              keepOpenOnSelect: true,\n            })),\n            label: i18nStrings.operatorsText,\n          },\n        ],\n      };\n    }\n    case 'free-text': {\n      const needsValueSuggestions = !!parsedText.value;\n      const needsPropertySuggestions = !(parsedText.step === 'free-text' && parsedText.operator === '!:');\n      return {\n        __filterText: parsedText.value,\n        options: [\n          ...(needsPropertySuggestions\n            ? getPropertySuggestions(\n                filteringProperties,\n                customGroupsText,\n                i18nStrings,\n                filteringPropertyToAutosuggestOption\n              )\n            : []),\n          ...(needsValueSuggestions\n            ? getAllValueSuggestions(\n                filteringOptions,\n                filteringProperties,\n                parsedText.operator,\n                i18nStrings,\n                customGroupsText\n              )\n            : []),\n        ],\n      };\n    }\n  }\n};\n\nexport const operatorToDescription = (\n  operator: PropertyFilterProps.ComparisonOperator,\n  i18nStrings: Pick<PropertyFilterProps['i18nStrings'], OperatorStrings>\n) => {\n  const mapping: { [K in PropertyFilterProps.ComparisonOperator]: string } = {\n    ['<']: i18nStrings.operatorLessText,\n    ['<=']: i18nStrings.operatorLessOrEqualText,\n    ['>']: i18nStrings.operatorGreaterText,\n    ['>=']: i18nStrings.operatorGreaterOrEqualText,\n    [':']: i18nStrings.operatorContainsText,\n    ['!:']: i18nStrings.operatorDoesNotContainText,\n    ['=']: i18nStrings.operatorEqualsText,\n    ['!=']: i18nStrings.operatorDoesNotEqualText,\n  };\n  return mapping[operator];\n};\n"]}