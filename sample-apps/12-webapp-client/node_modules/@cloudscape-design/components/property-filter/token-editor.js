import { __assign } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState, useRef } from 'react';
import clsx from 'clsx';
import InternalSelect from '../select/internal';
import InternalSpaceBetween from '../space-between/internal';
import InternalAutosuggest from '../autosuggest/internal';
import InternalPopover from '../popover/internal';
import { InternalButton } from '../button/internal';
import { useUniqueId } from '../internal/hooks/use-unique-id/index';
import styles from './styles.css.js';
import { useLoadItems } from './use-load-items';
import { getAllowedOperators, getPropertyOptions, getPropertyByKey, operatorToDescription, getPropertySuggestions, } from './controller';
var freeTextOperators = [':', '!:'];
function TokenEditorField(_a) {
    var className = _a.className, label = _a.label, children = _a.children;
    var controlId = useUniqueId();
    return (React.createElement("div", { className: clsx(styles['token-editor-line'], className) },
        React.createElement("label", { className: styles['token-editor-label'], htmlFor: controlId }, label),
        React.createElement("div", { className: styles['token-editor-field'] }, children({ controlId: controlId }))));
}
function PropertyInput(_a) {
    var controlId = _a.controlId, propertyKey = _a.propertyKey, onChangePropertyKey = _a.onChangePropertyKey, asyncProps = _a.asyncProps, filteringProperties = _a.filteringProperties, onLoadItems = _a.onLoadItems, customGroupsText = _a.customGroupsText, i18nStrings = _a.i18nStrings, disableFreeTextFiltering = _a.disableFreeTextFiltering;
    var property = propertyKey !== undefined ? getPropertyByKey(filteringProperties, propertyKey) : undefined;
    var propertySelectHandlers = useLoadItems(onLoadItems);
    var asyncPropertySelectProps = asyncProps ? __assign(__assign({}, asyncProps), propertySelectHandlers) : {};
    var propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, function (_a) {
        var propertyLabel = _a.propertyLabel, key = _a.key;
        return ({
            value: key,
            label: propertyLabel,
            dontCloseOnSelect: true
        });
    });
    var allPropertiesOption = {
        label: i18nStrings.allPropertiesLabel,
        value: undefined
    };
    if (!disableFreeTextFiltering) {
        propertyOptions.unshift(allPropertiesOption);
    }
    return (React.createElement(InternalSelect, __assign({ controlId: controlId, options: propertyOptions, selectedOption: property
            ? {
                value: propertyKey !== null && propertyKey !== void 0 ? propertyKey : undefined,
                label: property.propertyLabel
            }
            : allPropertiesOption, onChange: function (e) { return onChangePropertyKey(e.detail.selectedOption.value); } }, asyncPropertySelectProps)));
}
function OperatorInput(_a) {
    var controlId = _a.controlId, propertyKey = _a.propertyKey, operator = _a.operator, onChangeOperator = _a.onChangeOperator, filteringProperties = _a.filteringProperties, i18nStrings = _a.i18nStrings;
    var property = propertyKey !== undefined ? getPropertyByKey(filteringProperties, propertyKey) : undefined;
    var freeTextOperators = [':', '!:'];
    var operatorOptions = (property ? getAllowedOperators(property) : freeTextOperators).map(function (operator) { return ({
        value: operator,
        label: operator,
        description: operatorToDescription(operator, i18nStrings)
    }); });
    return (React.createElement(InternalSelect, { controlId: controlId, options: operatorOptions, triggerVariant: "option", selectedOption: operator
            ? {
                value: operator,
                label: operator,
                description: operatorToDescription(operator, i18nStrings)
            }
            : null, onChange: function (e) { return onChangeOperator(e.detail.selectedOption.value); } }));
}
function ValueInput(_a) {
    var controlId = _a.controlId, propertyKey = _a.propertyKey, operator = _a.operator, value = _a.value, onChangeValue = _a.onChangeValue, asyncProps = _a.asyncProps, filteringProperties = _a.filteringProperties, filteringOptions = _a.filteringOptions, onLoadItems = _a.onLoadItems, i18nStrings = _a.i18nStrings;
    var property = propertyKey !== undefined ? getPropertyByKey(filteringProperties, propertyKey) : undefined;
    var valueOptions = property ? getPropertyOptions(property, filteringOptions).map(function (_a) {
        var value = _a.value;
        return ({ value: value });
    }) : [];
    var valueAutosuggestHandlers = useLoadItems(onLoadItems, '', property);
    var asyncValueAutosuggesProps = propertyKey
        ? __assign(__assign({}, valueAutosuggestHandlers), asyncProps) : { empty: asyncProps.empty };
    return (React.createElement(InternalAutosuggest, __assign({ controlId: controlId, enteredTextLabel: i18nStrings.enteredTextLabel, value: value !== null && value !== void 0 ? value : '', onChange: function (e) { return onChangeValue(e.detail.value); }, disabled: !operator, options: valueOptions }, asyncValueAutosuggesProps, { virtualScroll: true })));
}
function TokenEditorForm(_a) {
    var i18nStrings = _a.i18nStrings, onCancel = _a.onCancel, onSubmit = _a.onSubmit, children = _a.children;
    return (React.createElement("div", { className: styles['token-editor'] },
        children,
        React.createElement("div", { className: styles['token-editor-actions'] },
            React.createElement(InternalButton, { variant: "link", className: styles['token-editor-cancel'], onClick: onCancel }, i18nStrings.cancelActionText),
            React.createElement(InternalButton, { className: styles['token-editor-submit'], onClick: onSubmit }, i18nStrings.applyActionText))));
}
export function TokenEditor(_a) {
    var asyncProperties = _a.asyncProperties, asyncProps = _a.asyncProps, customGroupsText = _a.customGroupsText, disableFreeTextFiltering = _a.disableFreeTextFiltering, expandToViewport = _a.expandToViewport, filteringOptions = _a.filteringOptions, filteringProperties = _a.filteringProperties, i18nStrings = _a.i18nStrings, onLoadItems = _a.onLoadItems, setToken = _a.setToken, token = _a.token, triggerComponent = _a.triggerComponent;
    var _b = useState(token), temporaryToken = _b[0], setTemporaryToken = _b[1];
    var popoverRef = useRef(null);
    var closePopover = function () {
        popoverRef.current && popoverRef.current.dismissPopover();
    };
    var propertyKey = temporaryToken.propertyKey;
    var onChangePropertyKey = function (newPropertyKey) {
        var filteringProperty = filteringProperties.reduce(function (acc, property) { return (property.key === newPropertyKey ? property : acc); }, undefined);
        var allowedOperators = filteringProperty ? getAllowedOperators(filteringProperty) : freeTextOperators;
        var operator = temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) !== -1
            ? temporaryToken.operator
            : allowedOperators[0];
        setTemporaryToken(__assign(__assign({}, temporaryToken), { propertyKey: newPropertyKey, operator: operator }));
    };
    var operator = temporaryToken.operator;
    var onChangeOperator = function (newOperator) {
        setTemporaryToken(__assign(__assign({}, temporaryToken), { operator: newOperator }));
    };
    var value = temporaryToken.value;
    var onChangeValue = function (newValue) {
        setTemporaryToken(__assign(__assign({}, temporaryToken), { value: newValue }));
    };
    return (React.createElement(InternalPopover, { ref: popoverRef, className: styles['token-label'], triggerType: "text", header: i18nStrings.editTokenHeader, size: "large", position: "right", dismissAriaLabel: i18nStrings.dismissAriaLabel, __onOpen: function () { return setTemporaryToken(token); }, renderWithPortal: expandToViewport, content: React.createElement(TokenEditorForm, { i18nStrings: i18nStrings, onCancel: closePopover, onSubmit: function () {
                setToken(temporaryToken);
                closePopover();
            } },
            React.createElement(InternalSpaceBetween, { size: "l" },
                React.createElement(TokenEditorField, { label: i18nStrings.propertyText, className: styles['property-selector'] }, function (_a) {
                    var controlId = _a.controlId;
                    return (React.createElement(PropertyInput, { controlId: controlId, propertyKey: propertyKey, onChangePropertyKey: onChangePropertyKey, asyncProps: asyncProperties ? asyncProps : null, filteringProperties: filteringProperties, onLoadItems: onLoadItems, customGroupsText: customGroupsText, i18nStrings: i18nStrings, disableFreeTextFiltering: disableFreeTextFiltering }));
                }),
                React.createElement(TokenEditorField, { label: i18nStrings.operatorText, className: styles['operator-selector'] }, function (_a) {
                    var controlId = _a.controlId;
                    return (React.createElement(OperatorInput, { controlId: controlId, propertyKey: propertyKey, operator: operator, onChangeOperator: onChangeOperator, filteringProperties: filteringProperties, i18nStrings: i18nStrings }));
                }),
                React.createElement(TokenEditorField, { label: i18nStrings.valueText, className: styles['value-selector'] }, function (_a) {
                    var controlId = _a.controlId;
                    return (React.createElement(ValueInput, { controlId: controlId, propertyKey: propertyKey, operator: operator, value: value, onChangeValue: onChangeValue, asyncProps: asyncProps, filteringProperties: filteringProperties, filteringOptions: filteringOptions, onLoadItems: onLoadItems, i18nStrings: i18nStrings }));
                }))) }, triggerComponent));
}
//# sourceMappingURL=token-editor.js.map