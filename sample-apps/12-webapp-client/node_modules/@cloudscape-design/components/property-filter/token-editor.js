import { __assign } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState, useRef } from 'react';
import clsx from 'clsx';
import InternalSelect from '../select/internal';
import InternalSpaceBetween from '../space-between/internal';
import InternalAutosuggest from '../autosuggest/internal';
import InternalPopover from '../popover/internal';
import { InternalButton } from '../button/internal';
import { useUniqueId } from '../internal/hooks/use-unique-id/index';
import styles from './styles.css.js';
import { useLoadItems } from './use-load-items';
import { getAllowedOperators, getPropertyOptions, getPropertyByKey, operatorToDescription, getPropertySuggestions, } from './controller';
var EditingFields = function (_a) {
    var _b;
    var temporaryToken = _a.temporaryToken, setTemporaryToken = _a.setTemporaryToken, asyncProps = _a.asyncProps, asyncProperties = _a.asyncProperties, filteringProperties = _a.filteringProperties, filteringOptions = _a.filteringOptions, onLoadItems = _a.onLoadItems, customGroupsText = _a.customGroupsText, i18nStrings = _a.i18nStrings, disableFreeTextFiltering = _a.disableFreeTextFiltering;
    var fields = [];
    var property = temporaryToken.propertyKey !== undefined
        ? getPropertyByKey(filteringProperties, temporaryToken.propertyKey)
        : undefined;
    var propertySelectHandlers = useLoadItems(onLoadItems);
    var asyncPropertySelectProps = asyncProperties
        ? __assign(__assign({}, asyncProps), propertySelectHandlers) : {};
    var propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, function (_a) {
        var propertyLabel = _a.propertyLabel, key = _a.key;
        return ({
            value: key,
            label: propertyLabel,
            dontCloseOnSelect: true
        });
    });
    var allPropertiesOption = {
        label: i18nStrings.allPropertiesLabel,
        value: undefined
    };
    if (!disableFreeTextFiltering) {
        propertyOptions.unshift(allPropertiesOption);
    }
    var propertyControlId = useUniqueId('property');
    var propertySelect = (React.createElement(InternalSelect, __assign({ controlId: propertyControlId, options: propertyOptions, selectedOption: property
            ? {
                value: temporaryToken.propertyKey,
                label: property.propertyLabel
            }
            : allPropertiesOption, onChange: function (e) {
            var _a;
            var filteringProperty = ((_a = e.detail.selectedOption) === null || _a === void 0 ? void 0 : _a.value)
                ? filteringProperties.reduce(function (acc, property) { return (property.key === e.detail.selectedOption.value ? property : acc); }, undefined)
                : undefined;
            var allowedOperators = filteringProperty
                ? getAllowedOperators(filteringProperty)
                : freeTextOperators;
            var operator = temporaryToken.operator;
            if (temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) === -1) {
                operator = allowedOperators[0];
            }
            setTemporaryToken(__assign(__assign({}, temporaryToken), { operator: operator, propertyKey: e.detail.selectedOption.value }));
        } }, asyncPropertySelectProps)));
    fields.push({
        text: i18nStrings.propertyText,
        className: styles['property-selector'],
        control: propertySelect,
        controlId: propertyControlId
    });
    var operatorText = temporaryToken.operator;
    var freeTextOperators = [':', '!:'];
    var operatorOptions = (property ? getAllowedOperators(property) : freeTextOperators).map(function (operator) { return ({
        value: operator,
        label: operator,
        description: operatorToDescription(operator, i18nStrings)
    }); });
    var operatorControlId = useUniqueId('operator');
    var operatorSelect = temporaryToken && (React.createElement(InternalSelect, { controlId: operatorControlId, options: operatorOptions, triggerVariant: "option", selectedOption: operatorText
            ? {
                value: operatorText,
                label: operatorText,
                description: operatorToDescription(operatorText, i18nStrings)
            }
            : null, onChange: function (e) {
            e.detail.selectedOption.value &&
                setTemporaryToken(__assign(__assign({}, temporaryToken), { operator: e.detail.selectedOption.value }));
        }, disabled: !temporaryToken }));
    fields.push({
        text: i18nStrings.operatorText,
        className: styles['operator-selector'],
        control: operatorSelect,
        controlId: operatorControlId
    });
    var valueOptions = property ? (_b = getPropertyOptions(property, filteringOptions)) === null || _b === void 0 ? void 0 : _b.map(function (_a) {
        var value = _a.value;
        return ({ value: value });
    }) : [];
    var valueAutosuggestHandlers = useLoadItems(onLoadItems, '', property);
    var asyncValueAutosuggesProps = temporaryToken.propertyKey
        ? __assign(__assign({}, valueAutosuggestHandlers), asyncProps) : { empty: asyncProps.empty };
    var valueControlId = useUniqueId('value');
    var valueAutosuggest = temporaryToken && (React.createElement(InternalAutosuggest, __assign({ controlId: valueControlId, enteredTextLabel: i18nStrings.enteredTextLabel, value: temporaryToken.value || '', onChange: function (e) {
            setTemporaryToken(__assign(__assign({}, temporaryToken), { value: e.detail.value }));
        }, disabled: !operatorText, options: valueOptions }, asyncValueAutosuggesProps, { virtualScroll: true })));
    fields.push({
        text: i18nStrings.valueText,
        className: styles['value-selector'],
        control: valueAutosuggest,
        controlId: valueControlId
    });
    return (React.createElement("div", null,
        React.createElement(InternalSpaceBetween, { size: "l" }, fields.map(function (_a) {
            var text = _a.text, control = _a.control, className = _a.className, controlId = _a.controlId;
            return (React.createElement("div", { className: clsx(styles['token-editor-line'], className), key: text },
                React.createElement("label", { className: styles['token-editor-label'], htmlFor: controlId }, text),
                React.createElement("div", { className: styles['token-editor-field'] }, control)));
        }))));
};
export var TokenEditor = function (props) {
    var token = props.token, triggerComponent = props.triggerComponent, setToken = props.setToken, i18nStrings = props.i18nStrings, expandToViewport = props.expandToViewport;
    var _a = useState(token), temporaryToken = _a[0], setTemporaryToken = _a[1];
    var popoverRef = useRef(null);
    var closePopover = function () {
        popoverRef.current && popoverRef.current.dismissPopover();
    };
    return (React.createElement(InternalPopover, { ref: popoverRef, className: styles['token-label'], triggerType: "text", header: i18nStrings.editTokenHeader, size: "large", position: "right", dismissAriaLabel: i18nStrings.dismissAriaLabel, __onOpen: function () { return setTemporaryToken(token); }, renderWithPortal: expandToViewport, content: React.createElement("div", { className: styles['token-editor'] },
            React.createElement(EditingFields, __assign({}, props, { temporaryToken: temporaryToken, setTemporaryToken: setTemporaryToken })),
            React.createElement("div", { className: styles['token-editor-actions'] },
                React.createElement(InternalButton, { variant: "link", className: styles['token-editor-cancel'], onClick: closePopover }, i18nStrings.cancelActionText),
                React.createElement(InternalButton, { className: styles['token-editor-submit'], onClick: function () {
                        setToken(temporaryToken);
                        closePopover();
                    } }, i18nStrings.applyActionText))) }, triggerComponent));
};
//# sourceMappingURL=token-editor.js.map