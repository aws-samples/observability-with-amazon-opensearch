{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/date-picker/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\nimport { ExpandToViewport } from '../internal/components/dropdown/interfaces';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface DatePickerProps extends BaseComponentProps, FormFieldValidationControlProps, ExpandToViewport {\n  /**\n   * The current input value, in YYYY-MM-DD format.\n   */\n  value: string;\n\n  /**\n   * Specifies the placeholder text rendered when the value is an empty string.\n   */\n  placeholder?: string;\n\n  /**\n   * Defines whether a particular date is enabled in the calendar or not.\n   * If you disable a date in the calendar, users can still enter this date using a keyboard.\n   * We recommend that you also validate these constraints on the client-side and server-side\n   * as you would for other form elements.\n   * @param date\n   */\n  isDateEnabled?: DatePickerProps.IsDateEnabledFunction;\n\n  /**\n   * Specifies the locale to use to render month names and determine the starting day of the week.\n   * If you don't provide this, the locale is determined by the page and browser locales.\n   * Supported values and formats are listed in the\n   * [JavaScript Intl API specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n   */\n  locale?: string;\n\n  /**\n   * Determines the starting day of the week. The values 0-6 map to Sunday-Saturday.\n   * By default the starting day of the week is defined by the locale, but you can use this property to override it.\n   */\n  startOfWeek?: number;\n\n  /**\n   * Used as part of the `aria-label` for today's date in the calendar.\n   */\n  todayAriaLabel: string;\n\n  /**\n   * Specifies an `aria-label` for the 'next month' button.\n   */\n  nextMonthAriaLabel: string;\n\n  /**\n   * Specifies an `aria-label` for the 'previous month' button.\n   */\n  previousMonthAriaLabel: string;\n\n  /**\n   * Specifies a function that generates the `aria-label` for the 'open calendar' button. The `selectedDate` parameter is\n   * a human-readable localised string representing the current value of the input.\n   * (for example, ``selectedDate => 'Choose Date' + (selectedDate ? `, selected date is ${selectedDate}` : '')``)\n   */\n  openCalendarAriaLabel?: DatePickerProps.OpenCalendarAriaLabel;\n\n  /**\n   * Specifies the name of the control used in HTML forms.\n   */\n  name?: string;\n\n  /**\n   * Specifies if the control is disabled, which prevents the\n   * user from modifying the value and prevents the value from\n   * being included in a form submission. A disabled control can't\n   * receive focus.\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies if the control is read only, which prevents the\n   * user from modifying the value but includes it in a form\n   * submission. A read-only control can receive focus.\n   *\n   * Do not use read-only inputs outside of a form.\n   */\n  readOnly?: boolean;\n\n  /**\n   * Indicates whether the control should be focused as\n   * soon as the page loads, which enables the user to\n   * start typing without having to manually focus the control. Don't\n   * use this option on pages where the control may be\n   * scrolled out of the viewport.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Adds an `aria-label` to the native control.\n   *\n   * Use this if you don't have a visible label for this control.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Specifies whether to add `aria-required` to the native control.\n   */\n  ariaRequired?: boolean;\n\n  /**\n   * Called when input focus is moved to the UI control.\n   */\n  onFocus?: NonCancelableEventHandler<null>;\n\n  /**\n   * Called when input focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler<null>;\n\n  /**\n   * Called whenever a user changes the input value (by typing, pasting, or selecting a value).\n   * The event `detail` contains the current value of the field.\n   */\n  onChange?: NonCancelableEventHandler<DatePickerProps.ChangeDetail>;\n}\n\nexport namespace DatePickerProps {\n  export interface ChangeDetail {\n    /**\n     * The new value of this date-picker.\n     */\n    value: string;\n  }\n\n  export interface IsDateEnabledFunction {\n    (date: Date): boolean;\n  }\n\n  export interface OpenCalendarAriaLabel {\n    (selectedDate: string | null): string;\n  }\n\n  export interface Ref {\n    /**\n     * Sets the browser focus on the UI control\n     */\n    focus(): void;\n  }\n}\n"]}