{"version":3,"file":"use-date-picker.js","sourceRoot":"","sources":["../../../src/date-picker/use-date-picker.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEjC,OAAO,EAAE,WAAW,EAAE,MAAM,gCAAgC,CAAC;AAC7D,OAAO,EAAE,sBAAsB,EAA6B,MAAM,oBAAoB,CAAC;AAEvF,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAEzD,MAAM,UAAU,aAAa,CAAC,EAAuC;QAArC,KAAK,WAAA,EAAE,QAAQ,cAAA;IAC7C,IAAM,mBAAmB,GAAG,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACxD,IAAA,KAAkC,QAAQ,CAAgB,mBAAmB,CAAC,EAA7E,YAAY,QAAA,EAAE,eAAe,QAAgD,CAAC;IAErF,IAAM,oBAAoB,GAAG,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IAC3E,IAAA,KAAoC,QAAQ,CAAS,oBAAoB,CAAC,EAAzE,aAAa,QAAA,EAAE,gBAAgB,QAA0C,CAAC;IAEjF,IAAM,oBAAoB,GAAG,UAAC,QAAc;QAC1C,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,IAAM,mBAAmB,GAAG,UAAC,EAAkC;YAAhC,IAAI,UAAA;QACjC,IAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QACvC,eAAe,CAAC,aAAa,CAAC,CAAC;QAC/B,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAChC,sBAAsB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;IAC7D,CAAC,CAAC;IAEF,IAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACrC,IAAI,SAAS,KAAK,KAAK,EAAE;QACvB,IAAI,KAAK,KAAK,EAAE,IAAI,YAAY,KAAK,KAAK,EAAE;YAC1C,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,+DAA+D;QAC/D,kEAAkE;QAClE,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,aAAa,KAAK,KAAK,EAAE;YAChD,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACzB;QACD,sEAAsE;QACtE,IAAI,KAAK,CAAC,MAAM,IAAI,EAAE,IAAI,YAAY,KAAK,KAAK,EAAE;YAChD,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;KACF;IAED,OAAO;QACL,oBAAoB,sBAAA;QACpB,aAAa,eAAA;QACb,gBAAgB,kBAAA;QAChB,YAAY,cAAA;QACZ,eAAe,iBAAA;QACf,oBAAoB,sBAAA;QACpB,mBAAmB,qBAAA;KACpB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { CalendarTypes } from './calendar/definitions';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { DatePickerProps } from './interfaces';\nimport { formatDate } from '../internal/utils/date-time';\n\nexport function useDatePicker({ value, onChange }: UseDatePickerProps) {\n  const defaultSelectedDate = value.length >= 10 ? value : null;\n  const [selectedDate, setSelectedDate] = useState<string | null>(defaultSelectedDate);\n\n  const defaultDisplayedDate = value.length >= 10 ? value : formatDate(new Date());\n  const [displayedDate, setDisplayedDate] = useState<string>(defaultDisplayedDate);\n\n  const onChangeMonthHandler = (newMonth: Date) => {\n    setDisplayedDate(formatDate(newMonth));\n  };\n\n  const onSelectDateHandler = ({ date }: CalendarTypes.DateDetail) => {\n    const formattedDate = formatDate(date);\n    setSelectedDate(formattedDate);\n    setDisplayedDate(formattedDate);\n    fireNonCancelableEvent(onChange, { value: formattedDate });\n  };\n\n  const prevValue = usePrevious(value);\n  if (prevValue !== value) {\n    if (value === '' && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n    // update the displayedDate when inputValue changes in order to\n    // display the correct month when the date picker gets open again.\n    if (value.length >= 4 && displayedDate !== value) {\n      setDisplayedDate(value);\n    }\n    // set the selected date only when a full date (yyyy-mm-dd) is entered\n    if (value.length >= 10 && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n  }\n\n  return {\n    defaultDisplayedDate,\n    displayedDate,\n    setDisplayedDate,\n    selectedDate,\n    setSelectedDate,\n    onChangeMonthHandler,\n    onSelectDateHandler,\n  };\n}\n\nexport interface UseDatePickerProps {\n  value: string;\n  onChange: NonCancelableEventHandler<DatePickerProps.ChangeDetail> | undefined;\n}\n"]}