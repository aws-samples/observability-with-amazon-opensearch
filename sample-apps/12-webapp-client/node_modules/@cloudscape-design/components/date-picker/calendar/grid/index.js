// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useMemo } from 'react';
import styles from '../../styles.css.js';
import GridDay from './day';
import { KeyCode } from '../../../internal/keycode';
import { addDays, addWeeks, isSameMonth } from 'date-fns';
import { getCalendarMonth } from 'mnth';
import rotateDayIndexes from '../utils/rotate-day-indexes';
import { renderDayName } from '../utils/intl';
var Grid = function (_a) {
    var locale = _a.locale, baseDate = _a.baseDate, isDateEnabled = _a.isDateEnabled, focusedDate = _a.focusedDate, onSelectDate = _a.onSelectDate, onFocusDate = _a.onFocusDate, onChangeMonth = _a.onChangeMonth, startOfWeek = _a.startOfWeek, todayAriaLabel = _a.todayAriaLabel, selectedDate = _a.selectedDate, handleFocusMove = _a.handleFocusMove;
    var onGridKeyDownHandler = function (event) {
        var updatedFocusDate;
        if (focusedDate === null) {
            return;
        }
        switch (event.keyCode) {
            case KeyCode.enter:
                event.preventDefault();
                if (focusedDate) {
                    onFocusDate({ date: null });
                    onSelectDate({ date: focusedDate });
                }
                return;
            case KeyCode.right:
                event.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, 1); });
                break;
            case KeyCode.left:
                event.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, -1); });
                break;
            case KeyCode.up:
                event.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, -1); });
                break;
            case KeyCode.down:
                event.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, 1); });
                break;
            default:
                return;
        }
        if (!isSameMonth(updatedFocusDate, baseDate)) {
            onChangeMonth(updatedFocusDate);
        }
        onFocusDate({ date: updatedFocusDate });
    };
    var weeks = useMemo(function () { return getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }); }, [baseDate, startOfWeek]);
    return (React.createElement("div", null,
        React.createElement("div", { className: styles['calendar-day-names'] }, rotateDayIndexes(startOfWeek).map(function (i) { return (React.createElement("div", { key: "day-name-".concat(i), className: styles['calendar-day-name'] }, renderDayName(locale, i))); })),
        React.createElement("div", { className: styles['calendar-dates'], onKeyDown: onGridKeyDownHandler }, weeks.map(function (week, weekIndex) {
            var isDateInLastWeek = weeks.length - 1 === weekIndex;
            return (React.createElement("div", { key: "week-".concat(weekIndex), className: styles['calendar-week'] }, week.map(function (date, dateIndex) {
                return (React.createElement(GridDay, { key: "date-".concat(weekIndex, "-").concat(dateIndex), locale: locale, baseDate: baseDate, selectedDate: selectedDate, date: date, focusedDate: focusedDate, todayAriaLabel: todayAriaLabel, onSelectDate: function (date) {
                        onSelectDate({ date: date });
                    }, isDateEnabled: isDateEnabled, isDateInLastWeek: isDateInLastWeek }));
            })));
        }))));
};
export default Grid;
//# sourceMappingURL=index.js.map