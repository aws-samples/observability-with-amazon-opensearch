{"version":3,"file":"date.js","sourceRoot":"","sources":["../../../../../src/date-picker/calendar/utils/date.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const isoToDisplay = (value: string) => value.replace(/-/g, '/');\nexport const displayToIso = (value: string) => value.replace(/\\//g, '-');\n\nexport const daysInMonth = (date: Date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\nconst padLeftZeros = (value: string, length: number) => {\n  while (value.length < length) {\n    value = `0${value}`;\n  }\n  return value;\n};\n\n// we cannot use new Date(string) constructor, because it produces GMT time that may have different date than the local\nexport function parseDate(value: string): Date;\nexport function parseDate(value: string, strict: boolean): Date | null;\nexport function parseDate(value: string, strict = false): Date | null {\n  const [year, month, day] = value.split('-');\n\n  const y = Number(year);\n  const m = Number(month);\n  const d = Number(day);\n\n  if (strict) {\n    if (isNaN(y) || isNaN(m) || isNaN(d)) {\n      return null;\n    }\n  }\n\n  return new Date(y, (m || 1) - 1, d || 1);\n}\n\n// we cannot use Date.toISOString because it produces GMT time where the date can be different than local\nexport const formatDate = (value: Date): string => {\n  const year = value.getFullYear();\n  const month = padLeftZeros(`${value.getMonth() + 1}`, 2);\n  const date = padLeftZeros(`${value.getDate()}`, 2);\n  return `${year}-${month}-${date}`;\n};\n\nexport const formatTime = (value: Date): string => {\n  const hours = padLeftZeros(`${value.getHours()}`, 2);\n  const minutes = padLeftZeros(`${value.getMinutes()}`, 2);\n  const seconds = padLeftZeros(`${value.getSeconds()}`, 2);\n  return `${hours}:${minutes}:${seconds}`;\n};\n\nexport function formatISOStringWithoutTimezone(dateString: string, timeString: string) {\n  return `${dateString}T${timeString}`;\n}\n\n// reuse date instances, to allow shallow equality checking\nconst memoCache: Record<string, Date> = {};\nexport const memoizedDate = (key: string, date: string | null) => {\n  const parsed = date && date.length >= 4 && parseDate(date);\n  if (!(memoCache[key] && parsed && memoCache[key].getTime() === parsed.getTime())) {\n    memoCache[key] = parsed as Date;\n  }\n  return memoCache[key];\n};\n"]}