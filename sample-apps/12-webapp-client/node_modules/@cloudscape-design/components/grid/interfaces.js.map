{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/grid/interfaces.tsx"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { Breakpoint as _Breakpoint } from '../internal/breakpoints';\nimport { BaseComponentProps } from '../internal/base-component';\n\nexport interface GridProps extends BaseComponentProps {\n  /**\n   * An array of element definitions that specifies how the columns must be\n   * arranged. Each element definition can have the following properties:\n   *\n   * - `colspan` (number | GridProps.BreakpointMapping) - The number (1-12) of grid elements for this column to span.\n   * - `offset` (number | GridProps.BreakpointMapping) - The number (0-11) of grid elements by which to offset the column.\n   * - `pull` (number | GridProps.BreakpointMapping) - The number (0-12) of grid elements by which to pull the column to the left.\n   * - `push` (number | GridProps.BreakpointMapping) - The number (0-12) of grid elements by which to push the column to the right.\n   *\n   * The value for the each property can be a number (which applies for all\n   * breakpoints) or an object where the key is one of the supported breakpoints\n   * (`xxs`, `xs`, `s`, `m`, `l`, `xl`) or `default`. The value of this key is a number of columns,\n   * applied for that breakpoint and those above it. You must provide a `default` value for `colspan`.\n   *\n   * We recommend that you don't use the `pull` and `push` properties of the element definition\n   * for accessibility reasons.\n   */\n  gridDefinition?: ReadonlyArray<GridProps.ElementDefinition>;\n\n  /**\n   * Determines whether horizontal and vertical gutters are hidden.\n   */\n  disableGutters?: boolean;\n\n  /**\n   * The elements to align in the grid.\n   *\n   * You can provide any elements here. The number of elements\n   * should match the number of objects defined in the `gridDefinition`\n   * property.\n   */\n  children?: React.ReactNode;\n}\n\nexport namespace GridProps {\n  export type Breakpoint = _Breakpoint;\n\n  export type BreakpointMapping = Partial<Record<_Breakpoint, number>>;\n\n  export interface ElementDefinition {\n    /**\n     * The number of grid elements for the column to span.\n     */\n    colspan?: number | GridProps.BreakpointMapping;\n\n    /**\n     * The number of grid elements to offset the column by.\n     */\n    offset?: number | GridProps.BreakpointMapping;\n\n    /**\n     * The number of grid elements to pull the column to the left by.\n     */\n    pull?: number | GridProps.BreakpointMapping;\n\n    /**\n     * The number of grid elements to push the column to the right by.\n     */\n    push?: number | GridProps.BreakpointMapping;\n  }\n}\n"]}