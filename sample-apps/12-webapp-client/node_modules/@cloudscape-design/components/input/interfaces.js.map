{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/input/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { BaseKeyDetail, CancelableEventHandler, NonCancelableEventHandler } from '../internal/events';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\n\nexport interface BaseInputProps {\n  /**\n   * Specifies the text entered into the form element.\n   */\n  value: string;\n\n  /**\n   * Specifies the name of the control used in HTML forms.\n   */\n  name?: string;\n\n  /**\n   * Specifies the placeholder text rendered when the value is an empty string.\n   */\n  placeholder?: string;\n\n  /**\n   * Specifies if the control is disabled, which prevents the\n   * user from modifying the value and prevents the value from\n   * being included in a form submission. A disabled control can't\n   * receive focus.\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies if the control is read only, which prevents the\n   * user from modifying the value but includes it in a form\n   * submission. A read-only control can receive focus.\n   *\n   * Don't use read-only inputs outside a form.\n   */\n  readOnly?: boolean;\n\n  /**\n   * Indicates whether the control should be focused as\n   * soon as the page loads, which enables the user to\n   * start typing without having to manually focus the control. Don't\n   * use this option on pages where the control may be\n   * scrolled out of the viewport.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Specifies whether to disable browser autocorrect and related features.\n   * If you set this to `true`, it disables any native browser capabilities\n   * that automatically correct user input, such as `autocorrect` and\n   * `autocapitalize`. If you don't set it, the behavior follows the default behavior\n   * of the user's browser.\n   */\n  disableBrowserAutocorrect?: boolean;\n\n  /**\n   * Adds an `aria-label` to the native control.\n   *\n   * Use this if you don't have a visible label for this control.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Specifies whether to add `aria-required` to the native control.\n   */\n  ariaRequired?: boolean;\n\n  /**\n   * Called when input focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler<null>;\n\n  /**\n   * Called when input focus is moved to the UI control.\n   */\n  onFocus?: NonCancelableEventHandler<null>;\n\n  /**\n   * Called whenever a user changes the input value (by typing or pasting).\n   * The event `detail` contains the current value of the field.\n   */\n  onChange?: NonCancelableEventHandler<InputProps.ChangeDetail>;\n}\nexport interface InputAutoComplete {\n  /**\n   * Specifies whether to enable a browser's autocomplete functionality for this input.\n   * In some cases it might be appropriate to disable autocomplete (for example, for security-sensitive fields).\n   * To use it correctly, set the `name` property.\n   *\n   * You can either provide a boolean value to set the property to \"on\" or \"off\", or specify a string value\n   * for the [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attribute.\n   */\n  autoComplete?: boolean | string;\n}\nexport interface InputKeyEvents {\n  /**\n   * Called when the underlying native textarea emits a `keydown` event.\n   * The event `detail` contains the `keyCode` and information\n   * about modifiers (that is, CTRL, ALT, SHIFT, META, etc.).\n   */\n  onKeyDown?: CancelableEventHandler<InputProps.KeyDetail>;\n\n  /**\n   * Called when the underlying native textarea emits a `keyup` event.\n   * The event `detail` contains the `keyCode` and information\n   * about modifiers (that is, CTRL, ALT, SHIFT, META, etc.).\n   */\n  onKeyUp?: CancelableEventHandler<InputProps.KeyDetail>;\n}\n\nexport interface InputProps\n  extends BaseComponentProps,\n    BaseInputProps,\n    InputKeyEvents,\n    InputAutoComplete,\n    FormFieldValidationControlProps {\n  /**\n   * Specifies the type of control to render.\n   * Inputs with a `number` type use the native element behavior, which might\n   * be slightly different across browsers.\n   */\n  type?: InputProps.Type;\n\n  /**\n   * Adds a hint to the browser about the type of data a user may enter into this field.\n   * Some devices may render a different virtual keyboard depending on this value.\n   * This value may not be supported by all browsers or devices.\n   */\n  inputMode?: InputProps.InputMode;\n\n  /**\n   * The step attribute is a number that specifies the granularity that the value\n   * must adhere to or the keyword \"any\". It is valid for the numeric input types,\n   * including the date, month, week, time, datetime-local, number and range types.\n   */\n  step?: InputProps.Step;\n}\n\nexport namespace InputProps {\n  export type Type = 'text' | 'password' | 'search' | 'number' | 'email' | 'url';\n  export type InputMode = 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n  export type Step = number | 'any';\n\n  export type ChangeDetail = BaseChangeDetail;\n  export type KeyDetail = BaseKeyDetail;\n\n  export interface Ref {\n    /**\n     * Sets input focus onto the UI control.\n     */\n    focus(): void;\n\n    /**\n     * Selects all text in the input control.\n     */\n    select(): void;\n  }\n}\nexport interface BaseChangeDetail {\n  value: string;\n}\n"]}