import { __assign, __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import styles from './styles.css.js';
import { useStickyPosition } from '../utils/use-sticky-position';
var StaticNotifications = function (_a) {
    var testUtilsClassName = _a.testUtilsClassName, children = _a.children, labels = _a.labels;
    return (React.createElement("div", { className: clsx(testUtilsClassName), role: "region", "aria-label": labels === null || labels === void 0 ? void 0 : labels.notifications }, children));
};
var StickyNotifications = function (props) {
    var _a = useStickyPosition(props.topOffset), stickyRef = _a[0], placeholder = _a[1];
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { ref: stickyRef, className: styles['notifications-sticky'] },
            React.createElement(StaticNotifications, __assign({}, props))),
        placeholder));
};
export var Notifications = React.forwardRef(function (_a, ref) {
    var navigationPadding = _a.navigationPadding, toolsPadding = _a.toolsPadding, sticky = _a.sticky, isMobile = _a.isMobile, rest = __rest(_a, ["navigationPadding", "toolsPadding", "sticky", "isMobile"]);
    var notificationsProps = __assign({ isMobile: isMobile }, rest);
    return (React.createElement("div", { ref: ref, className: clsx(isMobile && styles['root-mobile'], !navigationPadding && styles['root-no-navigation-padding'], !toolsPadding && styles['root-no-tools-padding']) }, sticky ? React.createElement(StickyNotifications, __assign({}, notificationsProps)) : React.createElement(StaticNotifications, __assign({}, notificationsProps))));
});
//# sourceMappingURL=index.js.map