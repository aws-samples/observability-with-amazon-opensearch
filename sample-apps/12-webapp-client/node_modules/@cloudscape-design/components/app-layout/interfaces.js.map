{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/app-layout/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface AppLayoutProps extends BaseComponentProps {\n  /**\n   * Determines the default behavior of the component based on some predefined page layouts.\n   * Individual properties will always take precedence over the default coming from the content type.\n   */\n  contentType?: AppLayoutProps.ContentType;\n\n  /**\n   * If `true`, disables outer paddings for the content slot.\n   */\n  disableContentPaddings?: boolean;\n\n  /**\n   * Activates a backwards-compatibility mode for applications with non-fixed headers and footers.\n   */\n  disableBodyScroll?: boolean;\n\n  /**\n   * State of the navigation drawer.\n   */\n  navigationOpen?: boolean;\n\n  /**\n   * Navigation drawer width in pixels.\n   */\n  navigationWidth?: number;\n\n  /**\n   * If `true`, the navigation drawer is not displayed at all.\n   */\n  navigationHide?: boolean;\n\n  /**\n   * State of the tools drawer.\n   */\n  toolsOpen?: boolean;\n\n  /**\n   * If `true`, the tools drawer is not displayed at all.\n   */\n  toolsHide?: boolean;\n\n  /**\n   * Tools drawer width in pixels.\n   */\n  toolsWidth?: number;\n\n  /**\n   * Maximum main content panel width in pixels.\n   *\n   * If set to `Number.MAX_VALUE`, the main content panel will occupy the full available width.\n   */\n  maxContentWidth?: number;\n\n  /**\n   * Minimum main content panel width in pixels.\n   */\n  minContentWidth?: number;\n\n  /**\n   * If true, the notification slot is rendered above the scrollable\n   * content area so it is always visible.\n   *\n   * Note that sticky notifications are not supported in Internet Explorer.\n   */\n  stickyNotifications?: boolean;\n\n  /**\n   * CSS selector for the application header.\n   */\n  headerSelector?: string;\n\n  /**\n   * CSS selector for the application footer.\n   */\n  footerSelector?: string;\n\n  /**\n   * Aria labels for the drawer operating buttons. Use this property to ensure accessibility.\n   *\n   * * `navigation` (string) - Label for the landmark that wraps the navigation drawer.\n   * * `navigationClose` (string) - Label for the button that closes the navigation drawer.\n   * * `navigationToggle` (string) - Label for the button that opens the navigation drawer.\n   * * `notification` (string) - Label for the region that contains notification messages.\n   * * `tools` (string) - Label for the landmark that wraps the tools drawer.\n   * * `toolsClose` (string) - Label for the button that closes the tools drawer.\n   * * `toolsToggle` (string) - Label for the button that opens the tools drawer.\n   *\n   * Example:\n   * ```\n   * {\n   *   navigation: \"Navigation drawer\",\n   *   navigationClose: \"Close navigation drawer\",\n   *   navigationToggle: \"Open navigation drawer\",\n   *   notifications: \"Notifications\",\n   *   tools: \"Help panel\",\n   *   toolsClose: \"Close help panel\",\n   *   toolsToggle: \"Open help panel\"\n   * }\n   * ```\n   */\n  ariaLabels?: AppLayoutProps.Labels;\n\n  /**\n   * Navigation drawer.\n   */\n  navigation?: React.ReactNode;\n\n  /**\n   * Top area of the page content.\n   * @visualrefresh\n   */\n  contentHeader?: React.ReactNode;\n\n  /**\n   * Disables overlap between `contentHeader` and `content` slots.\n   * @visualrefresh\n   */\n  disableContentHeaderOverlap?: boolean;\n\n  /**\n   * Main content.\n   */\n  content?: React.ReactNode;\n\n  /**\n   * Tools drawer.\n   */\n  tools?: React.ReactNode;\n\n  /**\n   * Displayed on top of the main content in the scrollable area.\n   *\n   * Conceived to contain notifications (flash messages).\n   */\n  notifications?: React.ReactNode;\n\n  /**\n   * Use this slot to add the [breadcrumb group component](/components/breadcrumb-group/) to the app layout.\n   */\n  breadcrumbs?: React.ReactNode;\n\n  /**\n   * Fired when the navigation drawer is toggled.\n   */\n  onNavigationChange?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;\n\n  /**\n   * Fired when the tools drawer is toggled.\n   */\n  onToolsChange?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;\n  /**\n   * Use this slot to add the [split panel component](/components/split-panel/) to the app layout.\n   */\n  splitPanel?: React.ReactNode;\n\n  /**\n   * The size of the split panel in pixels.\n   */\n  splitPanelSize?: number;\n\n  /**\n   * State of the split panel.\n   */\n  splitPanelOpen?: boolean;\n  /**\n   * Controls the split panel preferences.\n   *\n   * By default, the preference is `{ position: 'bottom' }`\n   */\n  splitPanelPreferences?: AppLayoutProps.SplitPanelPreferences;\n  /**\n   * Fired when the split panel is resized.\n   */\n  onSplitPanelResize?: NonCancelableEventHandler<AppLayoutProps.SplitPanelResizeDetail>;\n  /**\n   * Fired when the split panel is toggled.\n   */\n  onSplitPanelToggle?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;\n  /**\n   * Fired when the split panel preferences change.\n   */\n  onSplitPanelPreferencesChange?: NonCancelableEventHandler<AppLayoutProps.SplitPanelPreferences>;\n}\n\nexport namespace AppLayoutProps {\n  export type ContentType = 'default' | 'form' | 'table' | 'cards' | 'wizard';\n\n  export interface Ref {\n    /**\n     * Manually closes the navigation drawer if it is necessary for the current\n     * viewport size.\n     */\n    closeNavigationIfNecessary(): void;\n\n    /**\n     * Opens the tools panel if it is not already open. Note that it is preferable\n     * to control the state by listening to `toolsChange` and providing `toolsOpen`.\n     */\n    openTools(): void;\n  }\n\n  export interface Labels {\n    notifications?: string;\n\n    navigation?: string;\n    navigationToggle?: string;\n    navigationClose?: string;\n\n    tools?: string;\n    toolsToggle?: string;\n    toolsClose?: string;\n  }\n\n  export interface ChangeDetail {\n    open: boolean;\n  }\n\n  export interface SplitPanelResizeDetail {\n    size: number;\n  }\n\n  export interface SplitPanelPreferences {\n    position: 'side' | 'bottom';\n  }\n  // Duplicated the positions because using this definition in SplitPanelPreferences would display\n  // 'AppLayoutProps.SplitPanelPosition' on the API docs instead of the string values.\n  export type SplitPanelPosition = 'side' | 'bottom';\n}\n"]}