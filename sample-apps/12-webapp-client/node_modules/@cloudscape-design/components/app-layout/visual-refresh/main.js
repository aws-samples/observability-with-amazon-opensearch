// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useContext } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { SplitPanelContext } from '../../internal/context/split-panel-context';
import styles from './styles.css.js';
import testutilStyles from '../test-classes/styles.css.js';
export default function Main() {
    var _a;
    var _b = useContext(AppLayoutContext), breadcrumbs = _b.breadcrumbs, content = _b.content, contentHeader = _b.contentHeader, contentType = _b.contentType, disableContentPaddings = _b.disableContentPaddings, dynamicOverlapHeight = _b.dynamicOverlapHeight, hasNotificationsContent = _b.hasNotificationsContent, isNavigationOpen = _b.isNavigationOpen, isSplitPanelOpen = _b.isSplitPanelOpen, isToolsOpen = _b.isToolsOpen, isMobile = _b.isMobile, isAnyPanelOpen = _b.isAnyPanelOpen, mainElement = _b.mainElement;
    var splitPanelPosition = useContext(SplitPanelContext).position;
    var isUnfocusable = isMobile && isAnyPanelOpen;
    return (React.createElement("div", { className: clsx(styles.container, styles["content-type-".concat(contentType)], styles["split-panel-position-".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom')], (_a = {},
            _a[styles['disable-content-paddings']] = disableContentPaddings,
            _a[styles['has-breadcrumbs']] = breadcrumbs,
            _a[styles['has-dynamic-overlap-height']] = dynamicOverlapHeight > 0,
            _a[styles['has-header']] = contentHeader,
            _a[styles['has-notifications-content']] = hasNotificationsContent,
            _a[styles['is-navigation-open']] = isNavigationOpen,
            _a[styles['is-tools-open']] = isToolsOpen,
            _a[styles['is-split-panel-open']] = isSplitPanelOpen,
            _a[styles.unfocusable] = isUnfocusable,
            _a), testutilStyles.content), ref: mainElement }, content));
}
//# sourceMappingURL=main.js.map