import React from 'react';
import { AppLayoutProps } from '../interfaces';
/**
 * The default values are destructured in the context instantiation to
 * prevent downstream Typescript errors. This could likely be replaced
 * by a context interface definition that extends the AppLayout interface.
 */
export declare const AppLayoutContext: React.Context<{
    dynamicOverlapHeight: number;
    handleSplitPanelClick: () => void;
    handleNavigationClick: (isOpen: boolean) => void;
    handleSplitPanelPreferencesChange: (detail: AppLayoutProps.SplitPanelPreferences) => void;
    handleSplitPanelResize: (detail: {
        size: number;
    }) => void;
    handleToolsClick: (value: boolean) => void;
    hasDefaultToolsWidth: boolean;
    hasNotificationsContent: boolean;
    isAnyPanelOpen: boolean;
    isMobile: boolean;
    isNavigationOpen: boolean;
    isSplitPanelForcedPosition: boolean;
    isSplitPanelOpen?: boolean | undefined;
    isToolsOpen?: boolean | undefined;
    layoutElement: React.Ref<HTMLElement>;
    layoutWidth: number;
    mainElement: React.Ref<HTMLDivElement>;
    mainOffsetLeft: number;
    notificationsElement: React.Ref<HTMLDivElement>;
    notificationsHeight: number;
    offsetBottom: number;
    setDynamicOverlapHeight: (value: number) => void;
    setIsNavigationOpen: (value: boolean) => void;
    setIsToolsOpen: (value: boolean) => void;
    setOffsetBottom: (value: number) => void;
    setSplitPanelReportedSize: (value: number) => void;
    headerHeight: number;
    footerHeight: number;
    splitPanelMaxWidth: number;
    splitPanelMinWidth: number;
    splitPanelPosition: AppLayoutProps.SplitPanelPosition;
    splitPanelReportedSize: number;
    contentType?: AppLayoutProps.ContentType | undefined;
    disableContentPaddings?: boolean | undefined;
    disableBodyScroll?: boolean | undefined;
    navigationOpen?: boolean | undefined;
    navigationWidth?: number | undefined;
    navigationHide?: boolean | undefined;
    toolsOpen?: boolean | undefined;
    toolsHide?: boolean | undefined;
    toolsWidth?: number | undefined;
    maxContentWidth?: number | undefined;
    minContentWidth?: number | undefined;
    stickyNotifications?: boolean | undefined;
    headerSelector?: string | undefined;
    footerSelector?: string | undefined;
    ariaLabels?: AppLayoutProps.Labels | undefined;
    navigation?: React.ReactNode;
    contentHeader?: React.ReactNode;
    disableContentHeaderOverlap?: boolean | undefined;
    content?: React.ReactNode;
    tools?: React.ReactNode;
    notifications?: React.ReactNode;
    breadcrumbs?: React.ReactNode;
    onNavigationChange?: import("../../internal/events").NonCancelableEventHandler<AppLayoutProps.ChangeDetail> | undefined;
    onToolsChange?: import("../../internal/events").NonCancelableEventHandler<AppLayoutProps.ChangeDetail> | undefined;
    splitPanel?: React.ReactNode;
    splitPanelSize?: number | undefined;
    splitPanelOpen?: boolean | undefined;
    splitPanelPreferences?: AppLayoutProps.SplitPanelPreferences | undefined;
    onSplitPanelResize?: import("../../internal/events").NonCancelableEventHandler<AppLayoutProps.SplitPanelResizeDetail> | undefined;
    onSplitPanelToggle?: import("../../internal/events").NonCancelableEventHandler<AppLayoutProps.ChangeDetail> | undefined;
    onSplitPanelPreferencesChange?: import("../../internal/events").NonCancelableEventHandler<AppLayoutProps.SplitPanelPreferences> | undefined;
    className?: string | undefined;
    id?: string | undefined;
}>;
export declare const AppLayoutProvider: React.ForwardRefExoticComponent<AppLayoutProps & {
    children: React.ReactNode;
} & React.RefAttributes<AppLayoutProps.Ref>>;
//# sourceMappingURL=context.d.ts.map