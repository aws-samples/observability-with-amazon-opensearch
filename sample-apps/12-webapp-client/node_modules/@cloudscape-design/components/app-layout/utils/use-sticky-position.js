// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useRef } from 'react';
import { useContainerQuery } from '../../internal/hooks/container-queries';
import { useMergeRefs } from '../../internal/hooks/use-merge-refs';
function getScrollableContainers(element) {
    var node = element;
    while ((node = node.parentElement) && node !== document.body) {
        if (['scroll', 'auto'].indexOf(getComputedStyle(node).overflow) > -1) {
            return node;
        }
    }
    return null;
}
export function useStickyPosition(topOffset) {
    if (topOffset === void 0) { topOffset = 0; }
    var _a = useContainerQuery(function (rect) { return rect.height; }), stickyHeight = _a[0], stickyMeasureRef = _a[1];
    var stickyRefObject = useRef(null);
    var stickyRef = useMergeRefs(stickyMeasureRef, stickyRefObject);
    var _b = useContainerQuery(function (rect) { return rect.width; }), stickyWidth = _b[0], placeholderMeasureRef = _b[1];
    var placeholderRefObject = useRef(null);
    var placeholderRef = useMergeRefs(placeholderMeasureRef, placeholderRefObject);
    var placeholder = React.createElement("div", { ref: placeholderRef });
    useEffect(function () {
        if (!stickyRefObject.current || !placeholderRefObject.current) {
            return;
        }
        var stickyElement = stickyRefObject.current;
        var placeholder = placeholderRefObject.current;
        var scrollParent = getScrollableContainers(stickyElement);
        var handler = function () {
            var stickyBox = stickyElement.getBoundingClientRect();
            var containerBox = scrollParent ? scrollParent.getBoundingClientRect() : { top: 0 };
            if (stickyBox.top - containerBox.top <= topOffset) {
                stickyElement.style.position = 'fixed';
                stickyElement.style.width = "".concat(stickyWidth, "px");
                stickyElement.style.top = "".concat(topOffset, "px");
                placeholder.style.height = "".concat(stickyHeight, "px");
            }
            else {
                stickyElement.style.position = '';
                stickyElement.style.width = "";
                stickyElement.style.top = "";
                placeholder.style.height = "";
            }
        };
        var eventTarget = scrollParent || window;
        eventTarget.addEventListener('scroll', handler);
        handler();
        return function () { return eventTarget.removeEventListener('scroll', handler); };
    }, [topOffset, stickyWidth, stickyHeight, stickyRefObject, placeholderRefObject]);
    return [stickyRef, placeholder];
}
//# sourceMappingURL=use-sticky-position.js.map