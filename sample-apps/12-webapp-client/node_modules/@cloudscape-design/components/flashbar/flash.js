import React from 'react';
import InternalSpinner from '../spinner/internal';
import InternalIcon from '../icon/internal';
import clsx from 'clsx';
import styles from './styles.css.js';
import { InternalButton } from '../button/internal';
import { warnOnce } from '../internal/logging';
import { isDevelopment } from '../internal/is-development';
var ICON_TYPES = {
    success: 'status-positive',
    warning: 'status-warning',
    info: 'status-info',
    error: 'status-negative'
};
function actionButton(buttonText, onButtonClick) {
    return (React.createElement(InternalButton, { onClick: onButtonClick, className: styles['action-button'], formAction: "none" }, buttonText));
}
function dismissButton(dismissLabel, onDismiss) {
    return (React.createElement("div", { className: styles['dismiss-button-wrapper'] },
        React.createElement(InternalButton, { onClick: onDismiss, className: styles['dismiss-button'], variant: "flashbar-icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel })));
}
export var Flash = React.forwardRef(function (_a, ref) {
    var _b;
    var header = _a.header, content = _a.content, dismissible = _a.dismissible, dismissLabel = _a.dismissLabel, loading = _a.loading, action = _a.action, buttonText = _a.buttonText, onButtonClick = _a.onButtonClick, onDismiss = _a.onDismiss, className = _a.className, transitionState = _a.transitionState, _c = _a.type, type = _c === void 0 ? 'info' : _c;
    if (isDevelopment) {
        if (buttonText && !onButtonClick) {
            warnOnce('Flashbar', "You provided a `buttonText` prop without an `onButtonClick` handler. This will render a non-interactive action button.");
        }
        if (dismissible && !onDismiss) {
            warnOnce('Flashbar', "You have set the `dismissible` prop without an `onDismiss` handler. This will render a non-interactive dismiss button.");
        }
    }
    var button = action || (buttonText && actionButton(buttonText, onButtonClick));
    var iconType = ICON_TYPES[type];
    var icon = loading ? React.createElement(InternalSpinner, null) : React.createElement(InternalIcon, { name: iconType });
    var effectiveType = loading ? 'info' : type;
    return (React.createElement("div", { ref: ref, className: clsx(styles.flash, styles["flash-type-".concat(effectiveType)], className, transitionState
            ? (_b = {},
                _b[styles.enter] = transitionState === 'enter',
                _b[styles.entering] = transitionState === 'entering',
                _b[styles.entered] = transitionState === 'entered',
                _b[styles.exit] = transitionState === 'exit',
                _b[styles.exiting] = transitionState === 'exiting',
                _b[styles.exited] = transitionState === 'exited',
                _b) : '') },
        React.createElement("div", { className: clsx(styles['flash-icon'], styles['flash-text']) }, icon),
        React.createElement("div", { className: styles['flash-body'] },
            React.createElement("div", { className: clsx(styles['flash-message'], styles['flash-text']) },
                React.createElement("div", { className: styles['flash-header'] }, header),
                React.createElement("div", { className: styles['flash-content'] }, content)),
            button && React.createElement("div", { className: styles['action-button-wrapper'] }, button)),
        dismissible && dismissButton(dismissLabel, onDismiss)));
});
//# sourceMappingURL=flash.js.map