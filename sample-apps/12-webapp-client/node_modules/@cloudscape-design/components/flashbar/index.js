import { __assign, __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import clsx from 'clsx';
import React from 'react';
import { useMergeRefs } from '../internal/hooks/use-merge-refs';
import { getBaseProps } from '../internal/base-component';
import styles from './styles.css.js';
import { Flash } from './flash';
import { useContainerBreakpoints } from '../internal/hooks/container-queries';
import { applyDisplayName } from '../internal/utils/apply-display-name';
import VisualContext from '../internal/components/visual-context';
import useBaseComponent from '../internal/hooks/use-base-component';
import { useReducedMotion, useVisualRefresh } from '../internal/hooks/use-visual-mode';
import { TransitionGroup } from 'react-transition-group';
import { Transition } from '../internal/components/transition';
import { TIMEOUT_FOR_ENTERING_ANIMATION } from './constant';
export default function Flashbar(_a) {
    var items = _a.items, restProps = __rest(_a, ["items"]);
    var __internalRootRef = useBaseComponent('Flashbar').__internalRootRef;
    var _b = useContainerBreakpoints(['xs']), breakpoint = _b[0], ref = _b[1];
    var isRefresh = useVisualRefresh(__internalRootRef);
    var baseProps = getBaseProps(restProps);
    var mergedRef = useMergeRefs(ref, __internalRootRef);
    // All the flash items should have ids so we can identify which DOM element is being removed from the DOM to animate it.
    var motionDisabled = useReducedMotion(ref) || !isRefresh || (items && !items.every(function (item) { return 'id' in item; }));
    // Motion will be disabled if any of the provided flash messages does not contain an `id`
    var renderFlashItem = function (item, index) {
        var _a;
        return (React.createElement(Flash, __assign({ key: (_a = item.id) !== null && _a !== void 0 ? _a : index, 
            // eslint-disable-next-line react/forbid-component-props
            className: clsx(isRefresh ? styles['flash-refresh'] : '') }, item)));
    };
    var renderFlashItemsWithTransitions = function (items) {
        return (React.createElement(React.Fragment, null,
            React.createElement(TransitionGroup, { component: null }, items &&
                items.map(function (item, index) {
                    var _a;
                    return (React.createElement(Transition, { transitionChangeDelay: { entering: TIMEOUT_FOR_ENTERING_ANIMATION }, key: (_a = item.id) !== null && _a !== void 0 ? _a : index, "in": true }, function (state, transitionRootElement) {
                        var _a;
                        return (React.createElement(Flash, __assign({ ref: transitionRootElement, key: (_a = item.id) !== null && _a !== void 0 ? _a : index, transitionState: state, 
                            // eslint-disable-next-line react/forbid-component-props
                            className: clsx(isRefresh ? styles['flash-refresh'] : '') }, item)));
                    }));
                }))));
    };
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(baseProps.className, styles.flashbar, styles["breakpoint-".concat(breakpoint)]), ref: mergedRef }),
        React.createElement(VisualContext, { contextName: "flashbar" }, items && (React.createElement(React.Fragment, null, motionDisabled
            ? items.map(function (item, index) { return renderFlashItem(item, index); })
            : renderFlashItemsWithTransitions(items))))));
}
applyDisplayName(Flashbar, 'Flashbar');
//# sourceMappingURL=index.js.map