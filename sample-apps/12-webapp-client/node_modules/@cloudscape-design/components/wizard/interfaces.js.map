{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/wizard/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface WizardProps extends BaseComponentProps {\n  /**\n   * Array of step objects. Each object represents a step in the wizard with the following properties:\n   *\n   * - `title` (string) - Text that's displayed as the title in the navigation pane and form header.\n   * - `info` (ReactNode) - (Optional) Area for a page level info link that's displayed in the form header.\n   *    The page level info link should trigger the default help panel content for the step. Use the [link component](/components/link/) to display the link.\n   * - `description` (ReactNode) - (Optional) Area below the form header for a page level description text to further explain the purpose, goal, or main actions of the step.\n   * - `content` (ReactNode) - Main content area to display form sections, form fields, and controls.\n   * - `errorText` (ReactNode) - (Optional) Error text that's displayed in a page level error alert.\n   *    Use this for rendering actionable server-side validation failure messages.\n   * - `isOptional` (boolean) - Specifies whether the step is optional or required. If set to `true`, the text from `i18nStrings.optional`\n   *    is rendered next to the `title` in the navigation step label and the form header title.\n   */\n  steps: ReadonlyArray<WizardProps.Step>;\n\n  /**\n   * Index of the step that's currently displayed. The first step has an index of zero (0).\n   *\n   * If you don't set this property, the component starts on the first step and switches step automatically\n   * when a user navigates using the buttons or an enabled step link in the navigation pane (that is, uncontrolled behavior).\n   *\n   * If you provide a value for this property, you must also set an `onNavigate` listener to update the property when\n   * a user navigates (that is, controlled behavior).\n   *\n   * If you set it to a value that exceeds the maximum value (that is, the number of steps minus 1), its value is ignored and the component uses the maximum value.\n   */\n  activeStepIndex?: number;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   *\n   * - `stepNumberLabel` ((stepNumber: number) => string) - A function that accepts a number (1-based indexing),\n   *    and returns a human-readable, localized string displaying the step number in the navigation pane. For example, \"Step 1\" or \"Step 2\".\n   * - `collapsedStepsLabel` ((stepNumber: number, stepsCount: number) => string) - A function that accepts two number parameters (1-based indexing),\n   *    and returns a string responsible for the navigation summary on smaller screens. For example, \"Step 1 of 3\". The parameters are as follows:\n   *    - `stepNumber` (number) - The step number that the user is currently on.\n   *    - `stepsCount` (number) - The total number of steps in the wizard.\n   * - `skipToButtonLabel`: ((targetStep: WizardProps.Step, targetStepNumber: number) => string) - An optional function that accepts the target step object\n   *    and the target step number (1-based indexing), and returns a string to be used as the *skip-to* button label. For example, \"Skip to Step 2\" or \"Skip to end\".\n   * - `cancelButton` (string) - The text of the button that enables the user to exit the flow.\n   * - `previousButton` (string) - The text of the button that enables the user to return to the previous step.\n   * - `nextButton` (string) - The text of the button that enables the user to move to the next step.\n   * - `submitButton` (string) - The text of the button that enables the user to submit the form.\n   * - `optional` (string) - The text displayed next to the step title and form header title when a step is declared optional.\n   */\n  i18nStrings: WizardProps.I18nStrings;\n\n  /**\n   * Renders the *next* or *submit* button in a loading state.\n   *\n   * Use this if you need to wait for a response from the server before the user can proceed to the next step, such as during server-side validation or retrieving the next step's information.\n   */\n  isLoadingNextStep?: boolean;\n\n  /**\n   * When set to `false`, the *skip-to* button is never shown.\n   * When set to `true`, the *skip-to* button may appear to offer faster navigation for the user.\n   *\n   * The *skip-to* button only allows to skip optional steps. It is shown when there is one or more optional\n   * steps ahead having no required steps in-between.\n   *\n   * Note: the *skip-to* button requires the function i18nStrings.skipToButtonLabel to be defined.\n   *\n   * Defaults to `false`.\n   */\n  allowSkipTo?: boolean;\n\n  /**\n   * Specifies left-aligned secondary actions for the wizard. Use a button dropdown if multiple actions are required.\n   */\n  secondaryActions?: React.ReactNode;\n\n  /**\n   * Called when a user clicks the *cancel* button.\n   * If a user has entered data in the form, you should prompt the user with a modal before exiting the wizard flow.\n   */\n  onCancel?: NonCancelableEventHandler;\n\n  /**\n   * Called when a user clicks the *submit* button.\n   */\n  onSubmit?: NonCancelableEventHandler;\n\n  /**\n   * Called when a user clicks the *next* button, the *previous* button, or an enabled step link in the navigation pane.\n   *\n   * The event `detail` includes the following:\n   * - `requestedStepIndex` - The index of the requested step.\n   * - `reason` - The user action that triggered the navigation event. It can be `next` (when the user clicks the *next* button),\n   * `previous` (when the user clicks the *previous* button), `step` (an enabled step link in the navigation pane),\n   * or `skip` (when navigated using navigation pane or the *skip-to* button to the previously unvisited step).\n   */\n  onNavigate?: NonCancelableEventHandler<WizardProps.NavigateDetail>;\n}\n\nexport namespace WizardProps {\n  export interface Step {\n    title: string;\n    info?: React.ReactNode;\n    description?: React.ReactNode;\n    content: React.ReactNode;\n    errorText?: React.ReactNode;\n    isOptional?: boolean;\n  }\n\n  export interface I18nStrings {\n    stepNumberLabel(stepNumber: number): string;\n    collapsedStepsLabel(stepNumber: number, stepsCount: number): string;\n    skipToButtonLabel?(targetStep: WizardProps.Step, targetStepNumber: number): string;\n    cancelButton: string;\n    previousButton: string;\n    nextButton: string;\n    submitButton: string;\n    optional?: string;\n  }\n\n  export interface NavigateDetail {\n    requestedStepIndex: number;\n    reason: WizardProps.NavigationReason;\n  }\n\n  export type NavigationReason = 'next' | 'previous' | 'step' | 'skip';\n}\n"]}