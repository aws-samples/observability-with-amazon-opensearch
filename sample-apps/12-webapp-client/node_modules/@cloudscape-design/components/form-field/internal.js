import { __assign, __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useRef } from 'react';
import clsx from 'clsx';
import { getBaseProps } from '../internal/base-component';
import { FormFieldContext, useFormFieldContext } from '../internal/context/form-field-context';
import { useUniqueId } from '../internal/hooks/use-unique-id';
import { useVisualRefresh } from '../internal/hooks/use-visual-mode';
import InternalGrid from '../grid/internal';
import InternalIcon from '../icon/internal';
import { getAriaDescribedBy, getGridDefinition, getSlotIds } from './util';
import styles from './styles.css.js';
import { useMergeRefs } from '../internal/hooks/use-merge-refs';
import { joinStrings } from '../internal/utils/strings';
export var FormFieldError = function (_a) {
    var id = _a.id, children = _a.children;
    return (React.createElement("div", { className: styles.error },
        React.createElement("div", { className: styles['error-icon-shake-wrapper'] },
            React.createElement("div", { className: styles['error-icon-scale-wrapper'] },
                React.createElement(InternalIcon, { name: "status-warning", size: "small" }))),
        React.createElement("span", { id: id, className: styles.error__message }, children)));
};
export default function InternalFormField(_a) {
    var controlId = _a.controlId, _b = _a.stretch, stretch = _b === void 0 ? false : _b, label = _a.label, info = _a.info, children = _a.children, secondaryControl = _a.secondaryControl, description = _a.description, constraintText = _a.constraintText, errorText = _a.errorText, __hideLabel = _a.__hideLabel, _c = _a.__internalRootRef, __internalRootRef = _c === void 0 ? null : _c, rest = __rest(_a, ["controlId", "stretch", "label", "info", "children", "secondaryControl", "description", "constraintText", "errorText", "__hideLabel", "__internalRootRef"]);
    var baseProps = getBaseProps(rest);
    var ref = useRef(null);
    var isRefresh = useVisualRefresh(ref);
    var instanceUniqueId = useUniqueId('formField');
    var generatedControlId = controlId || instanceUniqueId;
    var formFieldId = controlId || generatedControlId;
    var slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText);
    var ariaDescribedBy = getAriaDescribedBy(slotIds);
    var gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);
    var _d = useFormFieldContext({}), parentAriaLabelledby = _d.ariaLabelledby, parentAriaDescribedby = _d.ariaDescribedby, parentInvalid = _d.invalid;
    var contextValuesWithoutControlId = {
        ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || undefined,
        ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || undefined,
        invalid: !!errorText || !!parentInvalid
    };
    var mergedRef = useMergeRefs(ref, __internalRootRef);
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(baseProps.className, styles.root), ref: mergedRef }),
        React.createElement("div", { className: clsx(__hideLabel && styles['visually-hidden']) },
            label && (React.createElement("label", { className: styles.label, id: slotIds.label, htmlFor: generatedControlId }, label)),
            !__hideLabel && info && React.createElement("span", { className: styles.info }, info)),
        description && (React.createElement("div", { className: styles.description, id: slotIds.description }, description)),
        React.createElement("div", { className: clsx(styles.controls, __hideLabel && styles['label-hidden']) },
            React.createElement(InternalGrid, { gridDefinition: gridDefinition },
                React.createElement(FormFieldContext.Provider, { value: __assign({ controlId: generatedControlId }, contextValuesWithoutControlId) }, children && React.createElement("div", { className: styles.control }, children)),
                secondaryControl && (React.createElement(FormFieldContext.Provider, { value: contextValuesWithoutControlId },
                    React.createElement("div", { className: styles['secondary-control'] }, secondaryControl))))),
        (constraintText || errorText) && (React.createElement("div", { className: styles.hints },
            errorText && React.createElement(FormFieldError, { id: slotIds.error }, errorText),
            constraintText && (React.createElement("div", { className: clsx(styles.constraint, errorText && styles['constraint-has-error']), id: slotIds.constraint }, constraintText))))));
}
//# sourceMappingURL=internal.js.map