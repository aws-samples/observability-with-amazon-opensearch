import { __assign, __rest, __spreadArray } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useCallback, useMemo } from 'react';
import { filterOptions } from './utils/utils';
import { KeyCode } from '../internal/keycode';
import { generateTestIndexes } from '../internal/components/options-list/utils/test-indexes';
var parentMap = new WeakMap();
export var getParentGroup = function (item) { return parentMap.get(item); };
export var useAutosuggestItems = function (options) {
    if (options === void 0) { options = []; }
    return useMemo(function () { return createItems(options); }, [options]);
};
function createItems(options) {
    var items = [];
    for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        if (isGroup(option)) {
            items.push.apply(items, flattenGroup(option));
        }
        else {
            items.push(__assign(__assign({}, option), { option: option }));
        }
    }
    return items;
}
function isGroup(optionOrGroup) {
    return 'options' in optionOrGroup;
}
function flattenGroup(group) {
    var options = group.options, rest = __rest(group, ["options"]);
    var hasOnlyDisabledChildren = options.every(function (option) { return option.disabled; });
    var parent = __assign(__assign({}, rest), { type: 'parent', disabled: rest.disabled || hasOnlyDisabledChildren, option: group });
    var children = options.map(function (option) { return (__assign(__assign({}, option), { type: 'child', disabled: option.disabled || parent.disabled, option: option })); });
    // TODO: Refactor parentMap and remove this side effect
    children.forEach(function (child) { return parentMap.set(child, __assign(__assign({}, group), { option: group })); });
    return [parent].concat(children);
}
export var useFilteredItems = function (autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextLabel) {
    return useMemo(function () {
        var filteredItems = filteringType === 'auto' && !showAll ? filterOptions(autosuggestItems, filterText) : __spreadArray([], autosuggestItems, true);
        if (value && !__hideEnteredTextLabel) {
            filteredItems.unshift({ value: value, type: 'use-entered', option: { value: value } });
        }
        generateTestIndexes(filteredItems, getParentGroup);
        return filteredItems;
    }, [autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextLabel]);
};
export var useSelectVisibleOption = function (filteredItems, selectOption, isInteractive) {
    return useCallback(function (index) {
        var option = filteredItems[index];
        if (option && isInteractive(option)) {
            selectOption(option);
        }
    }, [filteredItems, selectOption, isInteractive]);
};
export var useHighlightVisibleOption = function (filteredItems, setHighlightedIndex, isHighlightable) {
    return useCallback(function (index) {
        var option = filteredItems[index];
        if (option && isHighlightable(option)) {
            setHighlightedIndex(index);
        }
    }, [filteredItems, setHighlightedIndex, isHighlightable]);
};
export var useKeyboardHandler = function (moveHighlight, openDropdown, selectHighlighted, usingMouse, open, onKeyDown) {
    return useCallback(function (e) {
        switch (e.detail.keyCode) {
            case KeyCode.down: {
                moveHighlight(1);
                openDropdown();
                usingMouse.current = false;
                e.preventDefault();
                break;
            }
            case KeyCode.up: {
                moveHighlight(-1);
                openDropdown();
                usingMouse.current = false;
                e.preventDefault();
                break;
            }
            case KeyCode.enter: {
                if (open) {
                    selectHighlighted();
                    e.preventDefault();
                }
                onKeyDown && onKeyDown(e);
                break;
            }
            default: {
                onKeyDown && onKeyDown(e);
            }
        }
    }, [moveHighlight, selectHighlighted, onKeyDown, usingMouse, open, openDropdown]);
};
//# sourceMappingURL=controller.js.map