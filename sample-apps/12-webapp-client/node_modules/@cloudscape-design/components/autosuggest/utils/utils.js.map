{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/autosuggest/utils/utils.ts"],"names":[],"mappings":"AAOA,IAAM,OAAO,GAAG,UAAC,MAAuB,IAAK,OAAA,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAA5C,CAA4C,CAAC;AAE1F,IAAM,YAAY,GAAG,UAAC,OAA0B;IAC9C,IAAI,OAAO,CAAC,MAAM,EAAE;QAClB,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/C,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;YACvB,OAAO,CAAC,GAAG,EAAE,CAAC;SACf;KACF;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,OAA0B,EAAE,IAAY;IACpE,IAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAoB,UAAC,UAAU,EAAE,MAAM;QAC3E,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACnB,YAAY,CAAC,UAAU,CAAC,CAAC;YACzB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;aAAM,IAAI,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;YAC1C,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;QACD,OAAO,UAAU,CAAC;IACpB,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,YAAY,CAAC,eAAe,CAAC,CAAC;IAC9B,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,MAAuB,EAAE,IAAY;IAC9D,IAAM,gBAAgB,GAAuB,CAAC,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;IAC3F,IAAM,mBAAmB,GAA0B,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAE7E,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAEtC,IAAM,iBAAiB,GAAG,UAAC,IAAsB,IAAK,OAAA,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,EAArC,CAAqC,CAAC;IAC5F,IAAM,kBAAkB,GAAG,UAAC,IAAyB,YAAK,OAAA,MAAA,MAAM,CAAC,IAAI,CAAC,0CAAE,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,EAA9B,CAA8B,CAAC,CAAA,EAAA,CAAC;IAEtH,OAAO,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAClG,CAAC,CAAC;AAEF,IAAM,WAAW,GAAG,UAAC,KAAyB,EAAE,UAAkB;IAChE,OAAO,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AutosuggestItem } from '../interfaces';\n\ntype SearchableFields = 'value' | 'label' | 'description' | 'labelTag';\ntype SearchableTagFields = 'tags' | 'filteringTags';\n\nconst isGroup = (option: AutosuggestItem) => 'type' in option && option.type === 'parent';\n\nconst popLastGroup = (options: AutosuggestItem[]) => {\n  if (options.length) {\n    const lastOption = options[options.length - 1];\n    if (isGroup(lastOption)) {\n      options.pop();\n    }\n  }\n};\n\nexport const filterOptions = (options: AutosuggestItem[], text: string): AutosuggestItem[] => {\n  const filteredOptions = options.reduce<AutosuggestItem[]>((filteredIn, option) => {\n    if (isGroup(option)) {\n      popLastGroup(filteredIn);\n      filteredIn.push(option);\n    } else if (matchSingleOption(option, text)) {\n      filteredIn.push(option);\n    }\n    return filteredIn;\n  }, []);\n  popLastGroup(filteredOptions);\n  return filteredOptions;\n};\n\nconst matchSingleOption = (option: AutosuggestItem, text: string): boolean => {\n  const searchableFields: SearchableFields[] = ['value', 'label', 'description', 'labelTag'];\n  const searchableTagFields: SearchableTagFields[] = ['tags', 'filteringTags'];\n\n  const searchText = text.toLowerCase();\n\n  const searchStrFieldsFn = (attr: SearchableFields) => matchString(option[attr], searchText);\n  const searchTagsFieldsFn = (attr: SearchableTagFields) => option[attr]?.some(value => matchString(value, searchText));\n\n  return searchableFields.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);\n};\n\nconst matchString = (value: string | undefined, searchText: string) => {\n  return value && value.toLowerCase().indexOf(searchText) !== -1;\n};\n"]}