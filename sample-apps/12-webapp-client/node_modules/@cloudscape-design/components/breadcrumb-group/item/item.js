import { __assign } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import InternalIcon from '../../icon/internal';
import styles from './styles.css.js';
import clsx from 'clsx';
import useFocusVisible from '../../internal/hooks/focus-visible';
import { fireCancelableEvent, isPlainLeftClick } from '../../internal/events';
import { getEventDetail } from '../internal';
export function BreadcrumbItem(_a) {
    var _b;
    var item = _a.item, onClick = _a.onClick, onFollow = _a.onFollow, _c = _a.isLast, isLast = _c === void 0 ? false : _c, _d = _a.isCompressed, isCompressed = _d === void 0 ? false : _d;
    var focusVisible = useFocusVisible();
    var preventDefault = function (event) { return event.preventDefault(); };
    var onClickHandler = function (event) {
        if (isPlainLeftClick(event)) {
            fireCancelableEvent(onFollow, getEventDetail(item), event);
        }
        fireCancelableEvent(onClick, getEventDetail(item), event);
    };
    return (React.createElement("div", { className: clsx(styles.breadcrumb, isLast && styles.last) },
        React.createElement("a", __assign({}, focusVisible, { href: item.href || '#', className: clsx(styles.anchor, (_b = {}, _b[styles.compressed] = isCompressed, _b)), "aria-current": isLast ? 'page' : undefined, "aria-disabled": isLast && 'true', onClick: isLast ? preventDefault : onClickHandler }),
            React.createElement("span", { className: styles.text }, item.text)),
        !isLast ? (React.createElement("span", { className: styles.icon },
            React.createElement(InternalIcon, { name: "angle-right" }))) : null));
}
//# sourceMappingURL=item.js.map