{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/code-editor/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Ace } from 'ace-builds';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { AceModes } from './ace-modes';\nimport { DarkThemes, LightThemes } from './ace-themes';\nimport { FormFieldControlProps } from '../internal/context/form-field-context';\n\nexport interface CodeEditorProps extends BaseComponentProps, FormFieldControlProps {\n  /**\n   * The ace object.\n   */\n  ace: any;\n\n  /**\n   * Specifies the content that's displayed in the code editor.\n   */\n  value: string;\n\n  /**\n   * Specifies the programming language. You can use any of the programming languages supported by the `ace` object that you provide.\n   */\n  language: CodeEditorProps.Language;\n\n  /**\n   * An event handler called when the value changes.\n   * The event `detail` contains the current value of the code editor content.\n   * **Deprecated**, replaced by `onDelayedChange`.\n   */\n  onChange?: NonCancelableEventHandler<CodeEditorProps.ChangeDetail>;\n\n  /**\n   * An event handler called when the value changes.\n   * The event `detail` contains the current value of the code editor content.\n   * A user interaction can cause multiple change events to be emitted by the Ace editor. They are batched together into a single `onDelayedChange` event to avoid bugs when controlling the `value` field.\n   */\n  onDelayedChange?: NonCancelableEventHandler<CodeEditorProps.ChangeDetail>;\n\n  /**\n   * Annotations returned from Ace syntax checker after code validation.\n   */\n  onValidate?: NonCancelableEventHandler<CodeEditorProps.ValidateDetail>;\n\n  /**\n   * Specifies the component preferences.\n   *\n   * If set to `undefined`, the component uses the following default value:\n   *\n   * ```\n   * {\n   *   wrapLines: true,\n   *   theme: 'dawn'\n   * }\n   * ```\n   *\n   * You can use any theme provided by Ace.\n   */\n  preferences?: Partial<CodeEditorProps.Preferences>;\n\n  /**\n   * Called when any of the preferences change.\n   * The event `detail` contains the value of all the preferences as submitted by the user.\n   *\n   */\n  onPreferencesChange: NonCancelableEventHandler<CodeEditorProps.Preferences>;\n\n  /**\n   * Renders the code editor in a loading state.\n   */\n  loading?: boolean;\n\n  /**\n   * Called when the user clicks the recovery button in the error state.\n   * Use this to retry loading the code editor or to provide another option for the user to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler<void>;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   * The object should contain, among others:\n   *\n   * * `loadingState` - Specifies the text to display while the component is loading.\n   * * `errorState` - Specifies the text to display if there is an error loading Ace.\n   * * `errorStateRecovery`: Specifies the text for the recovery button that's displayed next to the error text.\n   *    Use the `recoveryClick` event to do a recovery action (for example, retrying the request).\n   */\n  i18nStrings: CodeEditorProps.I18nStrings;\n\n  /**\n   * Specifies the height of the code editor document.\n   */\n  editorContentHeight?: number;\n\n  /**\n   * Called when the user resizes the editor by dragging the resize icon.\n   * The event `detail` contains the new height of the editor in pixels.\n   */\n  onEditorContentResize?: NonCancelableEventHandler<CodeEditorProps.ResizeDetail>;\n}\n\nexport namespace CodeEditorProps {\n  export type Language = typeof AceModes[number]['value'];\n  export type Theme = typeof LightThemes[number]['value'] | typeof DarkThemes[number]['value'];\n\n  export interface Preferences {\n    wrapLines: boolean;\n    theme: Theme;\n  }\n\n  export interface I18nStrings {\n    loadingState: string;\n    errorState: string;\n    errorStateRecovery: string;\n\n    editorGroupAriaLabel: string;\n    statusBarGroupAriaLabel: string;\n\n    cursorPosition: (row: number, column: number) => string;\n    errorsTab: string;\n    warningsTab: string;\n    preferencesButtonAriaLabel: string;\n    paneCloseButtonAriaLabel: string;\n\n    preferencesModalHeader: string;\n    preferencesModalCancel: string;\n    preferencesModalConfirm: string;\n    preferencesModalWrapLines: string;\n    preferencesModalTheme: string;\n    preferencesModalLightThemes: string;\n    preferencesModalDarkThemes: string;\n  }\n  export interface ResizeDetail {\n    height: number;\n  }\n  export interface ChangeDetail {\n    value: string;\n  }\n\n  export interface ValidateDetail {\n    annotations: Ace.Annotation[];\n  }\n}\n"]}