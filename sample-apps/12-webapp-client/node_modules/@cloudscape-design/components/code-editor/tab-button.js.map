{"version":3,"file":"tab-button.js","sourceRoot":"","sources":["../../../src/code-editor/tab-button.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,eAAe,MAAM,iCAAiC,CAAC;AAE9D,OAAO,YAAY,MAAM,kBAAkB,CAAC;AAE5C,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAoBrC,MAAM,CAAC,IAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CACvC,UACE,EAciB,EACjB,GAAiC;;QAd/B,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,OAAO,aAAA,EACP,OAAO,aAAA,EACP,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,UAAU,gBAAA,EACV,SAAS,eAAA,EACT,MAAM,YAAA,EACN,SAAS,eAAA,EACT,IAAI,UAAA,EACJ,SAAS,eAAA;IAIX,IAAM,YAAY,GAAG,eAAe,EAAE,CAAC;IACvC,OAAO,CACL,yCACE,SAAS,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC;YAC/C,GAAC,MAAM,CAAC,oBAAoB,CAAC,IAAG,MAAM;YACtC,GAAC,MAAM,CAAC,sBAAsB,CAAC,IAAG,QAAQ;YAC1C,GAAC,MAAM,CAAC,qBAAqB,CAAC,IAAG,SAAS;gBAC1C,EACF,OAAO,EAAE,OAAO,EAChB,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,GAAG,EAAE,GAAG,EACR,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAC,KAAK,mBACK,MAAM,mBACN,MAAM,iBACR,UAAU,gBACX,SAAS,IACjB,YAAY;QAEhB,oBAAC,YAAY,IAAC,IAAI,EAAE,QAAQ,GAAI;;QAAE,IAAI,CAC/B,CACV,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\n\nimport styles from './styles.css.js';\n\ninterface TabButtonProps {\n  text: string;\n  iconName: IconProps.Name;\n  active: boolean;\n  disabled: boolean;\n  tabIndex?: number;\n  ariaHidden?: boolean;\n  ariaLabel?: string;\n  paneId: string;\n  isRefresh: boolean;\n\n  className: string;\n\n  onClick: () => void;\n  onFocus?: React.FocusEventHandler<HTMLButtonElement>;\n  onBlur?: React.FocusEventHandler<HTMLButtonElement>;\n}\n\nexport const TabButton = React.forwardRef(\n  (\n    {\n      active,\n      disabled,\n      iconName,\n      onClick,\n      onFocus,\n      onBlur,\n      tabIndex,\n      ariaHidden,\n      ariaLabel,\n      paneId,\n      isRefresh,\n      text,\n      className,\n    }: TabButtonProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const focusVisible = useFocusVisible();\n    return (\n      <button\n        className={clsx([styles['tab-button'], className], {\n          [styles['tab-button--active']]: active,\n          [styles['tab-button--disabled']]: disabled,\n          [styles['tab-button--refresh']]: isRefresh,\n        })}\n        onClick={onClick}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        disabled={disabled}\n        ref={ref}\n        tabIndex={tabIndex}\n        role=\"tab\"\n        aria-selected={active}\n        aria-controls={paneId}\n        aria-hidden={ariaHidden}\n        aria-label={ariaLabel}\n        {...focusVisible}\n      >\n        <InternalIcon name={iconName} /> {text}\n      </button>\n    );\n  }\n);\n"]}