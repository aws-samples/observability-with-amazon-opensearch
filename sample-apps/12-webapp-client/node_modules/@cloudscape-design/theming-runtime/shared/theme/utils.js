export function isValue(val) {
    return typeof val === 'string' && !isReference(val);
}
export function isReference(val) {
    return typeof val === 'string' && val.charAt(0) === '{' && val.charAt(val.length - 1) === '}';
}
export function isModeValue(val) {
    return (typeof val === 'object' &&
        val !== null &&
        !Object.keys(val).some(function (state) { return !(isValue(val[state]) || isReference(val[state])); }));
}
export function isOptionalState(val) {
    return 'selector' in val;
}
export function getReference(reference) {
    return reference.slice(1, reference.length - 1);
}
export function getMode(theme, token) {
    var _a;
    var modeId = theme.tokenModeMap[token];
    return (_a = theme.modes[modeId]) !== null && _a !== void 0 ? _a : null;
}
export function getDefaultState(mode) {
    var states = Object.keys(mode.states);
    for (var index = 0; index < states.length; index++) {
        var state = states[index];
        var option = mode.states[state];
        if (option && 'default' in option && option["default"]) {
            return state;
        }
    }
    throw new Error("Mode ".concat(JSON.stringify(mode), " does not have a default state"));
}
