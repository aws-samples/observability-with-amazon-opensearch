var Selector = /** @class */ (function () {
    function Selector(customizer) {
        this.customizer = customizer;
    }
    Selector.prototype["for"] = function (_a) {
        var global = _a.global, local = _a.local;
        if (global.length === 1 && !(local === null || local === void 0 ? void 0 : local.length) && global[0] === ':root') {
            // :root is only applied alone
            return this.customizer(':root');
        }
        var globalWithoutRoot = global.filter(function (f) { return f !== ':root'; });
        var selector = this.toSelector(globalWithoutRoot);
        if (local === null || local === void 0 ? void 0 : local.length) {
            selector += " ".concat(this.toSelector(local));
        }
        return this.customizer(selector.trim());
    };
    Selector.prototype.toSelector = function (individuals) {
        // Sort to guarantee a stable generation
        return individuals.slice().sort().join('');
    };
    return Selector;
}());
export { Selector };
