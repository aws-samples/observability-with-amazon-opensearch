// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Allows building a stylesheet by appending selectors and declarations. A call of
 * `toString` will return CSS.
 */
var Stylesheet = /** @class */ (function () {
    function Stylesheet() {
        this.rulesMap = new Map();
        this.paths = new Map();
        this.counter = 0;
    }
    Stylesheet.prototype.appendRule = function (rule) {
        this.rulesMap.set(rule.selector, [rule, this.counter++]);
    };
    Stylesheet.prototype.appendRuleWithPath = function (rule, path) {
        this.rulesMap.set(rule.selector, [rule, this.counter++]);
        this.paths.set(rule, path);
    };
    Stylesheet.prototype.removeRule = function (rule) {
        this.rulesMap["delete"](rule.selector);
        this.paths["delete"](rule);
    };
    Stylesheet.prototype.findRule = function (selector) {
        var ruleOrUndefined = this.rulesMap.get(selector);
        return ruleOrUndefined === null || ruleOrUndefined === void 0 ? void 0 : ruleOrUndefined[0];
    };
    Stylesheet.prototype.getPath = function (rule) {
        var path = this.paths.get(rule);
        if (!path) {
            throw new Error("No path for rule with selector: ".concat(rule.selector));
        }
        return path;
    };
    Stylesheet.prototype.getAllRules = function () {
        var rules = [];
        this.paths.forEach(function (_, key) { return rules.push(key); });
        return rules;
    };
    /**
     * @returns CSS
     */
    Stylesheet.prototype.toString = function () {
        return asValuesArray(this.rulesMap)
            .map(function (rule) { return rule.toString(); })
            .join('\n');
    };
    return Stylesheet;
}());
export default Stylesheet;
var Rule = /** @class */ (function () {
    function Rule(selector) {
        this.declarationsMap = new Map();
        this.counter = 0;
        this.selector = selector;
    }
    Rule.prototype.appendDeclaration = function (declaration) {
        this.declarationsMap.set(declaration.property, [declaration, this.counter++]);
    };
    Rule.prototype.clear = function () {
        this.declarationsMap = new Map();
        this.counter = 0;
    };
    Rule.prototype.getAllDeclarations = function () {
        return asValuesArray(this.declarationsMap);
    };
    Rule.prototype.size = function () {
        return this.declarationsMap.size;
    };
    Rule.prototype.toString = function () {
        var lines = asValuesArray(this.declarationsMap).map(function (decl) { return decl.toString(); });
        return "".concat(this.selector, "{\n\t").concat(lines.join('\n\t'), "\n}");
    };
    return Rule;
}());
export { Rule };
var Declaration = /** @class */ (function () {
    function Declaration(property, value) {
        this.property = property;
        this.value = value;
    }
    Declaration.prototype.toString = function () {
        return "".concat(this.property, ":").concat(this.value, ";");
    };
    return Declaration;
}());
export { Declaration };
function asValuesArray(map) {
    var tmp = [];
    map.forEach(function (_a) {
        var item = _a[0], position = _a[1];
        return tmp.push([item, position]);
    });
    tmp.sort(function (_a, _b) {
        var itemA = _a[0], posA = _a[1];
        var itemB = _b[0], posB = _b[1];
        return posA - posB;
    });
    return tmp.map(function (_a) {
        var item = _a[0];
        return item;
    });
}
