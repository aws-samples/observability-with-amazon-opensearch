// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { entries } from '../utils';
import { Declaration } from './stylesheet';
var MinimalTransformer = /** @class */ (function () {
    function MinimalTransformer() {
    }
    MinimalTransformer.prototype.transform = function (stylesheet) {
        var rules = stylesheet.getAllRules();
        var rulesWithPath = rules.map(function (rule) { return ({
            rule: rule,
            path: stylesheet.getPath(rule)
        }); });
        var sorted = rulesWithPath.sort(function (_a, _b) {
            var pathA = _a.path;
            var pathB = _b.path;
            return pathA.length - pathB.length;
        });
        sorted.forEach(function (_a) {
            var rule = _a.rule, path = _a.path;
            if (path.length === 0) {
                // Root rule nothing to see here.
                return;
            }
            var resolvedParent = {};
            for (var i = path.length - 1; i >= 0; i--) {
                var parent_1 = path[i];
                var declarations = parent_1.getAllDeclarations();
                declarations.forEach(function (decl) {
                    resolvedParent[decl.property] = decl.value;
                });
            }
            var ruleValue = rule.getAllDeclarations().reduce(function (acc, decl) {
                acc[decl.property] = decl.value;
                return acc;
            }, {});
            var diff = difference(resolvedParent, ruleValue);
            rule.clear();
            entries(diff).forEach(function (_a) {
                var property = _a[0], value = _a[1];
                return rule.appendDeclaration(new Declaration(property, value));
            });
            if (rule.size() === 0) {
                stylesheet.removeRule(rule);
            }
        });
        return stylesheet;
    };
    return MinimalTransformer;
}());
export { MinimalTransformer };
function difference(mapA, mapB) {
    var diff = {};
    Object.keys(mapA).forEach(function (key) {
        if (mapA[key] !== mapB[key] && mapB[key] !== undefined) {
            diff[key] = mapB[key];
        }
    });
    Object.keys(mapB).forEach(function (key) {
        if (mapA[key] !== mapB[key] && mapB[key] !== undefined) {
            diff[key] = mapB[key];
        }
    });
    return diff;
}
