import { __extends } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { defaultsReducer, modeReducer, reduce, resolveContext, resolveTheme, } from '../theme';
import Stylesheet from './stylesheet';
import { AbstractCreator } from './abstract';
import { compact } from './utils';
var SingleThemeCreator = /** @class */ (function (_super) {
    __extends(SingleThemeCreator, _super);
    function SingleThemeCreator(theme, ruleCreator) {
        var _this = _super.call(this) || this;
        _this.theme = theme;
        _this.resolution = resolveTheme(theme);
        _this.ruleCreator = ruleCreator;
        return _this;
    }
    SingleThemeCreator.prototype.create = function () {
        var _this = this;
        var stylesheet = new Stylesheet();
        var defaults = reduce(this.resolution, this.theme, defaultsReducer());
        var rootRule = this.ruleCreator.create({ global: [this.theme.selector] }, defaults);
        SingleThemeCreator.appendRuleToStylesheet(stylesheet, rootRule, []);
        SingleThemeCreator.forEachOptionalModeState(this.theme, function (mode, state) {
            var modeResolution = reduce(_this.resolution, _this.theme, modeReducer(mode, state));
            var modeRule = _this.ruleCreator.create({ global: [_this.theme.selector, mode.states[state].selector] }, modeResolution);
            SingleThemeCreator.appendRuleToStylesheet(stylesheet, modeRule, [rootRule]);
        });
        SingleThemeCreator.forEachContext(this.theme, function (context) {
            var contextResolution = reduce(resolveContext(_this.theme, context), _this.theme, defaultsReducer());
            var contextRule = _this.ruleCreator.create({ global: [_this.theme.selector], local: [context.selector] }, contextResolution);
            SingleThemeCreator.appendRuleToStylesheet(stylesheet, contextRule, [rootRule]);
            var contextRule2 = _this.ruleCreator.create({ global: [_this.theme.selector, context.selector] }, contextResolution);
            SingleThemeCreator.appendRuleToStylesheet(stylesheet, contextRule2, [rootRule]);
        });
        SingleThemeCreator.forEachContextWithinOptionalModeState(this.theme, function (context, mode, state) {
            var contextResolution = reduce(resolveContext(_this.theme, context), _this.theme, modeReducer(mode, state));
            var contextAndModeRule = _this.ruleCreator.create({ global: [_this.theme.selector, mode.states[state].selector], local: [context.selector] }, contextResolution);
            var contextRule = stylesheet.findRule(_this.ruleCreator.selectorFor({ global: [_this.theme.selector], local: [context.selector] }));
            var modeRule = stylesheet.findRule(_this.ruleCreator.selectorFor({
                global: [_this.theme.selector, mode.states[state].selector]
            }));
            var contextRuleGlobal = stylesheet.findRule(_this.ruleCreator.selectorFor({ global: [_this.theme.selector, context.selector] }));
            SingleThemeCreator.appendRuleToStylesheet(stylesheet, contextAndModeRule, compact([contextRule, modeRule, rootRule]));
            var contextRuleAndModeRuleGlobal = _this.ruleCreator.create({ global: [_this.theme.selector, mode.states[state].selector, context.selector] }, contextResolution);
            SingleThemeCreator.appendRuleToStylesheet(stylesheet, contextRuleAndModeRuleGlobal, compact([contextRuleGlobal, modeRule, rootRule]));
        });
        return stylesheet;
    };
    return SingleThemeCreator;
}(AbstractCreator));
export { SingleThemeCreator };
