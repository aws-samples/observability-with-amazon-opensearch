var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useRef } from 'react';
import { processItems, processSelectedItems, itemsAreEqual } from './operations/index.js';
import { createSyncProps } from './utils.js';
import { useCollectionState } from './use-collection-state.js';
export function useCollection(allItems, options) {
    var collectionRef = useRef(null);
    var _a = useCollectionState(options, collectionRef), state = _a[0], actions = _a[1];
    var _b = processItems(allItems, state, options), items = _b.items, pagesCount = _b.pagesCount, filteredItemsCount = _b.filteredItemsCount, actualPageIndex = _b.actualPageIndex;
    if (options.selection && !options.selection.keepSelection) {
        var newSelectedItems = processSelectedItems(items, state.selectedItems, options.selection.trackBy);
        if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
            // This is a recommended pattern for how to handle the state, dependent on the incoming props
            // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops
            actions.setSelectedItems(newSelectedItems);
        }
    }
    return __assign({ items: items, filteredItemsCount: filteredItemsCount, actions: actions }, createSyncProps(options, state, actions, collectionRef, {
        actualPageIndex: actualPageIndex,
        pagesCount: pagesCount,
        allItems: allItems,
    }));
}
