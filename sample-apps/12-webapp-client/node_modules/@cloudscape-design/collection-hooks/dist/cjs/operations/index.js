"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.itemsAreEqual = exports.processSelectedItems = exports.getTrackableValue = exports.processItems = void 0;
var filter_js_1 = require("./filter.js");
var property_filter_js_1 = require("./property-filter.js");
var sort_js_1 = require("./sort.js");
var paginate_js_1 = require("./paginate.js");
function processItems(items, _a, _b) {
    var filteringText = _a.filteringText, sortingState = _a.sortingState, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
    var filtering = _b.filtering, sorting = _b.sorting, pagination = _b.pagination, propertyFiltering = _b.propertyFiltering;
    var result = items;
    var pagesCount;
    var actualPageIndex;
    var filteredItemsCount;
    if (propertyFiltering) {
        result = (0, property_filter_js_1.propertyFilter)(result, propertyFilteringQuery || { tokens: [], operation: 'and' }, propertyFiltering);
        filteredItemsCount = result.length;
    }
    if (filtering) {
        result = (0, filter_js_1.filter)(result, filteringText, filtering);
        filteredItemsCount = result.length;
    }
    if (sorting) {
        result = (0, sort_js_1.sort)(result, sortingState);
    }
    if (pagination) {
        pagesCount = (0, paginate_js_1.getPagesCount)(result, pagination.pageSize);
        actualPageIndex = (0, paginate_js_1.normalizePageIndex)(currentPageIndex, pagesCount);
        result = (0, paginate_js_1.paginate)(result, actualPageIndex, pagination.pageSize);
    }
    return { items: result, pagesCount: pagesCount, filteredItemsCount: filteredItemsCount, actualPageIndex: actualPageIndex };
}
exports.processItems = processItems;
var getTrackableValue = function (trackBy, item) {
    if (!trackBy) {
        return item;
    }
    if (typeof trackBy === 'function') {
        return trackBy(item);
    }
    return item[trackBy];
};
exports.getTrackableValue = getTrackableValue;
var processSelectedItems = function (items, selectedItems, trackBy) {
    var selectedSet = new Set();
    selectedItems.forEach(function (item) { return selectedSet.add((0, exports.getTrackableValue)(trackBy, item)); });
    return items.filter(function (item) { return selectedSet.has((0, exports.getTrackableValue)(trackBy, item)); });
};
exports.processSelectedItems = processSelectedItems;
var itemsAreEqual = function (items1, items2, trackBy) {
    if (items1.length !== items2.length) {
        return false;
    }
    var set1 = new Set();
    items1.forEach(function (item) { return set1.add((0, exports.getTrackableValue)(trackBy, item)); });
    return items2.every(function (item) { return set1.has((0, exports.getTrackableValue)(trackBy, item)); });
};
exports.itemsAreEqual = itemsAreEqual;
