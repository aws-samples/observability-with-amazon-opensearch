"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sort = void 0;
function getSorter(sortingField) {
    return function (row1, row2) {
        var _a, _b;
        // Use empty string as a default value, because it works well to compare with both strings and numbers:
        // Every number can be casted to a string, but not every string can be casted to a meaningful number,
        // sometimes it is NaN.
        var value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : '';
        var value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : '';
        if (typeof value1 === 'string' && typeof value2 === 'string') {
            return value1.localeCompare(value2);
        }
        // use loose comparison to handle inconsistent data types
        // eslint-disable-next-line eqeqeq
        return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
    };
}
function sort(items, state) {
    if (!state) {
        return items;
    }
    var sortingColumn = state.sortingColumn;
    var comparator = 'sortingComparator' in sortingColumn
        ? sortingColumn.sortingComparator
        : sortingColumn.sortingField
            ? getSorter(sortingColumn.sortingField)
            : undefined;
    if (!comparator) {
        return items;
    }
    var sorted = items.slice();
    var direction = state.isDescending ? -1 : 1;
    sorted.sort(function (a, b) { return comparator(a, b) * direction; });
    return sorted;
}
exports.sort = sort;
