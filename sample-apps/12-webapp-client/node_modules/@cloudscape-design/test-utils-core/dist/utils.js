"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCode = exports.getUnscopedClassName = exports.appendSelector = exports.substituteScope = exports.isScopedSelector = exports.escapeSelector = void 0;
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/*eslint-env browser*/
var Tokenizer = __importStar(require("css-selector-tokenizer"));
require("css.escape");
var escapeSelector = function (value) {
    return CSS.escape(value);
};
exports.escapeSelector = escapeSelector;
var SCOPE_REGEX = /:scope/gi;
var isScopedSelector = function (selector) {
    return SCOPE_REGEX.test(selector);
};
exports.isScopedSelector = isScopedSelector;
var substituteScope = function (selector, scope) {
    return selector.replace(SCOPE_REGEX, scope);
};
exports.substituteScope = substituteScope;
function validateSelector(selector, tree) {
    if (tree.nodes.length > 1) {
        throw new Error("Multi-selector strings are not supported, got: \"".concat(selector, "\""));
    }
}
function findInsertionIndex(tokens) {
    var pseudoSelectors = ['pseudo-class', 'pseudo-element', 'nested-pseudo-class'];
    for (var i = 0; i < tokens.length; i++) {
        if (pseudoSelectors.indexOf(tokens[i].type) > -1) {
            return i;
        }
    }
    return tokens.length;
}
function appendSelector(selector, suffix) {
    var _a;
    var tree = Tokenizer.parse(selector);
    validateSelector(selector, tree);
    var suffixTree = Tokenizer.parse(suffix);
    validateSelector(suffix, suffixTree);
    var combinator = suffixTree.nodes[0].nodes.filter(function (node) { return node.type === 'operator' || node.type === 'spacing'; });
    if (combinator.length > 0) {
        throw new Error("Appended selector may not contain a combinator, got \"".concat(suffix, "\""));
    }
    (_a = tree.nodes[0].nodes).splice.apply(_a, __spreadArray([findInsertionIndex(tree.nodes[0].nodes), 0], suffixTree.nodes[0].nodes, false));
    return Tokenizer.stringify(tree);
}
exports.appendSelector = appendSelector;
var trimContentHash = function (className) {
    var splitSelector = className.replace('.', '').split('_');
    if (splitSelector.length >= 5) {
        splitSelector.splice(splitSelector.length - 2, splitSelector.length);
        var baseClassName = splitSelector.join('_');
        return "[class*=\"".concat(baseClassName, "\"]");
    }
    return className;
};
var getUnscopedClassName = function (selector) {
    // this regexp resembles the logic of this code in the theming-core package:
    // see src/build/tasks/postcss/generate-scoped-name.ts
    return selector.replace(/\.awsui_[a-zA-Z0-9_-]+/g, function (match) {
        return trimContentHash(match);
    });
};
exports.getUnscopedClassName = getUnscopedClassName;
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["pageUp"] = 33] = "pageUp";
    KeyCode[KeyCode["pageDown"] = 34] = "pageDown";
    KeyCode[KeyCode["end"] = 35] = "end";
    KeyCode[KeyCode["home"] = 36] = "home";
    KeyCode[KeyCode["space"] = 32] = "space";
    KeyCode[KeyCode["down"] = 40] = "down";
    KeyCode[KeyCode["left"] = 37] = "left";
    KeyCode[KeyCode["right"] = 39] = "right";
    KeyCode[KeyCode["up"] = 38] = "up";
    KeyCode[KeyCode["escape"] = 27] = "escape";
    KeyCode[KeyCode["enter"] = 13] = "enter";
    KeyCode[KeyCode["tab"] = 9] = "tab";
    KeyCode[KeyCode["shift"] = 16] = "shift";
    KeyCode[KeyCode["backspace"] = 8] = "backspace";
    KeyCode[KeyCode["control"] = 17] = "control";
    KeyCode[KeyCode["alt"] = 18] = "alt";
    KeyCode[KeyCode["meta"] = 91] = "meta";
})(KeyCode = exports.KeyCode || (exports.KeyCode = {}));
