"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWrapper = exports.ComponentWrapper = exports.ElementWrapper = exports.AbstractWrapper = exports.usesDom = void 0;
var utils_1 = require("./utils");
// Used as decorator to mark dom-only methods in test-utils
// eslint-disable-next-line @typescript-eslint/no-empty-function
var usesDom = function () { };
exports.usesDom = usesDom;
var defaultParams = {
    bubbles: true,
    cancelable: true
};
var AbstractWrapper = /** @class */ (function () {
    function AbstractWrapper(element) {
        this.element = element;
    }
    AbstractWrapper.prototype.getElement = function () {
        return this.element;
    };
    /**
     * Performs a click by triggering a mouse event.
     * Note that programmatic events ignore disabled attribute and will trigger listeners even if the element is disabled.
     */
    AbstractWrapper.prototype.click = function (params) {
        this.fireEvent(new MouseEvent('click', __assign(__assign({}, defaultParams), params)));
    };
    AbstractWrapper.prototype.keydown = function (args) {
        var params = typeof args === 'object' ? args : { keyCode: args };
        this.fireEvent(new KeyboardEvent('keydown', __assign(__assign({}, defaultParams), params)));
    };
    AbstractWrapper.prototype.keyup = function (keyCode) {
        this.fireEvent(new KeyboardEvent('keyup', __assign(__assign({}, defaultParams), { keyCode: keyCode })));
    };
    AbstractWrapper.prototype.keypress = function (keyCode) {
        // React more or less requires charCode to be set on keypress events
        // https://github.com/facebook/react/blob/d95c4938df670a8f0a13267bd89173737bb185e4/packages/react-dom/src/events/plugins/SimpleEventPlugin.js#L67-L74
        this.fireEvent(new KeyboardEvent('keypress', __assign(__assign({}, defaultParams), { keyCode: keyCode, charCode: keyCode })));
    };
    AbstractWrapper.prototype.fireEvent = function (event) {
        this.element.dispatchEvent(event);
    };
    AbstractWrapper.prototype.focus = function () {
        if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
            this.element.focus();
        }
        else {
            throw new Error('Focus method is not supported for this element type');
        }
    };
    AbstractWrapper.prototype.blur = function () {
        if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
            this.element.blur();
        }
        else {
            throw new Error('Blur method is not supported for this element type');
        }
    };
    AbstractWrapper.prototype.find = function (selector) {
        return this.findAll(selector)[0] || null;
    };
    AbstractWrapper.prototype.matches = function (selector) {
        return this.element.matches(selector) ? this : null;
    };
    AbstractWrapper.prototype.findAll = function (selector) {
        var elements;
        if ((0, utils_1.isScopedSelector)(selector)) {
            var randomValue = Math.floor(Math.random() * 100000);
            var attributeName = "data-awsui-test-scope-".concat(randomValue);
            var domSelector = (0, utils_1.substituteScope)(selector, "[".concat(attributeName, "]"));
            this.getElement().setAttribute(attributeName, '');
            elements = Array.prototype.slice.call(this.element.querySelectorAll(domSelector));
            this.getElement().removeAttribute(attributeName);
        }
        else {
            elements = Array.prototype.slice.call(this.element.querySelectorAll(selector));
        }
        return elements.map(function (element) { return new ElementWrapper(element); });
    };
    AbstractWrapper.prototype.findByClassName = function (className) {
        return this.find(".".concat(className));
    };
    AbstractWrapper.prototype.findAllByClassName = function (className) {
        return this.findAll(".".concat(className));
    };
    AbstractWrapper.prototype.findComponent = function (selector, ComponentClass) {
        var elementWrapper = this.find(selector);
        return elementWrapper ? new ComponentClass(elementWrapper.getElement()) : null;
    };
    return AbstractWrapper;
}());
exports.AbstractWrapper = AbstractWrapper;
var ElementWrapper = /** @class */ (function (_super) {
    __extends(ElementWrapper, _super);
    function ElementWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ElementWrapper;
}(AbstractWrapper));
exports.ElementWrapper = ElementWrapper;
var ComponentWrapper = /** @class */ (function (_super) {
    __extends(ComponentWrapper, _super);
    function ComponentWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ComponentWrapper;
}(AbstractWrapper));
exports.ComponentWrapper = ComponentWrapper;
function createWrapper() {
    return new ElementWrapper(document.body);
}
exports.createWrapper = createWrapper;
