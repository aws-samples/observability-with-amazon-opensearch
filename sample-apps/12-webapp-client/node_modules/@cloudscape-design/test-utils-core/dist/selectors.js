"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWrapper = exports.MultiElementWrapper = exports.ComponentWrapper = exports.ElementWrapper = exports.AbstractWrapper = void 0;
var utils_1 = require("./utils");
var getRootSelector = function (selector, root) {
    var rootSelector = (0, utils_1.isScopedSelector)(selector) ? (0, utils_1.substituteScope)(selector, root) : "".concat(root, " ").concat(selector);
    return (0, utils_1.getUnscopedClassName)(rootSelector);
};
var AbstractWrapper = /** @class */ (function () {
    function AbstractWrapper(root) {
        this.root = root;
    }
    AbstractWrapper.prototype.getElement = function () {
        return this.root;
    };
    AbstractWrapper.prototype.matches = function (selector) {
        return new ElementWrapper((0, utils_1.appendSelector)(this.root, (0, utils_1.getUnscopedClassName)(selector)));
    };
    AbstractWrapper.prototype.find = function (selector) {
        return new ElementWrapper(getRootSelector(selector, this.root));
    };
    AbstractWrapper.prototype.findAll = function (selector) {
        return new MultiElementWrapper(getRootSelector(selector, this.root), function (selector) { return new ElementWrapper(selector); });
    };
    AbstractWrapper.prototype.findByClassName = function (className) {
        return this.find(".".concat(className));
    };
    AbstractWrapper.prototype.findAllByClassName = function (className) {
        return this.findAll(".".concat(className));
    };
    AbstractWrapper.prototype.findComponent = function (selector, ComponentClass) {
        return new ComponentClass(this.find(selector).getElement());
    };
    AbstractWrapper.prototype.toSelector = function () {
        return this.root;
    };
    return AbstractWrapper;
}());
exports.AbstractWrapper = AbstractWrapper;
var ElementWrapper = /** @class */ (function (_super) {
    __extends(ElementWrapper, _super);
    function ElementWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ElementWrapper;
}(AbstractWrapper));
exports.ElementWrapper = ElementWrapper;
var ComponentWrapper = /** @class */ (function (_super) {
    __extends(ComponentWrapper, _super);
    function ComponentWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ComponentWrapper;
}(AbstractWrapper));
exports.ComponentWrapper = ComponentWrapper;
var MultiElementWrapper = /** @class */ (function (_super) {
    __extends(MultiElementWrapper, _super);
    function MultiElementWrapper(root, elementFactory) {
        var _this = _super.call(this, root) || this;
        _this.elementFactory = elementFactory;
        return _this;
    }
    MultiElementWrapper.prototype.get = function (index) {
        return this.elementFactory("".concat(this.root, ":nth-child(").concat(index, ")"));
    };
    MultiElementWrapper.prototype.map = function (factory) {
        return new MultiElementWrapper(this.root, function (root) { return factory(new ElementWrapper(root)); });
    };
    return MultiElementWrapper;
}(ElementWrapper));
exports.MultiElementWrapper = MultiElementWrapper;
function createWrapper() {
    return new ElementWrapper('body');
}
exports.createWrapper = createWrapper;
