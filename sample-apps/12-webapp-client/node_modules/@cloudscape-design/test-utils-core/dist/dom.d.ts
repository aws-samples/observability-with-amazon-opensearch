import { IElementWrapper } from './interfaces';
import { KeyCode } from './utils';
declare global {
    interface KeyboardEventInit {
        char?: string;
        keyCode?: number;
        charCode?: number;
    }
}
export declare const usesDom: MethodDecorator;
export declare class AbstractWrapper<ElementType extends Element> implements IElementWrapper<ElementType, Array<ElementWrapper<ElementType>>> {
    protected element: ElementType;
    constructor(element: ElementType);
    getElement(): ElementType;
    /**
     * Performs a click by triggering a mouse event.
     * Note that programmatic events ignore disabled attribute and will trigger listeners even if the element is disabled.
     */
    click(params?: MouseEventInit): void;
    keydown(keyCode: KeyCode): void;
    keydown(keyboardEventProps: KeyboardEventInit): void;
    keyup(keyCode: KeyCode): void;
    keypress(keyCode: KeyCode): void;
    fireEvent(event: Event): void;
    focus(): void;
    blur(): void;
    find<NewElementType extends Element = HTMLElement>(selector: string): ElementWrapper<NewElementType> | null;
    matches(selector: string): this | null;
    findAll<NewElementType extends Element = HTMLElement>(selector: string): ElementWrapper<NewElementType>[];
    findByClassName<NewElementType extends HTMLElement = HTMLElement>(className: string): ElementWrapper<NewElementType> | null;
    findAllByClassName<NewElementType extends HTMLElement = HTMLElement>(className: string): ElementWrapper<NewElementType>[];
    findComponent<Wrapper extends ComponentWrapper<ElementType>, ElementType extends HTMLElement>(selector: string, ComponentClass: {
        new (element: ElementType): Wrapper;
    }): Wrapper | null;
}
export declare class ElementWrapper<ElementType extends Element = HTMLElement> extends AbstractWrapper<ElementType> {
}
export declare class ComponentWrapper<ElementType extends Element = HTMLElement> extends AbstractWrapper<ElementType> {
}
export declare function createWrapper(): ElementWrapper;
