var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCalendarMonth = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _addDays = require("./add-days");

var _setDate = require("./set-date");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DAYS_IN_WEEK = 7;

var getCalendarMonth = function getCalendarMonth(date, options) {
  var _firstDayOfWeek$optio = _objectSpread({
    firstDayOfWeek: 1
  }, options),
      firstDayOfWeek = _firstDayOfWeek$optio.firstDayOfWeek;

  var firstDateOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
  var lastDateOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  var firstWeekdayOfMonth = firstDateOfMonth.getDay();
  var lastWeekdayOfMonth = lastDateOfMonth.getDay();
  var daysInMonth = lastDateOfMonth.getDate();
  var daysToPrepend = (firstWeekdayOfMonth - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
  var daysToAppend = (DAYS_IN_WEEK - 1 - lastWeekdayOfMonth + firstDayOfWeek) % DAYS_IN_WEEK;
  var month = [];
  var week = [];

  for (var i = 1 - daysToPrepend; i <= daysInMonth + daysToAppend + 1; i++) {
    if (i <= 0) {
      week.push((0, _addDays.addDays)(firstDateOfMonth, i - 1));
    } else if (i > daysInMonth) {
      week.push((0, _addDays.addDays)(lastDateOfMonth, i - daysInMonth));
    } else {
      week.push((0, _setDate.setDate)(date, i));
    }

    if (week.length === 7) {
      month.push(week);
      week = [];
    }
  }

  return month;
};

exports.getCalendarMonth = getCalendarMonth;
//# sourceMappingURL=index.js.map