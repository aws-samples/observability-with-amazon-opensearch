AWSTemplateFormatVersion: 2010-09-09
Description: "This template create the Amazon OpenSearch Service Domain resources for the Microservice Observability with Amazon OpenSearch Service Workshop."

Parameters:
  DomainName:
    Type: String
  EngineVersion:
    Type: String
  InstanceType:
    Type: String
  OpenSearchMasterUserName:
    Type: String
  ReverseProxyInstanceType:
    Type: String
  ReverseProxySSHLocation:
    Type: String
  VPC:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64

Resources:
  OpenSearchIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "opensearch-ingress-sg"
      GroupDescription: "Security group for opensearch ingress rule"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: "443"
          IpProtocol: tcp
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  OpenSearchServiceDomain:
    Type: "AWS::OpenSearchService::Domain"
    DependsOn:
      - OpenSearchIngressSecurityGroup
    Properties:
      DomainName:
        Ref: DomainName
      EngineVersion:
        Ref: EngineVersion
      ClusterConfig:
        InstanceCount: "1"
        InstanceType:
          Ref: InstanceType
      DomainEndpointOptions:
        EnforceHTTPS: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        Iops: "0"
        VolumeSize: "100"
        VolumeType: "gp2"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "*"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: !Ref OpenSearchMasterUserName
          MasterUserPassword: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref AOSMasterPasswordSecret
              - ":SecretString:password}}"
      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref OpenSearchIngressSecurityGroup
    UpdatePolicy:
      EnableVersionUpgrade: true

  ################## GENERATE OPENSEARCH PASSWORD ###################
  AOSMasterPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This secret has a dynamically generated secret password.
      GenerateSecretString:
        SecretStringTemplate:
          !Join ["", ['{"username": "', !Ref OpenSearchMasterUserName, '"}']]
        GenerateStringKey: "password"
        PasswordLength: 10
        ExcludeCharacters: "\" ' ( ) * + , - . / : ; < = > ! # ? @ [ \\ ] ^ _ ` { | } ~"

  RetrieveAOSPasswordLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
            Sid: AllowCWLogsWrite
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Ref AOSMasterPasswordSecret

  RetrieveAOSPasswordLambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: RetrieveAOSPasswordLambdaPolicy
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref RetrieveAOSPasswordLambdaPolicy
      Path: /

  RetrieveAOSPasswordLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: AOSMasterPasswordSecret
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt RetrieveAOSPasswordLambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 120
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import os
          import cfnresponse
          from botocore.exceptions import ClientError


          SECRET_ARN = os.getenv('SECRET_ARN')
          REGION = os.getenv('REGION')

          def lambda_handler(event, context):
              # Create a Secrets Manager client
              session = boto3.session.Session()
              client = session.client(
                  service_name='secretsmanager',
                  region_name=REGION
              )
              
              secret = ""
              
              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=SECRET_ARN
                  )
              except ClientError as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, err)
              else:
                  # Decrypts secret using the associated KMS key.
                  # Depending on whether the secret is a string or binary, one of these fields will be populated.
                  if 'SecretString' in get_secret_value_response:
                      secret = get_secret_value_response['SecretString']
                  else:
                      decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])

              password_secret = json.loads(secret)
              responseData = {"OpenSearchMasterPassword": password_secret["password"]}
              print(responseData)
              
              if responseData:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.FAILED, "Internal Error")
      Environment:
        Variables:
          SECRET_ARN: !Ref AOSMasterPasswordSecret
          REGION: !Ref AWS::Region

  RetrieveAOSPassword:
    Type: Custom::RetrieveAOSPassword
    DependsOn: RetrieveAOSPasswordLambdaFunction
    Properties:
      ServiceToken:
        Fn::GetAtt: RetrieveAOSPasswordLambdaFunction.Arn

  ######## Reverse Proxy Template ########
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Linux-SSMRoletoEC2-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: IAMRole

  ReverseProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ReverseProxyTargetGroup
      Port: 443
      Protocol: TCP
      TargetType: instance
      HealthCheckPort: 443
      HealthCheckProtocol: TCP
      VpcId: !Ref VPC

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ReverseProxyInstanceSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: network

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReverseProxyTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP

  ReverseProxyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: OpenSearchServiceDomain
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ReverseProxyLaunchTemplate
        Version: !GetAtt ReverseProxyLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref ReverseProxyTargetGroup

  ReverseProxyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref ReverseProxyInstanceType
        IamInstanceProfile: 
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref ReverseProxyInstanceSecurityGroup
        TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: "IsUsedForDeploy"
              Value: "true"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install jq -y
            amazon-linux-extras install nginx1 -y
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt -subj /C=US/ST=./L=./O=./CN=.

            host='${NetworkLoadBalancer.DNSName}'

            cat << EOF > /etc/nginx/conf.d/nginx_opensearch.conf
            server {
              listen 443 ssl;
              server_name $host;
              rewrite ^/$ https://$host/_dashboards redirect;

              ssl_certificate           /etc/nginx/cert.crt;
              ssl_certificate_key       /etc/nginx/cert.key;

              ssl_session_cache  builtin:1000  shared:SSL:10m;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
              ssl_prefer_server_ciphers on;

              location ^~ /_dashboards {
                  proxy_pass https://${OpenSearchServiceDomain.DomainEndpoint}/_dashboards;
                  proxy_cookie_domain ${OpenSearchServiceDomain.DomainEndpoint} $host;
                  proxy_set_header Accept-Encoding "";
                  sub_filter_types *;
                  sub_filter ${OpenSearchServiceDomain.DomainEndpoint} $host;
                  sub_filter_once off;
                  proxy_buffer_size 128k;
                  proxy_buffers 4 256k;
                  proxy_busy_buffers_size 256k;
              }
            }          
            EOF
            systemctl restart nginx.service
            systemctl enable nginx.service

  ReverseProxyInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref ReverseProxySSHLocation
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: !Ref ReverseProxySSHLocation
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC 

Outputs:
  AOSDomainArn:
    Value:
      "Fn::GetAtt":
        - OpenSearchServiceDomain
        - Arn
    Export:
      Name: AOSDomainArn
  AOSDomainEndpoint:
    Value:
      "Fn::GetAtt":
        - OpenSearchServiceDomain
        - DomainEndpoint
    Export:
      Name: AOSDomainEndpoint
  AOSDomainUserName:
    Value: !Ref OpenSearchMasterUserName
    Export:
      Name: AOSDomainUserName
  AOSDomainPassword:
    Value: !GetAtt RetrieveAOSPassword.OpenSearchMasterPassword
    Export:
      Name: AOSDomainPassword
  AOSDashboardsPublicIP:
    Description: Proxy (Public IP) for Amazon Opensearch Dashboards
    Value: !GetAtt NetworkLoadBalancer.DNSName
    Export:
      Name: AOSDashboardsPublicIP
  AOSMasterPasswordSecretArn:
    Value: !Ref AOSMasterPasswordSecret
    Export:
      Name: AOSMasterPasswordSecretArn
  OpenSearchIngressSecurityGroup:
    Value: !Ref OpenSearchIngressSecurityGroup
    Export:
      Name: OpenSearchIngressSecurityGroup
